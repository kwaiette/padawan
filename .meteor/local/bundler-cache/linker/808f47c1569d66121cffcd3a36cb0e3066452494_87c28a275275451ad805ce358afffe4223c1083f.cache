[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar _ = Package.underscore._;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar enableDebugLogging, publishComposite;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"reywood:publish-composite\":{\"lib\":{\"publish_composite.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/reywood_publish-composite/lib/publish_composite.js                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.export({\n  enableDebugLogging: () => enableDebugLogging,\n  publishComposite: () => publishComposite\n});\n\nlet _;\n\nmodule.watch(require(\"meteor/underscore\"), {\n  _(v) {\n    _ = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Publication;\nmodule.watch(require(\"./publication\"), {\n  default(v) {\n    Publication = v;\n  }\n\n}, 2);\nlet Subscription;\nmodule.watch(require(\"./subscription\"), {\n  default(v) {\n    Subscription = v;\n  }\n\n}, 3);\nlet debugLog, enableDebugLogging;\nmodule.watch(require(\"./logging\"), {\n  debugLog(v) {\n    debugLog = v;\n  },\n\n  enableDebugLogging(v) {\n    enableDebugLogging = v;\n  }\n\n}, 4);\n\nfunction publishComposite(name, options) {\n  return Meteor.publish(name, function publish(...args) {\n    const subscription = new Subscription(this);\n    const instanceOptions = prepareOptions.call(this, options, args);\n    const publications = [];\n    instanceOptions.forEach(opt => {\n      const pub = new Publication(subscription, opt);\n      pub.publish();\n      publications.push(pub);\n    });\n    this.onStop(() => {\n      publications.forEach(pub => pub.unpublish());\n    });\n    debugLog('Meteor.publish', 'ready');\n    this.ready();\n  });\n} // For backwards compatibility\n\n\nMeteor.publishComposite = publishComposite;\n\nfunction prepareOptions(options, args) {\n  let preparedOptions = options;\n\n  if (typeof preparedOptions === 'function') {\n    preparedOptions = preparedOptions.apply(this, args);\n  }\n\n  if (!preparedOptions) {\n    return [];\n  }\n\n  if (!_.isArray(preparedOptions)) {\n    preparedOptions = [preparedOptions];\n  }\n\n  return preparedOptions;\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"doc_ref_counter.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/reywood_publish-composite/lib/doc_ref_counter.js                                                        //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nclass DocumentRefCounter {\n  constructor(observer) {\n    this.heap = {};\n    this.observer = observer;\n  }\n\n  increment(collectionName, docId) {\n    const key = `${collectionName}:${docId.valueOf()}`;\n\n    if (!this.heap[key]) {\n      this.heap[key] = 0;\n    }\n\n    this.heap[key] += 1;\n  }\n\n  decrement(collectionName, docId) {\n    const key = `${collectionName}:${docId.valueOf()}`;\n\n    if (this.heap[key]) {\n      this.heap[key] -= 1;\n      this.observer.onChange(collectionName, docId, this.heap[key]);\n    }\n  }\n\n}\n\nmodule.exportDefault(DocumentRefCounter);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"logging.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/reywood_publish-composite/lib/logging.js                                                                //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.export({\n  debugLog: () => debugLog,\n  enableDebugLogging: () => enableDebugLogging\n});\n\n/* eslint-disable no-console */\nlet debugLoggingEnabled = false;\n\nfunction debugLog(source, message) {\n  if (!debugLoggingEnabled) {\n    return;\n  }\n\n  let paddedSource = source;\n\n  while (paddedSource.length < 35) {\n    paddedSource += ' ';\n  }\n\n  console.log(`[${paddedSource}] ${message}`);\n}\n\nfunction enableDebugLogging() {\n  debugLoggingEnabled = true;\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"publication.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/reywood_publish-composite/lib/publication.js                                                            //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Match, check;\nmodule.watch(require(\"meteor/check\"), {\n  Match(v) {\n    Match = v;\n  },\n\n  check(v) {\n    check = v;\n  }\n\n}, 1);\n\nlet _;\n\nmodule.watch(require(\"meteor/underscore\"), {\n  _(v) {\n    _ = v;\n  }\n\n}, 2);\nlet debugLog;\nmodule.watch(require(\"./logging\"), {\n  debugLog(v) {\n    debugLog = v;\n  }\n\n}, 3);\nlet PublishedDocumentList;\nmodule.watch(require(\"./published_document_list\"), {\n  default(v) {\n    PublishedDocumentList = v;\n  }\n\n}, 4);\n\nclass Publication {\n  constructor(subscription, options, args) {\n    check(options, {\n      find: Function,\n      children: Match.Optional(Match.OneOf([Object], Function)),\n      collectionName: Match.Optional(String)\n    });\n    this.subscription = subscription;\n    this.options = options;\n    this.args = args || [];\n    this.childrenOptions = options.children || [];\n    this.publishedDocs = new PublishedDocumentList();\n    this.collectionName = options.collectionName;\n  }\n\n  publish() {\n    this.cursor = this._getCursor();\n\n    if (!this.cursor) {\n      return;\n    }\n\n    const collectionName = this._getCollectionName(); // Use Meteor.bindEnvironment to make sure the callbacks are run with the same\n    // environmentVariables as when publishing the \"parent\".\n    // It's only needed when publish is being recursively run.\n\n\n    this.observeHandle = this.cursor.observe({\n      added: Meteor.bindEnvironment(doc => {\n        const alreadyPublished = this.publishedDocs.has(doc._id);\n\n        if (alreadyPublished) {\n          debugLog('Publication.observeHandle.added', `${collectionName}:${doc._id} already published`);\n          this.publishedDocs.unflagForRemoval(doc._id);\n\n          this._republishChildrenOf(doc);\n\n          this.subscription.changed(collectionName, doc._id, doc);\n        } else {\n          this.publishedDocs.add(collectionName, doc._id);\n\n          this._publishChildrenOf(doc);\n\n          this.subscription.added(collectionName, doc);\n        }\n      }),\n      changed: Meteor.bindEnvironment(newDoc => {\n        debugLog('Publication.observeHandle.changed', `${collectionName}:${newDoc._id}`);\n\n        this._republishChildrenOf(newDoc);\n      }),\n      removed: doc => {\n        debugLog('Publication.observeHandle.removed', `${collectionName}:${doc._id}`);\n\n        this._removeDoc(collectionName, doc._id);\n      }\n    });\n    this.observeChangesHandle = this.cursor.observeChanges({\n      changed: (id, fields) => {\n        debugLog('Publication.observeChangesHandle.changed', `${collectionName}:${id}`);\n        this.subscription.changed(collectionName, id, fields);\n      }\n    });\n  }\n\n  unpublish() {\n    debugLog('Publication.unpublish', this._getCollectionName());\n\n    this._stopObservingCursor();\n\n    this._unpublishAllDocuments();\n  }\n\n  _republish() {\n    this._stopObservingCursor();\n\n    this.publishedDocs.flagAllForRemoval();\n    debugLog('Publication._republish', 'run .publish again');\n    this.publish();\n    debugLog('Publication._republish', 'unpublish docs from old cursor');\n\n    this._removeFlaggedDocs();\n  }\n\n  _getCursor() {\n    return this.options.find.apply(this.subscription.meteorSub, this.args);\n  }\n\n  _getCollectionName() {\n    return this.collectionName || this.cursor && this.cursor._getCollectionName();\n  }\n\n  _publishChildrenOf(doc) {\n    const children = _.isFunction(this.childrenOptions) ? this.childrenOptions(doc, ...this.args) : this.childrenOptions;\n\n    _.each(children, function createChildPublication(options) {\n      const pub = new Publication(this.subscription, options, [doc].concat(this.args));\n      this.publishedDocs.addChildPub(doc._id, pub);\n      pub.publish();\n    }, this);\n  }\n\n  _republishChildrenOf(doc) {\n    this.publishedDocs.eachChildPub(doc._id, publication => {\n      publication.args[0] = doc;\n\n      publication._republish();\n    });\n  }\n\n  _unpublishAllDocuments() {\n    this.publishedDocs.eachDocument(doc => {\n      this._removeDoc(doc.collectionName, doc.docId);\n    }, this);\n  }\n\n  _stopObservingCursor() {\n    debugLog('Publication._stopObservingCursor', 'stop observing cursor');\n\n    if (this.observeHandle) {\n      this.observeHandle.stop();\n      delete this.observeHandle;\n    }\n\n    if (this.observeChangesHandle) {\n      this.observeChangesHandle.stop();\n      delete this.observeChangesHandle;\n    }\n  }\n\n  _removeFlaggedDocs() {\n    this.publishedDocs.eachDocument(doc => {\n      if (doc.isFlaggedForRemoval()) {\n        this._removeDoc(doc.collectionName, doc.docId);\n      }\n    }, this);\n  }\n\n  _removeDoc(collectionName, docId) {\n    this.subscription.removed(collectionName, docId);\n\n    this._unpublishChildrenOf(docId);\n\n    this.publishedDocs.remove(docId);\n  }\n\n  _unpublishChildrenOf(docId) {\n    debugLog('Publication._unpublishChildrenOf', `unpublishing children of ${this._getCollectionName()}:${docId}`);\n    this.publishedDocs.eachChildPub(docId, publication => {\n      publication.unpublish();\n    });\n  }\n\n}\n\nmodule.exportDefault(Publication);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"subscription.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/reywood_publish-composite/lib/subscription.js                                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet _;\n\nmodule.watch(require(\"meteor/underscore\"), {\n  _(v) {\n    _ = v;\n  }\n\n}, 0);\nlet DocumentRefCounter;\nmodule.watch(require(\"./doc_ref_counter\"), {\n  default(v) {\n    DocumentRefCounter = v;\n  }\n\n}, 1);\nlet debugLog;\nmodule.watch(require(\"./logging\"), {\n  debugLog(v) {\n    debugLog = v;\n  }\n\n}, 2);\n\nclass Subscription {\n  constructor(meteorSub) {\n    this.meteorSub = meteorSub;\n    this.docHash = {};\n    this.refCounter = new DocumentRefCounter({\n      onChange: (collectionName, docId, refCount) => {\n        debugLog('Subscription.refCounter.onChange', `${collectionName}:${docId.valueOf()} ${refCount}`);\n\n        if (refCount <= 0) {\n          meteorSub.removed(collectionName, docId);\n\n          this._removeDocHash(collectionName, docId);\n        }\n      }\n    });\n  }\n\n  added(collectionName, doc) {\n    this.refCounter.increment(collectionName, doc._id);\n\n    if (this._hasDocChanged(collectionName, doc._id, doc)) {\n      debugLog('Subscription.added', `${collectionName}:${doc._id}`);\n      this.meteorSub.added(collectionName, doc._id, doc);\n\n      this._addDocHash(collectionName, doc);\n    }\n  }\n\n  changed(collectionName, id, changes) {\n    if (this._shouldSendChanges(collectionName, id, changes)) {\n      debugLog('Subscription.changed', `${collectionName}:${id}`);\n      this.meteorSub.changed(collectionName, id, changes);\n\n      this._updateDocHash(collectionName, id, changes);\n    }\n  }\n\n  removed(collectionName, id) {\n    debugLog('Subscription.removed', `${collectionName}:${id.valueOf()}`);\n    this.refCounter.decrement(collectionName, id);\n  }\n\n  _addDocHash(collectionName, doc) {\n    this.docHash[buildHashKey(collectionName, doc._id)] = doc;\n  }\n\n  _updateDocHash(collectionName, id, changes) {\n    const key = buildHashKey(collectionName, id);\n    const existingDoc = this.docHash[key] || {};\n    this.docHash[key] = _.extend(existingDoc, changes);\n  }\n\n  _shouldSendChanges(collectionName, id, changes) {\n    return this._isDocPublished(collectionName, id) && this._hasDocChanged(collectionName, id, changes);\n  }\n\n  _isDocPublished(collectionName, id) {\n    const key = buildHashKey(collectionName, id);\n    return !!this.docHash[key];\n  }\n\n  _hasDocChanged(collectionName, id, doc) {\n    const existingDoc = this.docHash[buildHashKey(collectionName, id)];\n\n    if (!existingDoc) {\n      return true;\n    }\n\n    return _.any(_.keys(doc), key => !_.isEqual(doc[key], existingDoc[key]));\n  }\n\n  _removeDocHash(collectionName, id) {\n    const key = buildHashKey(collectionName, id);\n    delete this.docHash[key];\n  }\n\n}\n\nfunction buildHashKey(collectionName, id) {\n  return `${collectionName}::${id.valueOf()}`;\n}\n\nmodule.exportDefault(Subscription);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"published_document.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/reywood_publish-composite/lib/published_document.js                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nclass PublishedDocument {\n  constructor(collectionName, docId) {\n    this.collectionName = collectionName;\n    this.docId = docId;\n    this.childPublications = [];\n    this._isFlaggedForRemoval = false;\n  }\n\n  addChildPub(childPublication) {\n    this.childPublications.push(childPublication);\n  }\n\n  eachChildPub(callback) {\n    this.childPublications.forEach(callback);\n  }\n\n  isFlaggedForRemoval() {\n    return this._isFlaggedForRemoval;\n  }\n\n  unflagForRemoval() {\n    this._isFlaggedForRemoval = false;\n  }\n\n  flagForRemoval() {\n    this._isFlaggedForRemoval = true;\n  }\n\n}\n\nmodule.exportDefault(PublishedDocument);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"published_document_list.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/reywood_publish-composite/lib/published_document_list.js                                                //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nlet _;\n\nmodule.watch(require(\"meteor/underscore\"), {\n  _(v) {\n    _ = v;\n  }\n\n}, 0);\nlet PublishedDocument;\nmodule.watch(require(\"./published_document\"), {\n  default(v) {\n    PublishedDocument = v;\n  }\n\n}, 1);\n\nclass PublishedDocumentList {\n  constructor() {\n    this.documents = {};\n  }\n\n  add(collectionName, docId) {\n    const key = valueOfId(docId);\n\n    if (!this.documents[key]) {\n      this.documents[key] = new PublishedDocument(collectionName, docId);\n    }\n  }\n\n  addChildPub(docId, publication) {\n    if (!publication) {\n      return;\n    }\n\n    const key = valueOfId(docId);\n    const doc = this.documents[key];\n\n    if (typeof doc === 'undefined') {\n      throw new Error(`Doc not found in list: ${key}`);\n    }\n\n    this.documents[key].addChildPub(publication);\n  }\n\n  get(docId) {\n    const key = valueOfId(docId);\n    return this.documents[key];\n  }\n\n  remove(docId) {\n    const key = valueOfId(docId);\n    delete this.documents[key];\n  }\n\n  has(docId) {\n    return !!this.get(docId);\n  }\n\n  eachDocument(callback, context) {\n    _.each(this.documents, function execCallbackOnDoc(doc) {\n      callback.call(this, doc);\n    }, context || this);\n  }\n\n  eachChildPub(docId, callback) {\n    const doc = this.get(docId);\n\n    if (doc) {\n      doc.eachChildPub(callback);\n    }\n  }\n\n  getIds() {\n    const docIds = [];\n    this.eachDocument(doc => {\n      docIds.push(doc.docId);\n    });\n    return docIds;\n  }\n\n  unflagForRemoval(docId) {\n    const doc = this.get(docId);\n\n    if (doc) {\n      doc.unflagForRemoval();\n    }\n  }\n\n  flagAllForRemoval() {\n    this.eachDocument(doc => {\n      doc.flagForRemoval();\n    });\n  }\n\n}\n\nfunction valueOfId(docId) {\n  if (docId === null) {\n    throw new Error('Document ID is null');\n  }\n\n  if (typeof docId === 'undefined') {\n    throw new Error('Document ID is undefined');\n  }\n\n  return docId.valueOf();\n}\n\nmodule.exportDefault(PublishedDocumentList);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/reywood:publish-composite/lib/publish_composite.js\");\nrequire(\"/node_modules/meteor/reywood:publish-composite/lib/doc_ref_counter.js\");\nrequire(\"/node_modules/meteor/reywood:publish-composite/lib/logging.js\");\nrequire(\"/node_modules/meteor/reywood:publish-composite/lib/publication.js\");\nrequire(\"/node_modules/meteor/reywood:publish-composite/lib/subscription.js\");\n\n/* Exports */\nPackage._define(\"reywood:publish-composite\", exports, {\n  enableDebugLogging: enableDebugLogging,\n  publishComposite: publishComposite\n});\n\n})();\n","servePath":"/packages/reywood_publish-composite.js","sourceMap":{"version":3,"sources":["packages/reywood:publish-composite/lib/publish_composite.js","packages/reywood:publish-composite/lib/doc_ref_counter.js","packages/reywood:publish-composite/lib/logging.js","packages/reywood:publish-composite/lib/publication.js","packages/reywood:publish-composite/lib/subscription.js","packages/reywood:publish-composite/lib/published_document.js","packages/reywood:publish-composite/lib/published_document_list.js"],"names":["module","export","enableDebugLogging","publishComposite","_","watch","require","v","Meteor","Publication","default","Subscription","debugLog","name","options","publish","args","subscription","instanceOptions","prepareOptions","call","publications","forEach","opt","pub","push","onStop","unpublish","ready","preparedOptions","apply","isArray","DocumentRefCounter","constructor","observer","heap","increment","collectionName","docId","key","valueOf","decrement","onChange","exportDefault","debugLoggingEnabled","source","message","paddedSource","length","console","log","Match","check","PublishedDocumentList","find","Function","children","Optional","OneOf","Object","String","childrenOptions","publishedDocs","cursor","_getCursor","_getCollectionName","observeHandle","observe","added","bindEnvironment","doc","alreadyPublished","has","_id","unflagForRemoval","_republishChildrenOf","changed","add","_publishChildrenOf","newDoc","removed","_removeDoc","observeChangesHandle","observeChanges","id","fields","_stopObservingCursor","_unpublishAllDocuments","_republish","flagAllForRemoval","_removeFlaggedDocs","meteorSub","isFunction","each","createChildPublication","concat","addChildPub","eachChildPub","publication","eachDocument","stop","isFlaggedForRemoval","_unpublishChildrenOf","remove","docHash","refCounter","refCount","_removeDocHash","_hasDocChanged","_addDocHash","changes","_shouldSendChanges","_updateDocHash","buildHashKey","existingDoc","extend","_isDocPublished","any","keys","isEqual","PublishedDocument","childPublications","_isFlaggedForRemoval","childPublication","callback","flagForRemoval","documents","valueOfId","Error","get","context","execCallbackOnDoc","getIds","docIds"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,MAAP,CAAc;AAACC,sBAAmB,MAAIA,kBAAxB;AAA2CC,oBAAiB,MAAIA;AAAhE,CAAd;;AAAiG,IAAIC,CAAJ;;AAAMJ,OAAOK,KAAP,CAAaC,QAAQ,mBAAR,CAAb,EAA0C;AAACF,IAAEG,CAAF,EAAI;AAACH,QAAEG,CAAF;AAAI;;AAAV,CAA1C,EAAsD,CAAtD;AAAyD,IAAIC,MAAJ;AAAWR,OAAOK,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACE,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAIE,WAAJ;AAAgBT,OAAOK,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACI,UAAQH,CAAR,EAAU;AAACE,kBAAYF,CAAZ;AAAc;;AAA1B,CAAtC,EAAkE,CAAlE;AAAqE,IAAII,YAAJ;AAAiBX,OAAOK,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAACI,UAAQH,CAAR,EAAU;AAACI,mBAAaJ,CAAb;AAAe;;AAA3B,CAAvC,EAAoE,CAApE;AAAuE,IAAIK,QAAJ,EAAaV,kBAAb;AAAgCF,OAAOK,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACM,WAASL,CAAT,EAAW;AAACK,eAASL,CAAT;AAAW,GAAxB;;AAAyBL,qBAAmBK,CAAnB,EAAqB;AAACL,yBAAmBK,CAAnB;AAAqB;;AAApE,CAAlC,EAAwG,CAAxG;;AAQvb,SAASJ,gBAAT,CAA0BU,IAA1B,EAAgCC,OAAhC,EAAyC;AACrC,SAAON,OAAOO,OAAP,CAAeF,IAAf,EAAqB,SAASE,OAAT,CAAiB,GAAGC,IAApB,EAA0B;AAClD,UAAMC,eAAe,IAAIN,YAAJ,CAAiB,IAAjB,CAArB;AACA,UAAMO,kBAAkBC,eAAeC,IAAf,CAAoB,IAApB,EAA0BN,OAA1B,EAAmCE,IAAnC,CAAxB;AACA,UAAMK,eAAe,EAArB;AAEAH,oBAAgBI,OAAhB,CAAyBC,GAAD,IAAS;AAC7B,YAAMC,MAAM,IAAIf,WAAJ,CAAgBQ,YAAhB,EAA8BM,GAA9B,CAAZ;AACAC,UAAIT,OAAJ;AACAM,mBAAaI,IAAb,CAAkBD,GAAlB;AACH,KAJD;AAMA,SAAKE,MAAL,CAAY,MAAM;AACdL,mBAAaC,OAAb,CAAqBE,OAAOA,IAAIG,SAAJ,EAA5B;AACH,KAFD;AAIAf,aAAS,gBAAT,EAA2B,OAA3B;AACA,SAAKgB,KAAL;AACH,GAjBM,CAAP;AAkBH,C,CAED;;;AACApB,OAAOL,gBAAP,GAA0BA,gBAA1B;;AAEA,SAASgB,cAAT,CAAwBL,OAAxB,EAAiCE,IAAjC,EAAuC;AACnC,MAAIa,kBAAkBf,OAAtB;;AAEA,MAAI,OAAOe,eAAP,KAA2B,UAA/B,EAA2C;AACvCA,sBAAkBA,gBAAgBC,KAAhB,CAAsB,IAAtB,EAA4Bd,IAA5B,CAAlB;AACH;;AAED,MAAI,CAACa,eAAL,EAAsB;AAClB,WAAO,EAAP;AACH;;AAED,MAAI,CAACzB,EAAE2B,OAAF,CAAUF,eAAV,CAAL,EAAiC;AAC7BA,sBAAkB,CAACA,eAAD,CAAlB;AACH;;AAED,SAAOA,eAAP;AACH,C;;;;;;;;;;;AChDD,MAAMG,kBAAN,CAAyB;AACrBC,cAAYC,QAAZ,EAAsB;AAClB,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKD,QAAL,GAAgBA,QAAhB;AACH;;AAEDE,YAAUC,cAAV,EAA0BC,KAA1B,EAAiC;AAC7B,UAAMC,MAAO,GAAEF,cAAe,IAAGC,MAAME,OAAN,EAAgB,EAAjD;;AACA,QAAI,CAAC,KAAKL,IAAL,CAAUI,GAAV,CAAL,EAAqB;AACjB,WAAKJ,IAAL,CAAUI,GAAV,IAAiB,CAAjB;AACH;;AACD,SAAKJ,IAAL,CAAUI,GAAV,KAAkB,CAAlB;AACH;;AAEDE,YAAUJ,cAAV,EAA0BC,KAA1B,EAAiC;AAC7B,UAAMC,MAAO,GAAEF,cAAe,IAAGC,MAAME,OAAN,EAAgB,EAAjD;;AACA,QAAI,KAAKL,IAAL,CAAUI,GAAV,CAAJ,EAAoB;AAChB,WAAKJ,IAAL,CAAUI,GAAV,KAAkB,CAAlB;AAEA,WAAKL,QAAL,CAAcQ,QAAd,CAAuBL,cAAvB,EAAuCC,KAAvC,EAA8C,KAAKH,IAAL,CAAUI,GAAV,CAA9C;AACH;AACJ;;AArBoB;;AAAzBvC,OAAO2C,aAAP,CAwBeX,kBAxBf,E;;;;;;;;;;;ACAAhC,OAAOC,MAAP,CAAc;AAACW,YAAS,MAAIA,QAAd;AAAuBV,sBAAmB,MAAIA;AAA9C,CAAd;;AAAA;AAEA,IAAI0C,sBAAsB,KAA1B;;AAEA,SAAShC,QAAT,CAAkBiC,MAAlB,EAA0BC,OAA1B,EAAmC;AAC/B,MAAI,CAACF,mBAAL,EAA0B;AAAE;AAAS;;AACrC,MAAIG,eAAeF,MAAnB;;AACA,SAAOE,aAAaC,MAAb,GAAsB,EAA7B,EAAiC;AAAED,oBAAgB,GAAhB;AAAsB;;AACzDE,UAAQC,GAAR,CAAa,IAAGH,YAAa,KAAID,OAAQ,EAAzC;AACH;;AAED,SAAS5C,kBAAT,GAA8B;AAC1B0C,wBAAsB,IAAtB;AACH,C;;;;;;;;;;;ACbD,IAAIpC,MAAJ;AAAWR,OAAOK,KAAP,CAAaC,QAAQ,eAAR,CAAb,EAAsC;AAACE,SAAOD,CAAP,EAAS;AAACC,aAAOD,CAAP;AAAS;;AAApB,CAAtC,EAA4D,CAA5D;AAA+D,IAAI4C,KAAJ,EAAUC,KAAV;AAAgBpD,OAAOK,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAAC6C,QAAM5C,CAAN,EAAQ;AAAC4C,YAAM5C,CAAN;AAAQ,GAAlB;;AAAmB6C,QAAM7C,CAAN,EAAQ;AAAC6C,YAAM7C,CAAN;AAAQ;;AAApC,CAArC,EAA2E,CAA3E;;AAA8E,IAAIH,CAAJ;;AAAMJ,OAAOK,KAAP,CAAaC,QAAQ,mBAAR,CAAb,EAA0C;AAACF,IAAEG,CAAF,EAAI;AAACH,QAAEG,CAAF;AAAI;;AAAV,CAA1C,EAAsD,CAAtD;AAAyD,IAAIK,QAAJ;AAAaZ,OAAOK,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACM,WAASL,CAAT,EAAW;AAACK,eAASL,CAAT;AAAW;;AAAxB,CAAlC,EAA4D,CAA5D;AAA+D,IAAI8C,qBAAJ;AAA0BrD,OAAOK,KAAP,CAAaC,QAAQ,2BAAR,CAAb,EAAkD;AAACI,UAAQH,CAAR,EAAU;AAAC8C,4BAAsB9C,CAAtB;AAAwB;;AAApC,CAAlD,EAAwF,CAAxF;;AAQ7U,MAAME,WAAN,CAAkB;AACdwB,cAAYhB,YAAZ,EAA0BH,OAA1B,EAAmCE,IAAnC,EAAyC;AACrCoC,UAAMtC,OAAN,EAAe;AACXwC,YAAMC,QADK;AAEXC,gBAAUL,MAAMM,QAAN,CAAeN,MAAMO,KAAN,CAAY,CAACC,MAAD,CAAZ,EAAsBJ,QAAtB,CAAf,CAFC;AAGXlB,sBAAgBc,MAAMM,QAAN,CAAeG,MAAf;AAHL,KAAf;AAMA,SAAK3C,YAAL,GAAoBA,YAApB;AACA,SAAKH,OAAL,GAAeA,OAAf;AACA,SAAKE,IAAL,GAAYA,QAAQ,EAApB;AACA,SAAK6C,eAAL,GAAuB/C,QAAQ0C,QAAR,IAAoB,EAA3C;AACA,SAAKM,aAAL,GAAqB,IAAIT,qBAAJ,EAArB;AACA,SAAKhB,cAAL,GAAsBvB,QAAQuB,cAA9B;AACH;;AAEDtB,YAAU;AACN,SAAKgD,MAAL,GAAc,KAAKC,UAAL,EAAd;;AACA,QAAI,CAAC,KAAKD,MAAV,EAAkB;AAAE;AAAS;;AAE7B,UAAM1B,iBAAiB,KAAK4B,kBAAL,EAAvB,CAJM,CAMN;AACA;AACA;;;AACA,SAAKC,aAAL,GAAqB,KAAKH,MAAL,CAAYI,OAAZ,CAAoB;AACrCC,aAAO5D,OAAO6D,eAAP,CAAwBC,GAAD,IAAS;AACnC,cAAMC,mBAAmB,KAAKT,aAAL,CAAmBU,GAAnB,CAAuBF,IAAIG,GAA3B,CAAzB;;AAEA,YAAIF,gBAAJ,EAAsB;AAClB3D,mBAAS,iCAAT,EAA6C,GAAEyB,cAAe,IAAGiC,IAAIG,GAAI,oBAAzE;AACA,eAAKX,aAAL,CAAmBY,gBAAnB,CAAoCJ,IAAIG,GAAxC;;AACA,eAAKE,oBAAL,CAA0BL,GAA1B;;AACA,eAAKrD,YAAL,CAAkB2D,OAAlB,CAA0BvC,cAA1B,EAA0CiC,IAAIG,GAA9C,EAAmDH,GAAnD;AACH,SALD,MAKO;AACH,eAAKR,aAAL,CAAmBe,GAAnB,CAAuBxC,cAAvB,EAAuCiC,IAAIG,GAA3C;;AACA,eAAKK,kBAAL,CAAwBR,GAAxB;;AACA,eAAKrD,YAAL,CAAkBmD,KAAlB,CAAwB/B,cAAxB,EAAwCiC,GAAxC;AACH;AACJ,OAbM,CAD8B;AAerCM,eAASpE,OAAO6D,eAAP,CAAwBU,MAAD,IAAY;AACxCnE,iBAAS,mCAAT,EAA+C,GAAEyB,cAAe,IAAG0C,OAAON,GAAI,EAA9E;;AACA,aAAKE,oBAAL,CAA0BI,MAA1B;AACH,OAHQ,CAf4B;AAmBrCC,eAAUV,GAAD,IAAS;AACd1D,iBAAS,mCAAT,EAA+C,GAAEyB,cAAe,IAAGiC,IAAIG,GAAI,EAA3E;;AACA,aAAKQ,UAAL,CAAgB5C,cAAhB,EAAgCiC,IAAIG,GAApC;AACH;AAtBoC,KAApB,CAArB;AAyBA,SAAKS,oBAAL,GAA4B,KAAKnB,MAAL,CAAYoB,cAAZ,CAA2B;AACnDP,eAAS,CAACQ,EAAD,EAAKC,MAAL,KAAgB;AACrBzE,iBAAS,0CAAT,EAAsD,GAAEyB,cAAe,IAAG+C,EAAG,EAA7E;AACA,aAAKnE,YAAL,CAAkB2D,OAAlB,CAA0BvC,cAA1B,EAA0C+C,EAA1C,EAA8CC,MAA9C;AACH;AAJkD,KAA3B,CAA5B;AAMH;;AAED1D,cAAY;AACRf,aAAS,uBAAT,EAAkC,KAAKqD,kBAAL,EAAlC;;AACA,SAAKqB,oBAAL;;AACA,SAAKC,sBAAL;AACH;;AAEDC,eAAa;AACT,SAAKF,oBAAL;;AAEA,SAAKxB,aAAL,CAAmB2B,iBAAnB;AAEA7E,aAAS,wBAAT,EAAmC,oBAAnC;AACA,SAAKG,OAAL;AAEAH,aAAS,wBAAT,EAAmC,gCAAnC;;AACA,SAAK8E,kBAAL;AACH;;AAED1B,eAAa;AACT,WAAO,KAAKlD,OAAL,CAAawC,IAAb,CAAkBxB,KAAlB,CAAwB,KAAKb,YAAL,CAAkB0E,SAA1C,EAAqD,KAAK3E,IAA1D,CAAP;AACH;;AAEDiD,uBAAqB;AACjB,WAAO,KAAK5B,cAAL,IAAwB,KAAK0B,MAAL,IAAe,KAAKA,MAAL,CAAYE,kBAAZ,EAA9C;AACH;;AAEDa,qBAAmBR,GAAnB,EAAwB;AACpB,UAAMd,WAAWpD,EAAEwF,UAAF,CAAa,KAAK/B,eAAlB,IACjB,KAAKA,eAAL,CAAqBS,GAArB,EAA0B,GAAG,KAAKtD,IAAlC,CADiB,GACyB,KAAK6C,eAD/C;;AAEAzD,MAAEyF,IAAF,CAAOrC,QAAP,EAAiB,SAASsC,sBAAT,CAAgChF,OAAhC,EAAyC;AACtD,YAAMU,MAAM,IAAIf,WAAJ,CAAgB,KAAKQ,YAArB,EAAmCH,OAAnC,EAA4C,CAACwD,GAAD,EAAMyB,MAAN,CAAa,KAAK/E,IAAlB,CAA5C,CAAZ;AACA,WAAK8C,aAAL,CAAmBkC,WAAnB,CAA+B1B,IAAIG,GAAnC,EAAwCjD,GAAxC;AACAA,UAAIT,OAAJ;AACH,KAJD,EAIG,IAJH;AAKH;;AAED4D,uBAAqBL,GAArB,EAA0B;AACtB,SAAKR,aAAL,CAAmBmC,YAAnB,CAAgC3B,IAAIG,GAApC,EAA0CyB,WAAD,IAAiB;AACtDA,kBAAYlF,IAAZ,CAAiB,CAAjB,IAAsBsD,GAAtB;;AACA4B,kBAAYV,UAAZ;AACH,KAHD;AAIH;;AAEDD,2BAAyB;AACrB,SAAKzB,aAAL,CAAmBqC,YAAnB,CAAiC7B,GAAD,IAAS;AACrC,WAAKW,UAAL,CAAgBX,IAAIjC,cAApB,EAAoCiC,IAAIhC,KAAxC;AACH,KAFD,EAEG,IAFH;AAGH;;AAEDgD,yBAAuB;AACnB1E,aAAS,kCAAT,EAA6C,uBAA7C;;AAEA,QAAI,KAAKsD,aAAT,EAAwB;AACpB,WAAKA,aAAL,CAAmBkC,IAAnB;AACA,aAAO,KAAKlC,aAAZ;AACH;;AAED,QAAI,KAAKgB,oBAAT,EAA+B;AAC3B,WAAKA,oBAAL,CAA0BkB,IAA1B;AACA,aAAO,KAAKlB,oBAAZ;AACH;AACJ;;AAEDQ,uBAAqB;AACjB,SAAK5B,aAAL,CAAmBqC,YAAnB,CAAiC7B,GAAD,IAAS;AACrC,UAAIA,IAAI+B,mBAAJ,EAAJ,EAA+B;AAC3B,aAAKpB,UAAL,CAAgBX,IAAIjC,cAApB,EAAoCiC,IAAIhC,KAAxC;AACH;AACJ,KAJD,EAIG,IAJH;AAKH;;AAED2C,aAAW5C,cAAX,EAA2BC,KAA3B,EAAkC;AAC9B,SAAKrB,YAAL,CAAkB+D,OAAlB,CAA0B3C,cAA1B,EAA0CC,KAA1C;;AACA,SAAKgE,oBAAL,CAA0BhE,KAA1B;;AACA,SAAKwB,aAAL,CAAmByC,MAAnB,CAA0BjE,KAA1B;AACH;;AAEDgE,uBAAqBhE,KAArB,EAA4B;AACxB1B,aAAS,kCAAT,EAA8C,4BAA2B,KAAKqD,kBAAL,EAA0B,IAAG3B,KAAM,EAA5G;AAEA,SAAKwB,aAAL,CAAmBmC,YAAnB,CAAgC3D,KAAhC,EAAwC4D,WAAD,IAAiB;AACpDA,kBAAYvE,SAAZ;AACH,KAFD;AAGH;;AA7Ia;;AARlB3B,OAAO2C,aAAP,CAwJelC,WAxJf,E;;;;;;;;;;;ACAA,IAAIL,CAAJ;;AAAMJ,OAAOK,KAAP,CAAaC,QAAQ,mBAAR,CAAb,EAA0C;AAACF,IAAEG,CAAF,EAAI;AAACH,QAAEG,CAAF;AAAI;;AAAV,CAA1C,EAAsD,CAAtD;AAAyD,IAAIyB,kBAAJ;AAAuBhC,OAAOK,KAAP,CAAaC,QAAQ,mBAAR,CAAb,EAA0C;AAACI,UAAQH,CAAR,EAAU;AAACyB,yBAAmBzB,CAAnB;AAAqB;;AAAjC,CAA1C,EAA6E,CAA7E;AAAgF,IAAIK,QAAJ;AAAaZ,OAAOK,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACM,WAASL,CAAT,EAAW;AAACK,eAASL,CAAT;AAAW;;AAAxB,CAAlC,EAA4D,CAA5D;;AAMnL,MAAMI,YAAN,CAAmB;AACfsB,cAAY0D,SAAZ,EAAuB;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKa,OAAL,GAAe,EAAf;AACA,SAAKC,UAAL,GAAkB,IAAIzE,kBAAJ,CAAuB;AACrCU,gBAAU,CAACL,cAAD,EAAiBC,KAAjB,EAAwBoE,QAAxB,KAAqC;AAC3C9F,iBAAS,kCAAT,EAA8C,GAAEyB,cAAe,IAAGC,MAAME,OAAN,EAAgB,IAAGkE,QAAS,EAA9F;;AACA,YAAIA,YAAY,CAAhB,EAAmB;AACff,oBAAUX,OAAV,CAAkB3C,cAAlB,EAAkCC,KAAlC;;AACA,eAAKqE,cAAL,CAAoBtE,cAApB,EAAoCC,KAApC;AACH;AACJ;AAPoC,KAAvB,CAAlB;AASH;;AAED8B,QAAM/B,cAAN,EAAsBiC,GAAtB,EAA2B;AACvB,SAAKmC,UAAL,CAAgBrE,SAAhB,CAA0BC,cAA1B,EAA0CiC,IAAIG,GAA9C;;AAEA,QAAI,KAAKmC,cAAL,CAAoBvE,cAApB,EAAoCiC,IAAIG,GAAxC,EAA6CH,GAA7C,CAAJ,EAAuD;AACnD1D,eAAS,oBAAT,EAAgC,GAAEyB,cAAe,IAAGiC,IAAIG,GAAI,EAA5D;AACA,WAAKkB,SAAL,CAAevB,KAAf,CAAqB/B,cAArB,EAAqCiC,IAAIG,GAAzC,EAA8CH,GAA9C;;AACA,WAAKuC,WAAL,CAAiBxE,cAAjB,EAAiCiC,GAAjC;AACH;AACJ;;AAEDM,UAAQvC,cAAR,EAAwB+C,EAAxB,EAA4B0B,OAA5B,EAAqC;AACjC,QAAI,KAAKC,kBAAL,CAAwB1E,cAAxB,EAAwC+C,EAAxC,EAA4C0B,OAA5C,CAAJ,EAA0D;AACtDlG,eAAS,sBAAT,EAAkC,GAAEyB,cAAe,IAAG+C,EAAG,EAAzD;AACA,WAAKO,SAAL,CAAef,OAAf,CAAuBvC,cAAvB,EAAuC+C,EAAvC,EAA2C0B,OAA3C;;AACA,WAAKE,cAAL,CAAoB3E,cAApB,EAAoC+C,EAApC,EAAwC0B,OAAxC;AACH;AACJ;;AAED9B,UAAQ3C,cAAR,EAAwB+C,EAAxB,EAA4B;AACxBxE,aAAS,sBAAT,EAAkC,GAAEyB,cAAe,IAAG+C,GAAG5C,OAAH,EAAa,EAAnE;AACA,SAAKiE,UAAL,CAAgBhE,SAAhB,CAA0BJ,cAA1B,EAA0C+C,EAA1C;AACH;;AAEDyB,cAAYxE,cAAZ,EAA4BiC,GAA5B,EAAiC;AAC7B,SAAKkC,OAAL,CAAaS,aAAa5E,cAAb,EAA6BiC,IAAIG,GAAjC,CAAb,IAAsDH,GAAtD;AACH;;AAED0C,iBAAe3E,cAAf,EAA+B+C,EAA/B,EAAmC0B,OAAnC,EAA4C;AACxC,UAAMvE,MAAM0E,aAAa5E,cAAb,EAA6B+C,EAA7B,CAAZ;AACA,UAAM8B,cAAc,KAAKV,OAAL,CAAajE,GAAb,KAAqB,EAAzC;AACA,SAAKiE,OAAL,CAAajE,GAAb,IAAoBnC,EAAE+G,MAAF,CAASD,WAAT,EAAsBJ,OAAtB,CAApB;AACH;;AAEDC,qBAAmB1E,cAAnB,EAAmC+C,EAAnC,EAAuC0B,OAAvC,EAAgD;AAC5C,WAAO,KAAKM,eAAL,CAAqB/E,cAArB,EAAqC+C,EAArC,KACH,KAAKwB,cAAL,CAAoBvE,cAApB,EAAoC+C,EAApC,EAAwC0B,OAAxC,CADJ;AAEH;;AAEDM,kBAAgB/E,cAAhB,EAAgC+C,EAAhC,EAAoC;AAChC,UAAM7C,MAAM0E,aAAa5E,cAAb,EAA6B+C,EAA7B,CAAZ;AACA,WAAO,CAAC,CAAC,KAAKoB,OAAL,CAAajE,GAAb,CAAT;AACH;;AAEDqE,iBAAevE,cAAf,EAA+B+C,EAA/B,EAAmCd,GAAnC,EAAwC;AACpC,UAAM4C,cAAc,KAAKV,OAAL,CAAaS,aAAa5E,cAAb,EAA6B+C,EAA7B,CAAb,CAApB;;AAEA,QAAI,CAAC8B,WAAL,EAAkB;AAAE,aAAO,IAAP;AAAc;;AAElC,WAAO9G,EAAEiH,GAAF,CAAMjH,EAAEkH,IAAF,CAAOhD,GAAP,CAAN,EAAmB/B,OAAO,CAACnC,EAAEmH,OAAF,CAAUjD,IAAI/B,GAAJ,CAAV,EAAoB2E,YAAY3E,GAAZ,CAApB,CAA3B,CAAP;AACH;;AAEDoE,iBAAetE,cAAf,EAA+B+C,EAA/B,EAAmC;AAC/B,UAAM7C,MAAM0E,aAAa5E,cAAb,EAA6B+C,EAA7B,CAAZ;AACA,WAAO,KAAKoB,OAAL,CAAajE,GAAb,CAAP;AACH;;AArEc;;AAwEnB,SAAS0E,YAAT,CAAsB5E,cAAtB,EAAsC+C,EAAtC,EAA0C;AACtC,SAAQ,GAAE/C,cAAe,KAAI+C,GAAG5C,OAAH,EAAa,EAA1C;AACH;;AAhFDxC,OAAO2C,aAAP,CAkFehC,YAlFf,E;;;;;;;;;;;ACAA,MAAM6G,iBAAN,CAAwB;AACpBvF,cAAYI,cAAZ,EAA4BC,KAA5B,EAAmC;AAC/B,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKmF,iBAAL,GAAyB,EAAzB;AACA,SAAKC,oBAAL,GAA4B,KAA5B;AACH;;AAED1B,cAAY2B,gBAAZ,EAA8B;AAC1B,SAAKF,iBAAL,CAAuBhG,IAAvB,CAA4BkG,gBAA5B;AACH;;AAED1B,eAAa2B,QAAb,EAAuB;AACnB,SAAKH,iBAAL,CAAuBnG,OAAvB,CAA+BsG,QAA/B;AACH;;AAEDvB,wBAAsB;AAClB,WAAO,KAAKqB,oBAAZ;AACH;;AAEDhD,qBAAmB;AACf,SAAKgD,oBAAL,GAA4B,KAA5B;AACH;;AAEDG,mBAAiB;AACb,SAAKH,oBAAL,GAA4B,IAA5B;AACH;;AA1BmB;;AAAxB1H,OAAO2C,aAAP,CA6Be6E,iBA7Bf,E;;;;;;;;;;;ACAA,IAAIpH,CAAJ;;AAAMJ,OAAOK,KAAP,CAAaC,QAAQ,mBAAR,CAAb,EAA0C;AAACF,IAAEG,CAAF,EAAI;AAACH,QAAEG,CAAF;AAAI;;AAAV,CAA1C,EAAsD,CAAtD;AAAyD,IAAIiH,iBAAJ;AAAsBxH,OAAOK,KAAP,CAAaC,QAAQ,sBAAR,CAAb,EAA6C;AAACI,UAAQH,CAAR,EAAU;AAACiH,wBAAkBjH,CAAlB;AAAoB;;AAAhC,CAA7C,EAA+E,CAA/E;;AAKrF,MAAM8C,qBAAN,CAA4B;AACxBpB,gBAAc;AACV,SAAK6F,SAAL,GAAiB,EAAjB;AACH;;AAEDjD,MAAIxC,cAAJ,EAAoBC,KAApB,EAA2B;AACvB,UAAMC,MAAMwF,UAAUzF,KAAV,CAAZ;;AAEA,QAAI,CAAC,KAAKwF,SAAL,CAAevF,GAAf,CAAL,EAA0B;AACtB,WAAKuF,SAAL,CAAevF,GAAf,IAAsB,IAAIiF,iBAAJ,CAAsBnF,cAAtB,EAAsCC,KAAtC,CAAtB;AACH;AACJ;;AAED0D,cAAY1D,KAAZ,EAAmB4D,WAAnB,EAAgC;AAC5B,QAAI,CAACA,WAAL,EAAkB;AAAE;AAAS;;AAE7B,UAAM3D,MAAMwF,UAAUzF,KAAV,CAAZ;AACA,UAAMgC,MAAM,KAAKwD,SAAL,CAAevF,GAAf,CAAZ;;AAEA,QAAI,OAAO+B,GAAP,KAAe,WAAnB,EAAgC;AAC5B,YAAM,IAAI0D,KAAJ,CAAW,0BAAyBzF,GAAI,EAAxC,CAAN;AACH;;AAED,SAAKuF,SAAL,CAAevF,GAAf,EAAoByD,WAApB,CAAgCE,WAAhC;AACH;;AAED+B,MAAI3F,KAAJ,EAAW;AACP,UAAMC,MAAMwF,UAAUzF,KAAV,CAAZ;AACA,WAAO,KAAKwF,SAAL,CAAevF,GAAf,CAAP;AACH;;AAEDgE,SAAOjE,KAAP,EAAc;AACV,UAAMC,MAAMwF,UAAUzF,KAAV,CAAZ;AACA,WAAO,KAAKwF,SAAL,CAAevF,GAAf,CAAP;AACH;;AAEDiC,MAAIlC,KAAJ,EAAW;AACP,WAAO,CAAC,CAAC,KAAK2F,GAAL,CAAS3F,KAAT,CAAT;AACH;;AAED6D,eAAayB,QAAb,EAAuBM,OAAvB,EAAgC;AAC5B9H,MAAEyF,IAAF,CAAO,KAAKiC,SAAZ,EAAuB,SAASK,iBAAT,CAA2B7D,GAA3B,EAAgC;AACnDsD,eAASxG,IAAT,CAAc,IAAd,EAAoBkD,GAApB;AACH,KAFD,EAEG4D,WAAW,IAFd;AAGH;;AAEDjC,eAAa3D,KAAb,EAAoBsF,QAApB,EAA8B;AAC1B,UAAMtD,MAAM,KAAK2D,GAAL,CAAS3F,KAAT,CAAZ;;AAEA,QAAIgC,GAAJ,EAAS;AACLA,UAAI2B,YAAJ,CAAiB2B,QAAjB;AACH;AACJ;;AAEDQ,WAAS;AACL,UAAMC,SAAS,EAAf;AAEA,SAAKlC,YAAL,CAAmB7B,GAAD,IAAS;AACvB+D,aAAO5G,IAAP,CAAY6C,IAAIhC,KAAhB;AACH,KAFD;AAIA,WAAO+F,MAAP;AACH;;AAED3D,mBAAiBpC,KAAjB,EAAwB;AACpB,UAAMgC,MAAM,KAAK2D,GAAL,CAAS3F,KAAT,CAAZ;;AAEA,QAAIgC,GAAJ,EAAS;AACLA,UAAII,gBAAJ;AACH;AACJ;;AAEDe,sBAAoB;AAChB,SAAKU,YAAL,CAAmB7B,GAAD,IAAS;AACvBA,UAAIuD,cAAJ;AACH,KAFD;AAGH;;AA5EuB;;AA+E5B,SAASE,SAAT,CAAmBzF,KAAnB,EAA0B;AACtB,MAAIA,UAAU,IAAd,EAAoB;AAChB,UAAM,IAAI0F,KAAJ,CAAU,qBAAV,CAAN;AACH;;AACD,MAAI,OAAO1F,KAAP,KAAiB,WAArB,EAAkC;AAC9B,UAAM,IAAI0F,KAAJ,CAAU,0BAAV,CAAN;AACH;;AACD,SAAO1F,MAAME,OAAN,EAAP;AACH;;AA5FDxC,OAAO2C,aAAP,CA8FeU,qBA9Ff,E","file":"/packages/reywood_publish-composite.js","sourcesContent":["import { _ } from 'meteor/underscore';\nimport { Meteor } from 'meteor/meteor';\n\nimport Publication from './publication';\nimport Subscription from './subscription';\nimport { debugLog, enableDebugLogging } from './logging';\n\n\nfunction publishComposite(name, options) {\n    return Meteor.publish(name, function publish(...args) {\n        const subscription = new Subscription(this);\n        const instanceOptions = prepareOptions.call(this, options, args);\n        const publications = [];\n\n        instanceOptions.forEach((opt) => {\n            const pub = new Publication(subscription, opt);\n            pub.publish();\n            publications.push(pub);\n        });\n\n        this.onStop(() => {\n            publications.forEach(pub => pub.unpublish());\n        });\n\n        debugLog('Meteor.publish', 'ready');\n        this.ready();\n    });\n}\n\n// For backwards compatibility\nMeteor.publishComposite = publishComposite;\n\nfunction prepareOptions(options, args) {\n    let preparedOptions = options;\n\n    if (typeof preparedOptions === 'function') {\n        preparedOptions = preparedOptions.apply(this, args);\n    }\n\n    if (!preparedOptions) {\n        return [];\n    }\n\n    if (!_.isArray(preparedOptions)) {\n        preparedOptions = [preparedOptions];\n    }\n\n    return preparedOptions;\n}\n\n\nexport {\n    enableDebugLogging,\n    publishComposite,\n};\n","class DocumentRefCounter {\n    constructor(observer) {\n        this.heap = {};\n        this.observer = observer;\n    }\n\n    increment(collectionName, docId) {\n        const key = `${collectionName}:${docId.valueOf()}`;\n        if (!this.heap[key]) {\n            this.heap[key] = 0;\n        }\n        this.heap[key] += 1;\n    }\n\n    decrement(collectionName, docId) {\n        const key = `${collectionName}:${docId.valueOf()}`;\n        if (this.heap[key]) {\n            this.heap[key] -= 1;\n\n            this.observer.onChange(collectionName, docId, this.heap[key]);\n        }\n    }\n}\n\nexport default DocumentRefCounter;\n","/* eslint-disable no-console */\n\nlet debugLoggingEnabled = false;\n\nfunction debugLog(source, message) {\n    if (!debugLoggingEnabled) { return; }\n    let paddedSource = source;\n    while (paddedSource.length < 35) { paddedSource += ' '; }\n    console.log(`[${paddedSource}] ${message}`);\n}\n\nfunction enableDebugLogging() {\n    debugLoggingEnabled = true;\n}\n\nexport {\n    debugLog,\n    enableDebugLogging,\n};\n","import { Meteor } from 'meteor/meteor';\nimport { Match, check } from 'meteor/check';\nimport { _ } from 'meteor/underscore';\n\nimport { debugLog } from './logging';\nimport PublishedDocumentList from './published_document_list';\n\n\nclass Publication {\n    constructor(subscription, options, args) {\n        check(options, {\n            find: Function,\n            children: Match.Optional(Match.OneOf([Object], Function)),\n            collectionName: Match.Optional(String),\n        });\n\n        this.subscription = subscription;\n        this.options = options;\n        this.args = args || [];\n        this.childrenOptions = options.children || [];\n        this.publishedDocs = new PublishedDocumentList();\n        this.collectionName = options.collectionName;\n    }\n\n    publish() {\n        this.cursor = this._getCursor();\n        if (!this.cursor) { return; }\n\n        const collectionName = this._getCollectionName();\n\n        // Use Meteor.bindEnvironment to make sure the callbacks are run with the same\n        // environmentVariables as when publishing the \"parent\".\n        // It's only needed when publish is being recursively run.\n        this.observeHandle = this.cursor.observe({\n            added: Meteor.bindEnvironment((doc) => {\n                const alreadyPublished = this.publishedDocs.has(doc._id);\n\n                if (alreadyPublished) {\n                    debugLog('Publication.observeHandle.added', `${collectionName}:${doc._id} already published`);\n                    this.publishedDocs.unflagForRemoval(doc._id);\n                    this._republishChildrenOf(doc);\n                    this.subscription.changed(collectionName, doc._id, doc);\n                } else {\n                    this.publishedDocs.add(collectionName, doc._id);\n                    this._publishChildrenOf(doc);\n                    this.subscription.added(collectionName, doc);\n                }\n            }),\n            changed: Meteor.bindEnvironment((newDoc) => {\n                debugLog('Publication.observeHandle.changed', `${collectionName}:${newDoc._id}`);\n                this._republishChildrenOf(newDoc);\n            }),\n            removed: (doc) => {\n                debugLog('Publication.observeHandle.removed', `${collectionName}:${doc._id}`);\n                this._removeDoc(collectionName, doc._id);\n            },\n        });\n\n        this.observeChangesHandle = this.cursor.observeChanges({\n            changed: (id, fields) => {\n                debugLog('Publication.observeChangesHandle.changed', `${collectionName}:${id}`);\n                this.subscription.changed(collectionName, id, fields);\n            },\n        });\n    }\n\n    unpublish() {\n        debugLog('Publication.unpublish', this._getCollectionName());\n        this._stopObservingCursor();\n        this._unpublishAllDocuments();\n    }\n\n    _republish() {\n        this._stopObservingCursor();\n\n        this.publishedDocs.flagAllForRemoval();\n\n        debugLog('Publication._republish', 'run .publish again');\n        this.publish();\n\n        debugLog('Publication._republish', 'unpublish docs from old cursor');\n        this._removeFlaggedDocs();\n    }\n\n    _getCursor() {\n        return this.options.find.apply(this.subscription.meteorSub, this.args);\n    }\n\n    _getCollectionName() {\n        return this.collectionName || (this.cursor && this.cursor._getCollectionName());\n    }\n\n    _publishChildrenOf(doc) {\n        const children = _.isFunction(this.childrenOptions) ?\n        this.childrenOptions(doc, ...this.args) : this.childrenOptions;\n        _.each(children, function createChildPublication(options) {\n            const pub = new Publication(this.subscription, options, [doc].concat(this.args));\n            this.publishedDocs.addChildPub(doc._id, pub);\n            pub.publish();\n        }, this);\n    }\n\n    _republishChildrenOf(doc) {\n        this.publishedDocs.eachChildPub(doc._id, (publication) => {\n            publication.args[0] = doc;\n            publication._republish();\n        });\n    }\n\n    _unpublishAllDocuments() {\n        this.publishedDocs.eachDocument((doc) => {\n            this._removeDoc(doc.collectionName, doc.docId);\n        }, this);\n    }\n\n    _stopObservingCursor() {\n        debugLog('Publication._stopObservingCursor', 'stop observing cursor');\n\n        if (this.observeHandle) {\n            this.observeHandle.stop();\n            delete this.observeHandle;\n        }\n\n        if (this.observeChangesHandle) {\n            this.observeChangesHandle.stop();\n            delete this.observeChangesHandle;\n        }\n    }\n\n    _removeFlaggedDocs() {\n        this.publishedDocs.eachDocument((doc) => {\n            if (doc.isFlaggedForRemoval()) {\n                this._removeDoc(doc.collectionName, doc.docId);\n            }\n        }, this);\n    }\n\n    _removeDoc(collectionName, docId) {\n        this.subscription.removed(collectionName, docId);\n        this._unpublishChildrenOf(docId);\n        this.publishedDocs.remove(docId);\n    }\n\n    _unpublishChildrenOf(docId) {\n        debugLog('Publication._unpublishChildrenOf', `unpublishing children of ${this._getCollectionName()}:${docId}`);\n\n        this.publishedDocs.eachChildPub(docId, (publication) => {\n            publication.unpublish();\n        });\n    }\n}\n\nexport default Publication;\n","import { _ } from 'meteor/underscore';\n\nimport DocumentRefCounter from './doc_ref_counter';\nimport { debugLog } from './logging';\n\n\nclass Subscription {\n    constructor(meteorSub) {\n        this.meteorSub = meteorSub;\n        this.docHash = {};\n        this.refCounter = new DocumentRefCounter({\n            onChange: (collectionName, docId, refCount) => {\n                debugLog('Subscription.refCounter.onChange', `${collectionName}:${docId.valueOf()} ${refCount}`);\n                if (refCount <= 0) {\n                    meteorSub.removed(collectionName, docId);\n                    this._removeDocHash(collectionName, docId);\n                }\n            },\n        });\n    }\n\n    added(collectionName, doc) {\n        this.refCounter.increment(collectionName, doc._id);\n\n        if (this._hasDocChanged(collectionName, doc._id, doc)) {\n            debugLog('Subscription.added', `${collectionName}:${doc._id}`);\n            this.meteorSub.added(collectionName, doc._id, doc);\n            this._addDocHash(collectionName, doc);\n        }\n    }\n\n    changed(collectionName, id, changes) {\n        if (this._shouldSendChanges(collectionName, id, changes)) {\n            debugLog('Subscription.changed', `${collectionName}:${id}`);\n            this.meteorSub.changed(collectionName, id, changes);\n            this._updateDocHash(collectionName, id, changes);\n        }\n    }\n\n    removed(collectionName, id) {\n        debugLog('Subscription.removed', `${collectionName}:${id.valueOf()}`);\n        this.refCounter.decrement(collectionName, id);\n    }\n\n    _addDocHash(collectionName, doc) {\n        this.docHash[buildHashKey(collectionName, doc._id)] = doc;\n    }\n\n    _updateDocHash(collectionName, id, changes) {\n        const key = buildHashKey(collectionName, id);\n        const existingDoc = this.docHash[key] || {};\n        this.docHash[key] = _.extend(existingDoc, changes);\n    }\n\n    _shouldSendChanges(collectionName, id, changes) {\n        return this._isDocPublished(collectionName, id) &&\n            this._hasDocChanged(collectionName, id, changes);\n    }\n\n    _isDocPublished(collectionName, id) {\n        const key = buildHashKey(collectionName, id);\n        return !!this.docHash[key];\n    }\n\n    _hasDocChanged(collectionName, id, doc) {\n        const existingDoc = this.docHash[buildHashKey(collectionName, id)];\n\n        if (!existingDoc) { return true; }\n\n        return _.any(_.keys(doc), key => !_.isEqual(doc[key], existingDoc[key]));\n    }\n\n    _removeDocHash(collectionName, id) {\n        const key = buildHashKey(collectionName, id);\n        delete this.docHash[key];\n    }\n}\n\nfunction buildHashKey(collectionName, id) {\n    return `${collectionName}::${id.valueOf()}`;\n}\n\nexport default Subscription;\n","class PublishedDocument {\n    constructor(collectionName, docId) {\n        this.collectionName = collectionName;\n        this.docId = docId;\n        this.childPublications = [];\n        this._isFlaggedForRemoval = false;\n    }\n\n    addChildPub(childPublication) {\n        this.childPublications.push(childPublication);\n    }\n\n    eachChildPub(callback) {\n        this.childPublications.forEach(callback);\n    }\n\n    isFlaggedForRemoval() {\n        return this._isFlaggedForRemoval;\n    }\n\n    unflagForRemoval() {\n        this._isFlaggedForRemoval = false;\n    }\n\n    flagForRemoval() {\n        this._isFlaggedForRemoval = true;\n    }\n}\n\nexport default PublishedDocument;\n","import { _ } from 'meteor/underscore';\n\nimport PublishedDocument from './published_document';\n\n\nclass PublishedDocumentList {\n    constructor() {\n        this.documents = {};\n    }\n\n    add(collectionName, docId) {\n        const key = valueOfId(docId);\n\n        if (!this.documents[key]) {\n            this.documents[key] = new PublishedDocument(collectionName, docId);\n        }\n    }\n\n    addChildPub(docId, publication) {\n        if (!publication) { return; }\n\n        const key = valueOfId(docId);\n        const doc = this.documents[key];\n\n        if (typeof doc === 'undefined') {\n            throw new Error(`Doc not found in list: ${key}`);\n        }\n\n        this.documents[key].addChildPub(publication);\n    }\n\n    get(docId) {\n        const key = valueOfId(docId);\n        return this.documents[key];\n    }\n\n    remove(docId) {\n        const key = valueOfId(docId);\n        delete this.documents[key];\n    }\n\n    has(docId) {\n        return !!this.get(docId);\n    }\n\n    eachDocument(callback, context) {\n        _.each(this.documents, function execCallbackOnDoc(doc) {\n            callback.call(this, doc);\n        }, context || this);\n    }\n\n    eachChildPub(docId, callback) {\n        const doc = this.get(docId);\n\n        if (doc) {\n            doc.eachChildPub(callback);\n        }\n    }\n\n    getIds() {\n        const docIds = [];\n\n        this.eachDocument((doc) => {\n            docIds.push(doc.docId);\n        });\n\n        return docIds;\n    }\n\n    unflagForRemoval(docId) {\n        const doc = this.get(docId);\n\n        if (doc) {\n            doc.unflagForRemoval();\n        }\n    }\n\n    flagAllForRemoval() {\n        this.eachDocument((doc) => {\n            doc.flagForRemoval();\n        });\n    }\n}\n\nfunction valueOfId(docId) {\n    if (docId === null) {\n        throw new Error('Document ID is null');\n    }\n    if (typeof docId === 'undefined') {\n        throw new Error('Document ID is undefined');\n    }\n    return docId.valueOf();\n}\n\nexport default PublishedDocumentList;\n"]}}]