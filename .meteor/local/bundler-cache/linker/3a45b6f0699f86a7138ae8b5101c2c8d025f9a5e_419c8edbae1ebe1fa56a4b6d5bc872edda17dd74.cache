[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar CryptoJS = Package['jparker:crypto-core'].CryptoJS;\n\n/* Package-scope variables */\nvar Gravatar;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// packages/jparker_gravatar/gravatar.js                                        //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\n/* global CryptoJS, _ */\n\nGravatar = { // eslint-disable-line no-undef\n  /**\n   * `cleantString` remove starting and trailing whitespaces\n   * and lowercase the input\n   * @param  {String} string input string that may contain leading and trailing\n   * whitespaces and uppercase letters\n   * @return {String}        output cleaned string\n   */\n  cleanString: function (string) {\n    return string.trim().toLowerCase()\n  },\n\n  /**\n   * `isHash` check if a string match the MD5 form :\n   * 32 chars string containing letters from `a` to `f`\n   * and digits from `0` to `9`\n   * @param  {String}  string that might be a hash\n   * @return {Boolean}\n   */\n  isHash: function (string) {\n    var self = this\n    return /^[a-f0-9]{32}$/i.test(self.cleanString(string))\n  },\n\n  /**\n   * `hash` takes an input and run it through `CryptoJS.MD5`\n   * @see https://atmospherejs.com/jparker/crypto-md5\n   * @param  {String} string input string\n   * @return {String}        md5 hash of the input\n   */\n  hash: function (string) {\n    var self = this\n    return CryptoJS.MD5(self.cleanString(string)).toString()\n  },\n\n  /**\n   * `imageUrl` will provide the url for the avatar, given an email or a hash\n   * and a set of options to be passed to the gravatar API\n   * @see https://en.gravatar.com/site/implement/images/\n   * @param  {String} emailOrHash email or pregenerated MD5 hash to query\n   * gravatar with.\n   * @param  {Object} options     options to be passed to gravatar in the query\n   * string. The `secure` will be used to determine which base url to use.\n   * @return {String}             complete url to the avatar\n   */\n  imageUrl: function (emailOrHash, options) {\n    var self = this\n    options = options || {}\n\n    // Want HTTPS ?\n    var url = options.secure\n    ? 'https://secure.gravatar.com/avatar/'\n    : 'http://www.gravatar.com/avatar/'\n    delete options.secure\n\n    // Is it an MD5 already ?\n    url += self.isHash(emailOrHash)\n    ? emailOrHash\n    : self.hash(emailOrHash)\n\n    // Have any options to pass ?\n    var params = _.map(options, function (val, key) {\n      return key + '=' + encodeURIComponent(val)\n    }).join('&')\n\n    return (params.length > 0)\n    ? url + '?' + params\n    : url\n  }\n}\n\n//////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"jparker:gravatar\", {\n  Gravatar: Gravatar\n});\n\n})();\n","servePath":"/packages/jparker_gravatar.js"}]