[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"jagi:astronomy-timestamp-behavior\":{\"lib\":{\"main.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////\n//                                                                    //\n// packages/jagi_astronomy-timestamp-behavior/lib/main.js             //\n//                                                                    //\n////////////////////////////////////////////////////////////////////////\n                                                                      //\nmodule.watch(require(\"./behavior/behavior.js\"));\n////////////////////////////////////////////////////////////////////////\n\n},\"behavior\":{\"behavior.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////\n//                                                                    //\n// packages/jagi_astronomy-timestamp-behavior/lib/behavior/behavior.j //\n//                                                                    //\n////////////////////////////////////////////////////////////////////////\n                                                                      //\nvar Behavior;\nmodule.watch(require(\"meteor/jagi:astronomy\"), {\n  Behavior: function (v) {\n    Behavior = v;\n  }\n}, 0);\nBehavior.create({\n  name: 'timestamp',\n  options: {\n    hasCreatedField: true,\n    createdFieldName: 'createdAt',\n    hasUpdatedField: true,\n    updatedFieldName: 'updatedAt'\n  },\n  createClassDefinition: function () {\n    var _this = this;\n\n    var definition = {\n      fields: {},\n      events: {\n        beforeInsert: function (e) {\n          var doc = e.currentTarget;\n          var Class = doc.constructor;\n\n          _this.setCreationDate(doc);\n        },\n        beforeUpdate: function (e) {\n          var doc = e.currentTarget;\n          var Class = doc.constructor;\n\n          _this.setModificationDate(doc);\n        }\n      }\n    };\n\n    if (this.options.hasCreatedField) {\n      // Add a field for storing a creation date.\n      definition.fields[this.options.createdFieldName] = {\n        type: Date,\n        immutable: true,\n        optional: true\n      };\n    }\n\n    if (this.options.hasUpdatedField) {\n      // Add a field for storing an update date.\n      definition.fields[this.options.updatedFieldName] = {\n        type: Date,\n        optional: true\n      };\n    }\n\n    return definition;\n  },\n  apply: function (Class) {\n    Class.extend(this.createClassDefinition(), ['fields', 'events']);\n  },\n  setCreationDate: function (doc) {\n    // Get current date.\n    var date = new Date(); // If the \"hasCreatedField\" option is set.\n\n    if (this.options.hasCreatedField) {\n      // Set value for created field.\n      doc[this.options.createdFieldName] = date;\n    }\n\n    if (this.options.hasUpdatedField) {\n      // Set value for the \"updatedAt\" field.\n      doc[this.options.updatedFieldName] = date;\n    }\n  },\n  setModificationDate: function (doc) {\n    // Get current date.\n    var date = new Date(); // If the \"hasUpdatedField\" option is set.\n\n    if (this.options.hasUpdatedField) {\n      // Set value for the \"updatedAt\" field.\n      doc[this.options.updatedFieldName] = date;\n    }\n  }\n});\n////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/jagi:astronomy-timestamp-behavior/lib/main.js\");\n\n/* Exports */\nPackage._define(\"jagi:astronomy-timestamp-behavior\", exports);\n\n})();\n","servePath":"/packages/jagi_astronomy-timestamp-behavior.js","sourceMap":{"version":3,"sources":["packages/jagi:astronomy-timestamp-behavior/lib/main.js","packages/jagi:astronomy-timestamp-behavior/lib/behavior/behavior.js"],"names":["module","watch","require","Behavior","v","create","name","options","hasCreatedField","createdFieldName","hasUpdatedField","updatedFieldName","createClassDefinition","definition","fields","events","beforeInsert","e","doc","currentTarget","Class","constructor","setCreationDate","beforeUpdate","setModificationDate","type","Date","immutable","optional","apply","extend","date"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAA,OAAOC,KAAP,CAAaC,QAAQ,wBAAR,CAAb,E;;;;;;;;;;;ACAA,IAAIC,QAAJ;AAAaH,OAAOC,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACC,UAAD,YAAUC,CAAV,EAAY;AAACD,eAASC,CAAT;AAAW;AAAxB,CAA9C,EAAwE,CAAxE;AAEbD,SAASE,MAAT,CAAgB;AACdC,QAAM,WADQ;AAEdC,WAAS;AACPC,qBAAiB,IADV;AAEPC,sBAAkB,WAFX;AAGPC,qBAAiB,IAHV;AAIPC,sBAAkB;AAJX,GAFK;AAQdC,yBAAuB,YAAW;AAAA;;AAChC,QAAMC,aAAa;AACjBC,cAAQ,EADS;AAEjBC,cAAQ;AACNC,sBAAc,UAACC,CAAD,EAAO;AACnB,cAAIC,MAAMD,EAAEE,aAAZ;AACA,cAAIC,QAAQF,IAAIG,WAAhB;;AACA,gBAAKC,eAAL,CAAqBJ,GAArB;AACD,SALK;AAMNK,sBAAc,UAACN,CAAD,EAAO;AACnB,cAAIC,MAAMD,EAAEE,aAAZ;AACA,cAAIC,QAAQF,IAAIG,WAAhB;;AACA,gBAAKG,mBAAL,CAAyBN,GAAzB;AACD;AAVK;AAFS,KAAnB;;AAgBA,QAAI,KAAKX,OAAL,CAAaC,eAAjB,EAAkC;AAChC;AACAK,iBAAWC,MAAX,CAAkB,KAAKP,OAAL,CAAaE,gBAA/B,IAAmD;AACjDgB,cAAMC,IAD2C;AAEjDC,mBAAW,IAFsC;AAGjDC,kBAAU;AAHuC,OAAnD;AAKD;;AAED,QAAI,KAAKrB,OAAL,CAAaG,eAAjB,EAAkC;AAChC;AACAG,iBAAWC,MAAX,CAAkB,KAAKP,OAAL,CAAaI,gBAA/B,IAAmD;AACjDc,cAAMC,IAD2C;AAEjDE,kBAAU;AAFuC,OAAnD;AAID;;AAED,WAAOf,UAAP;AACD,GA3Ca;AA4CdgB,SAAO,UAAST,KAAT,EAAgB;AACrBA,UAAMU,MAAN,CAAa,KAAKlB,qBAAL,EAAb,EAA2C,CAAC,QAAD,EAAW,QAAX,CAA3C;AACD,GA9Ca;AA+CdU,mBAAiB,UAASJ,GAAT,EAAc;AAC7B;AACA,QAAMa,OAAO,IAAIL,IAAJ,EAAb,CAF6B,CAI7B;;AACA,QAAI,KAAKnB,OAAL,CAAaC,eAAjB,EAAkC;AAChC;AACAU,UAAI,KAAKX,OAAL,CAAaE,gBAAjB,IAAqCsB,IAArC;AACD;;AAED,QAAI,KAAKxB,OAAL,CAAaG,eAAjB,EAAkC;AAChC;AACAQ,UAAI,KAAKX,OAAL,CAAaI,gBAAjB,IAAqCoB,IAArC;AACD;AACF,GA7Da;AA8DdP,uBAAqB,UAASN,GAAT,EAAc;AACjC;AACA,QAAMa,OAAO,IAAIL,IAAJ,EAAb,CAFiC,CAIjC;;AACA,QAAI,KAAKnB,OAAL,CAAaG,eAAjB,EAAkC;AAChC;AACAQ,UAAI,KAAKX,OAAL,CAAaI,gBAAjB,IAAqCoB,IAArC;AACD;AACF;AAvEa,CAAhB,E","file":"/packages/jagi_astronomy-timestamp-behavior.js","sourcesContent":["import './behavior/behavior.js';","import { Behavior } from 'meteor/jagi:astronomy';\n\nBehavior.create({\n  name: 'timestamp',\n  options: {\n    hasCreatedField: true,\n    createdFieldName: 'createdAt',\n    hasUpdatedField: true,\n    updatedFieldName: 'updatedAt'\n  },\n  createClassDefinition: function() {\n    const definition = {\n      fields: {},\n      events: {\n        beforeInsert: (e) => {\n          var doc = e.currentTarget;\n          var Class = doc.constructor;\n          this.setCreationDate(doc);\n        },\n        beforeUpdate: (e) => {\n          var doc = e.currentTarget;\n          var Class = doc.constructor;\n          this.setModificationDate(doc);\n        }\n      }\n    };\n\n    if (this.options.hasCreatedField) {\n      // Add a field for storing a creation date.\n      definition.fields[this.options.createdFieldName] = {\n        type: Date,\n        immutable: true,\n        optional: true\n      };\n    }\n\n    if (this.options.hasUpdatedField) {\n      // Add a field for storing an update date.\n      definition.fields[this.options.updatedFieldName] = {\n        type: Date,\n        optional: true\n      };\n    }\n\n    return definition;\n  },\n  apply: function(Class) {\n    Class.extend(this.createClassDefinition(), ['fields', 'events']);\n  },\n  setCreationDate: function(doc) {\n    // Get current date.\n    const date = new Date();\n\n    // If the \"hasCreatedField\" option is set.\n    if (this.options.hasCreatedField) {\n      // Set value for created field.\n      doc[this.options.createdFieldName] = date;\n    }\n\n    if (this.options.hasUpdatedField) {\n      // Set value for the \"updatedAt\" field.\n      doc[this.options.updatedFieldName] = date;\n    }\n  },\n  setModificationDate: function(doc) {\n    // Get current date.\n    const date = new Date();\n\n    // If the \"hasUpdatedField\" option is set.\n    if (this.options.hasUpdatedField) {\n      // Set value for the \"updatedAt\" field.\n      doc[this.options.updatedFieldName] = date;\n    }\n  }\n});"]}}]