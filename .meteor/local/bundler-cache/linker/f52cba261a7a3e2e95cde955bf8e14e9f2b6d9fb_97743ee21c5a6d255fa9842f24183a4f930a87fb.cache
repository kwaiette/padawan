[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"jagi:astronomy-softremove-behavior\":{\"lib\":{\"main.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/main.js                                                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.watch(require(\"./behavior/behavior.js\"));\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"behavior\":{\"behavior.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/behavior/behavior.js                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar module1 = module;\n\nvar _bind;\n\nmodule1.watch(require(\"lodash/bind\"), {\n  \"default\": function (v) {\n    _bind = v;\n  }\n}, 0);\n\nvar _forEach;\n\nmodule1.watch(require(\"lodash/forEach\"), {\n  \"default\": function (v) {\n    _forEach = v;\n  }\n}, 1);\n\nvar _zipObject;\n\nmodule1.watch(require(\"lodash/zipObject\"), {\n  \"default\": function (v) {\n    _zipObject = v;\n  }\n}, 2);\nvar Module, Behavior, Event;\nmodule1.watch(require(\"meteor/jagi:astronomy\"), {\n  Module: function (v) {\n    Module = v;\n  },\n  Behavior: function (v) {\n    Behavior = v;\n  },\n  Event: function (v) {\n    Event = v;\n  }\n}, 3);\nvar beforeFind;\nmodule1.watch(require(\"../class_events/beforeFind\"), {\n  \"default\": function (v) {\n    beforeFind = v;\n  }\n}, 4);\nvar softRemove;\nmodule1.watch(require(\"../class_prototype_methods/softRemove\"), {\n  \"default\": function (v) {\n    softRemove = v;\n  }\n}, 5);\nvar softRestore;\nmodule1.watch(require(\"../class_prototype_methods/softRestore\"), {\n  \"default\": function (v) {\n    softRestore = v;\n  }\n}, 6);\nvar meteorSoftRemove;\nmodule1.watch(require(\"../meteor_methods/softRemove\"), {\n  \"default\": function (v) {\n    meteorSoftRemove = v;\n  }\n}, 7);\nvar meteorSoftRestore;\nmodule1.watch(require(\"../meteor_methods/softRestore\"), {\n  \"default\": function (v) {\n    meteorSoftRestore = v;\n  }\n}, 8);\nvar hasMeteorMethod = Module.modules.storage.utils.hasMeteorMethod;\nBehavior.create({\n  name: \"softremove\",\n  options: {\n    removedFieldName: \"removed\",\n    hasRemovedAtField: true,\n    removedAtFieldName: \"removedAt\"\n  },\n  createClassDefinition: function () {\n    var behavior = this;\n    var definition = {\n      fields: {},\n      events: {\n        beforeFind: _bind(beforeFind, behavior)\n      },\n      // Fix for Astronomy 2.2.4 where I've changed name of the \"methods\" module\n      // to \"helpers\" module. I shouldn't do that even when changing property\n      // name in schema.\n      helpers: {\n        softRemove: softRemove,\n        softRestore: softRestore\n      }\n    }; // Add a field storing a removal flag.\n\n    definition.fields[behavior.options.removedFieldName] = {\n      type: Boolean,\n      \"default\": false\n    };\n\n    if (behavior.options.hasRemovedAtField) {\n      // Add a field storing a removal date.\n      definition.fields[behavior.options.removedAtFieldName] = {\n        type: Date,\n        optional: true\n      };\n    }\n\n    return definition;\n  },\n  apply: function (Class) {\n    var Collection = Class.getCollection(); // If it's a remote collection then we register methods on the connection\n    // object of the collection.\n\n    var connection = Collection._connection;\n\n    if (connection) {\n      // Prepare meteor methods to be added.\n      var meteorMethods = {\n        \"/Astronomy/softRemove\": meteorSoftRemove,\n        \"/Astronomy/softRestore\": meteorSoftRestore\n      };\n\n      _forEach(meteorMethods, function (meteorMethod, methodName) {\n        if (!hasMeteorMethod(connection, methodName)) {\n          // Add meteor method.\n          connection.methods(_zipObject([methodName], [meteorMethod]));\n        }\n      });\n    }\n\n    Class.extend(this.createClassDefinition(), [\"fields\", \"events\", \"helpers\", \"methods\"]);\n  }\n});\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"class_events\":{\"beforeFind.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/class_events/beforeFind.js                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar beforeFind = function (e) {\n  var doc = e.currentTarget;\n  var Class = doc.constructor;\n  var selector = e.selector;\n  selector[this.options.removedFieldName] = {\n    $ne: true\n  };\n};\n\nmodule.exportDefault(beforeFind);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"class_prototype_methods\":{\"softRemove.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/class_prototype_methods/softRemove.js                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match: function (v) {\n    Match = v;\n  }\n}, 0);\nvar Module;\nmodule.watch(require(\"meteor/jagi:astronomy\"), {\n  Module: function (v) {\n    Module = v;\n  }\n}, 1);\nvar documentSoftRemove;\nmodule.watch(require(\"../utils/documentSoftRemove\"), {\n  \"default\": function (v) {\n    documentSoftRemove = v;\n  }\n}, 2);\nvar isRemote = Module.modules.storage.utils.isRemote;\nvar callMeteorMethod = Module.modules.storage.utils.callMeteorMethod;\n\nvar softRemove = function () {\n  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var callback = arguments.length > 1 ? arguments[1] : undefined;\n  var doc = this;\n  var Class = doc.constructor; // If the first argument is callback function then reassign values.\n\n  if (arguments.length === 1 && Match.test(args, Function)) {\n    callback = args;\n    args = {};\n  } // Get variables from the first argument.\n\n\n  var _args = args,\n      _args$simulation = _args.simulation,\n      simulation = _args$simulation === void 0 ? true : _args$simulation; // If we are dealing with a remote collection and we are not on the server.\n\n  if (isRemote(Class)) {\n    // Prepare meteor method name to be called.\n    var methodName = \"/Astronomy/softRemove\"; // Prepare arguments for the meteor method.\n\n    var methodArgs = {\n      className: Class.getName(),\n      selector: {\n        _id: doc._id\n      },\n      simulation: simulation\n    };\n\n    try {\n      // Run meteor method.\n      var result = callMeteorMethod(Class, methodName, [methodArgs], callback); // Return result of the meteor method call.\n\n      return result;\n    } catch (err) {\n      // Catch stub exceptions.\n      if (callback) {\n        callback(err);\n        return null;\n      }\n\n      throw err;\n    }\n  } // If we can just remove a document without calling the meteor method. We may\n  // be on the server or the collection may be local.\n\n\n  try {\n    // Prepare arguments.\n    var _methodArgs = {\n      doc: doc,\n      simulation: simulation,\n      trusted: true\n    };\n\n    var _result = documentSoftRemove(_methodArgs);\n\n    if (callback) {\n      callback(undefined, _result);\n    }\n\n    return _result;\n  } catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n\n    throw err;\n  }\n};\n\nmodule.exportDefault(softRemove);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"softRestore.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/class_prototype_methods/softRestore.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Match;\nmodule.watch(require(\"meteor/check\"), {\n  Match: function (v) {\n    Match = v;\n  }\n}, 0);\nvar Module;\nmodule.watch(require(\"meteor/jagi:astronomy\"), {\n  Module: function (v) {\n    Module = v;\n  }\n}, 1);\nvar documentSoftRestore;\nmodule.watch(require(\"../utils/documentSoftRestore\"), {\n  \"default\": function (v) {\n    documentSoftRestore = v;\n  }\n}, 2);\nvar isRemote = Module.modules.storage.utils.isRemote;\nvar callMeteorMethod = Module.modules.storage.utils.callMeteorMethod;\n\nvar softRestore = function () {\n  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var callback = arguments.length > 1 ? arguments[1] : undefined;\n  var doc = this;\n  var Class = doc.constructor; // If the first argument is callback function then reassign values.\n\n  if (arguments.length === 1 && Match.test(args, Function)) {\n    callback = args;\n    args = {};\n  } // Get variables from the first argument.\n\n\n  var _args = args,\n      _args$simulation = _args.simulation,\n      simulation = _args$simulation === void 0 ? true : _args$simulation; // If we are dealing with a remote collection and we are not on the server.\n\n  if (isRemote(Class)) {\n    // Prepare meteor method name to be called.\n    var methodName = \"/Astronomy/softRestore\"; // Prepare arguments for the meteor method.\n\n    var methodArgs = {\n      className: Class.getName(),\n      selector: {\n        _id: doc._id\n      },\n      simulation: simulation\n    };\n\n    try {\n      // Run meteor method.\n      var result = callMeteorMethod(Class, methodName, [methodArgs], callback); // Return result of the meteor method call.\n\n      return result;\n    } catch (err) {\n      // Catch stub exceptions.\n      if (callback) {\n        callback(err);\n        return null;\n      }\n\n      throw err;\n    }\n  } // If we can just remove a document without calling the meteor method. We may\n  // be on the server or the collection may be local.\n\n\n  try {\n    // Prepare arguments.\n    var _methodArgs = {\n      doc: doc,\n      simulation: simulation,\n      trusted: true\n    };\n\n    var _result = documentSoftRestore(_methodArgs);\n\n    if (callback) {\n      callback(undefined, _result);\n    }\n\n    return _result;\n  } catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n\n    throw err;\n  }\n};\n\nmodule.exportDefault(softRestore);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"meteor_methods\":{\"softRemove.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/meteor_methods/softRemove.js                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar classSoftRemove;\nmodule.watch(require(\"../utils/classSoftRemove\"), {\n  \"default\": function (v) {\n    classSoftRemove = v;\n  }\n}, 0);\n\nvar softRemove = function (args) {\n  return classSoftRemove(args);\n};\n\nmodule.exportDefault(softRemove);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"softRestore.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/meteor_methods/softRestore.js                                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar classSoftRestore;\nmodule.watch(require(\"../utils/classSoftRestore\"), {\n  \"default\": function (v) {\n    classSoftRestore = v;\n  }\n}, 0);\n\nvar softRestore = function (args) {\n  return classSoftRestore(args);\n};\n\nmodule.exportDefault(softRestore);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"utils\":{\"classSoftRemove.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/utils/classSoftRemove.js                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar AstroClass, Module;\nmodule.watch(require(\"meteor/jagi:astronomy\"), {\n  Class: function (v) {\n    AstroClass = v;\n  },\n  Module: function (v) {\n    Module = v;\n  }\n}, 0);\nvar documentSoftRemove;\nmodule.watch(require(\"./documentSoftRemove\"), {\n  \"default\": function (v) {\n    documentSoftRemove = v;\n  }\n}, 1);\nvar throwIfSelectorIsNotId = Module.modules.storage.utils.throwIfSelectorIsNotId;\n\nvar classRemove = function () {\n  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var className = args.className,\n      selector = args.selector,\n      _args$simulation = args.simulation,\n      simulation = _args$simulation === void 0 ? true : _args$simulation,\n      _args$trusted = args.trusted,\n      trusted = _args$trusted === void 0 ? false : _args$trusted; // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n\n  if (!simulation && !Meteor.isServer) {\n    return;\n  } // Throw exception if we are trying to perform an operation on more than one\n  // document at once and it's not trusted call.\n\n\n  if (!trusted) {\n    throwIfSelectorIsNotId(selector, \"softRemove\");\n  }\n\n  var Class = AstroClass.get(className); // Get all documents matching selector.\n\n  var docs = Class.find(selector); // Prepare result of the method execution.\n\n  var result = 0;\n  docs.forEach(function (doc) {\n    // Update a document.\n    result += documentSoftRemove({\n      doc: doc,\n      simulation: simulation,\n      trusted: trusted\n    });\n  });\n  return result;\n};\n\nmodule.exportDefault(classRemove);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"classSoftRestore.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/utils/classSoftRestore.js                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar AstroClass, Module;\nmodule.watch(require(\"meteor/jagi:astronomy\"), {\n  Class: function (v) {\n    AstroClass = v;\n  },\n  Module: function (v) {\n    Module = v;\n  }\n}, 0);\nvar documentSoftRestore;\nmodule.watch(require(\"./documentSoftRestore\"), {\n  \"default\": function (v) {\n    documentSoftRestore = v;\n  }\n}, 1);\nvar throwIfSelectorIsNotId = Module.modules.storage.utils.throwIfSelectorIsNotId;\n\nvar classRestore = function () {\n  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var className = args.className,\n      selector = args.selector,\n      _args$simulation = args.simulation,\n      simulation = _args$simulation === void 0 ? true : _args$simulation,\n      _args$trusted = args.trusted,\n      trusted = _args$trusted === void 0 ? false : _args$trusted; // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n\n  if (!simulation && !Meteor.isServer) {\n    return;\n  } // Throw exception if we are trying to perform an operation on more than one\n  // document at once and it's not trusted call.\n\n\n  if (!trusted) {\n    throwIfSelectorIsNotId(selector, \"softRestore\");\n  }\n\n  var Class = AstroClass.get(className); // Get all documents matching selector.\n\n  var docs = Class.find(selector, {\n    disableEvents: true\n  }); // Prepare result of the method execution.\n\n  var result = 0;\n  docs.forEach(function (doc) {\n    // Update a document.\n    result += documentSoftRestore({\n      doc: doc,\n      simulation: simulation,\n      trusted: trusted\n    });\n  });\n  return result;\n};\n\nmodule.exportDefault(classRestore);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"documentSoftRemove.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/utils/documentSoftRemove.js                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _defaults;\n\nmodule.watch(require(\"lodash/defaults\"), {\n  \"default\": function (v) {\n    _defaults = v;\n  }\n}, 0);\nvar triggerBeforeSoftRemove;\nmodule.watch(require(\"./triggerBeforeSoftRemove\"), {\n  \"default\": function (v) {\n    triggerBeforeSoftRemove = v;\n  }\n}, 1);\nvar triggerAfterSoftRemove;\nmodule.watch(require(\"./triggerAfterSoftRemove\"), {\n  \"default\": function (v) {\n    triggerAfterSoftRemove = v;\n  }\n}, 2);\nvar Module;\nmodule.watch(require(\"meteor/jagi:astronomy\"), {\n  Module: function (v) {\n    Module = v;\n  }\n}, 3);\nvar getModifier = Module.modules.storage.utils.getModifier;\n\nvar documentSoftRemove = function () {\n  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var doc = args.doc,\n      _args$simulation = args.simulation,\n      simulation = _args$simulation === void 0 ? true : _args$simulation,\n      _args$trusted = args.trusted,\n      trusted = _args$trusted === void 0 ? false : _args$trusted; // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  var Class = doc.constructor;\n  var Collection = Class.getCollection(); // Remove only when document has the \"_id\" field (it's persisted).\n\n  if (Class.isNew(doc) || !doc._id) {\n    return 0;\n  } // Check if a class is secured.\n\n\n  if (Class.isSecured(\"softRemove\") && Meteor.isServer && !trusted) {\n    throw new Meteor.Error(403, \"Soft removing from the client is not allowed\");\n  } // Trigger before events.\n\n\n  triggerBeforeSoftRemove(doc, trusted); // Prepare selector.\n\n  var selector = {\n    _id: doc._id\n  }; // Prepare modifier.\n\n  var modifier = _defaults(getModifier({\n    doc: doc\n  }), {\n    $set: {}\n  });\n\n  var behavior = Class.getBehavior(\"softremove\")[0];\n  modifier.$set[behavior.options.removedFieldName] = true;\n\n  if (behavior.options.hasRemovedAtField) {\n    modifier.$set[behavior.options.removedAtFieldName] = new Date();\n  } // Remove a document.\n\n\n  var result = Collection._collection.update(selector, modifier); // Trigger after events.\n\n\n  triggerAfterSoftRemove(doc, trusted);\n  return result;\n};\n\nmodule.exportDefault(documentSoftRemove);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"documentSoftRestore.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/utils/documentSoftRestore.js                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar triggerBeforeSoftRestore;\nmodule.watch(require(\"./triggerBeforeSoftRestore\"), {\n  \"default\": function (v) {\n    triggerBeforeSoftRestore = v;\n  }\n}, 0);\nvar triggerAfterSoftRestore;\nmodule.watch(require(\"./triggerAfterSoftRestore\"), {\n  \"default\": function (v) {\n    triggerAfterSoftRestore = v;\n  }\n}, 1);\n\nvar documentSoftRestore = function () {\n  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var doc = args.doc,\n      _args$simulation = args.simulation,\n      simulation = _args$simulation === void 0 ? true : _args$simulation,\n      _args$trusted = args.trusted,\n      trusted = _args$trusted === void 0 ? false : _args$trusted; // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  var Class = doc.constructor;\n  var Collection = Class.getCollection(); // Restore only when document has the \"_id\" field (it's persisted).\n\n  if (Class.isNew(doc) || !doc._id) {\n    return 0;\n  } // Check if a class is secured.\n\n\n  if (Class.isSecured(\"softRestore\") && Meteor.isServer && !trusted) {\n    throw new Meteor.Error(403, \"Soft restoring from the client is not allowed\");\n  } // Trigger before events.\n\n\n  triggerBeforeSoftRestore(doc, trusted); // Prepare selector.\n\n  var selector = {\n    _id: doc._id\n  }; // Prepare modifier.\n\n  var modifier = {\n    $set: {}\n  };\n  var behavior = Class.getBehavior(\"softremove\")[0];\n  modifier.$set[behavior.options.removedFieldName] = false;\n\n  if (behavior.options.hasRemovedAtField) {\n    var _modifier$$unset;\n\n    modifier.$unset = (_modifier$$unset = {}, _modifier$$unset[behavior.options.removedAtFieldName] = \"\", _modifier$$unset);\n  } // Restore a document.\n\n\n  var result = Collection._collection.update(selector, modifier); // Trigger after events.\n\n\n  triggerAfterSoftRestore(doc, trusted);\n  return result;\n};\n\nmodule.exportDefault(documentSoftRestore);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"triggerAfterSoftRemove.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/utils/triggerAfterSoftRemove.js                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Event;\nmodule.watch(require(\"meteor/jagi:astronomy\"), {\n  Event: function (v) {\n    Event = v;\n  }\n}, 0);\n\nvar triggerAfterSoftRemove = function (doc, trusted) {\n  // Trigger the \"afterSoftRemove\" event handlers.\n  doc.dispatchEvent(new Event(\"afterSoftRemove\", {\n    propagates: true,\n    trusted: trusted\n  }));\n};\n\nmodule.exportDefault(triggerAfterSoftRemove);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"triggerAfterSoftRestore.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/utils/triggerAfterSoftRestore.js                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Event;\nmodule.watch(require(\"meteor/jagi:astronomy\"), {\n  Event: function (v) {\n    Event = v;\n  }\n}, 0);\n\nvar triggerAfterSoftRestore = function (doc, trusted) {\n  // Trigger the \"afterSoftRestore\" event handlers.\n  doc.dispatchEvent(new Event(\"afterSoftRestore\", {\n    propagates: true,\n    trusted: trusted\n  }));\n};\n\nmodule.exportDefault(triggerAfterSoftRestore);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"triggerBeforeSoftRemove.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/utils/triggerBeforeSoftRemove.js                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Event;\nmodule.watch(require(\"meteor/jagi:astronomy\"), {\n  Event: function (v) {\n    Event = v;\n  }\n}, 0);\n\nvar triggerBeforeSoftRemove = function (doc, trusted) {\n  // Trigger the \"beforeSoftRemove\" event handlers.\n  if (!doc.dispatchEvent(new Event(\"beforeSoftRemove\", {\n    cancelable: true,\n    propagates: true,\n    trusted: trusted\n  }))) {\n    // If an event was prevented, then we stop here.\n    throw new Meteor.Error(\"prevented\", \"Operation prevented\", {\n      eventName: \"beforeSoftRemove\"\n    });\n  }\n};\n\nmodule.exportDefault(triggerBeforeSoftRemove);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"triggerBeforeSoftRestore.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/jagi_astronomy-softremove-behavior/lib/utils/triggerBeforeSoftRestore.js                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Event;\nmodule.watch(require(\"meteor/jagi:astronomy\"), {\n  Event: function (v) {\n    Event = v;\n  }\n}, 0);\n\nvar triggerBeforeSoftRestore = function (doc, trusted) {\n  // Trigger the \"beforeSoftRestore\" event handlers.\n  if (!doc.dispatchEvent(new Event(\"beforeSoftRestore\", {\n    cancelable: true,\n    propagates: true,\n    trusted: trusted\n  }))) {\n    // If an event was prevented, then we stop here.\n    throw new Meteor.Error(\"prevented\", \"Operation prevented\", {\n      eventName: \"beforeSoftRestore\"\n    });\n  }\n};\n\nmodule.exportDefault(triggerBeforeSoftRestore);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"node_modules\":{\"lodash\":{\"bind.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/bind.js                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseRest = require('./_baseRest'),\n    createWrap = require('./_createWrap'),\n    getHolder = require('./_getHolder'),\n    replaceHolders = require('./_replaceHolders');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_PARTIAL_FLAG = 32;\n\n/**\n * Creates a function that invokes `func` with the `this` binding of `thisArg`\n * and `partials` prepended to the arguments it receives.\n *\n * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,\n * may be used as a placeholder for partially applied arguments.\n *\n * **Note:** Unlike native `Function#bind`, this method doesn't set the \"length\"\n * property of bound functions.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to bind.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {...*} [partials] The arguments to be partially applied.\n * @returns {Function} Returns the new bound function.\n * @example\n *\n * function greet(greeting, punctuation) {\n *   return greeting + ' ' + this.user + punctuation;\n * }\n *\n * var object = { 'user': 'fred' };\n *\n * var bound = _.bind(greet, object, 'hi');\n * bound('!');\n * // => 'hi fred!'\n *\n * // Bound with placeholders.\n * var bound = _.bind(greet, object, _, '!');\n * bound('hi');\n * // => 'hi fred!'\n */\nvar bind = baseRest(function(func, thisArg, partials) {\n  var bitmask = WRAP_BIND_FLAG;\n  if (partials.length) {\n    var holders = replaceHolders(partials, getHolder(bind));\n    bitmask |= WRAP_PARTIAL_FLAG;\n  }\n  return createWrap(func, bitmask, thisArg, partials, holders);\n});\n\n// Assign default placeholders.\nbind.placeholder = {};\n\nmodule.exports = bind;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseRest.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseRest.js                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar identity = require('./identity'),\n    overRest = require('./_overRest'),\n    setToString = require('./_setToString');\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"identity.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/identity.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_overRest.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_overRest.js                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_apply.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_apply.js                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_setToString.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_setToString.js                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseSetToString = require('./_baseSetToString'),\n    shortOut = require('./_shortOut');\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseSetToString.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseSetToString.js                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar constant = require('./constant'),\n    defineProperty = require('./_defineProperty'),\n    identity = require('./identity');\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"constant.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/constant.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_defineProperty.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_defineProperty.js                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_getNative.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_getNative.js                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseIsNative.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseIsNative.js                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isFunction.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/isFunction.js                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseGetTag.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseGetTag.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  value = Object(value);\n  return (symToStringTag && symToStringTag in value)\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_Symbol.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_Symbol.js                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_root.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_root.js                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_freeGlobal.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_freeGlobal.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_getRawTag.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_getRawTag.js                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_objectToString.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_objectToString.js                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isObject.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/isObject.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_isMasked.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_isMasked.js                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_coreJsData.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_coreJsData.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_toSource.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_toSource.js                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_getValue.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_getValue.js                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_shortOut.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_shortOut.js                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_createWrap.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_createWrap.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseSetData = require('./_baseSetData'),\n    createBind = require('./_createBind'),\n    createCurry = require('./_createCurry'),\n    createHybrid = require('./_createHybrid'),\n    createPartial = require('./_createPartial'),\n    getData = require('./_getData'),\n    mergeData = require('./_mergeData'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString'),\n    toInteger = require('./toInteger');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that either curries or invokes `func` with optional\n * `this` binding and partially applied arguments.\n *\n * @private\n * @param {Function|string} func The function or method name to wrap.\n * @param {number} bitmask The bitmask flags.\n *    1 - `_.bind`\n *    2 - `_.bindKey`\n *    4 - `_.curry` or `_.curryRight` of a bound function\n *    8 - `_.curry`\n *   16 - `_.curryRight`\n *   32 - `_.partial`\n *   64 - `_.partialRight`\n *  128 - `_.rearg`\n *  256 - `_.ary`\n *  512 - `_.flip`\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to be partially applied.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n  if (!isBindKey && typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var length = partials ? partials.length : 0;\n  if (!length) {\n    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n    partials = holders = undefined;\n  }\n  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n  arity = arity === undefined ? arity : toInteger(arity);\n  length -= holders ? holders.length : 0;\n\n  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n    var partialsRight = partials,\n        holdersRight = holders;\n\n    partials = holders = undefined;\n  }\n  var data = isBindKey ? undefined : getData(func);\n\n  var newData = [\n    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n    argPos, ary, arity\n  ];\n\n  if (data) {\n    mergeData(newData, data);\n  }\n  func = newData[0];\n  bitmask = newData[1];\n  thisArg = newData[2];\n  partials = newData[3];\n  holders = newData[4];\n  arity = newData[9] = newData[9] == null\n    ? (isBindKey ? 0 : func.length)\n    : nativeMax(newData[9] - length, 0);\n\n  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n  }\n  if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n    var result = createBind(func, bitmask, thisArg);\n  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n    result = createCurry(func, bitmask, arity);\n  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n    result = createPartial(func, bitmask, thisArg, partials);\n  } else {\n    result = createHybrid.apply(undefined, newData);\n  }\n  var setter = data ? baseSetData : setData;\n  return setWrapToString(setter(result, newData), func, bitmask);\n}\n\nmodule.exports = createWrap;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseSetData.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseSetData.js                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar identity = require('./identity'),\n    metaMap = require('./_metaMap');\n\n/**\n * The base implementation of `setData` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to associate metadata with.\n * @param {*} data The metadata.\n * @returns {Function} Returns `func`.\n */\nvar baseSetData = !metaMap ? identity : function(func, data) {\n  metaMap.set(func, data);\n  return func;\n};\n\nmodule.exports = baseSetData;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_metaMap.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_metaMap.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar WeakMap = require('./_WeakMap');\n\n/** Used to store function metadata. */\nvar metaMap = WeakMap && new WeakMap;\n\nmodule.exports = metaMap;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_WeakMap.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_WeakMap.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nmodule.exports = WeakMap;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_createBind.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_createBind.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar createCtor = require('./_createCtor'),\n    root = require('./_root');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` to invoke it with the optional `this`\n * binding of `thisArg`.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createBind(func, bitmask, thisArg) {\n  var isBind = bitmask & WRAP_BIND_FLAG,\n      Ctor = createCtor(func);\n\n  function wrapper() {\n    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n    return fn.apply(isBind ? thisArg : this, arguments);\n  }\n  return wrapper;\n}\n\nmodule.exports = createBind;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_createCtor.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_createCtor.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseCreate = require('./_baseCreate'),\n    isObject = require('./isObject');\n\n/**\n * Creates a function that produces an instance of `Ctor` regardless of\n * whether it was invoked as part of a `new` expression or by `call` or `apply`.\n *\n * @private\n * @param {Function} Ctor The constructor to wrap.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createCtor(Ctor) {\n  return function() {\n    // Use a `switch` statement to work with class constructors. See\n    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist\n    // for more details.\n    var args = arguments;\n    switch (args.length) {\n      case 0: return new Ctor;\n      case 1: return new Ctor(args[0]);\n      case 2: return new Ctor(args[0], args[1]);\n      case 3: return new Ctor(args[0], args[1], args[2]);\n      case 4: return new Ctor(args[0], args[1], args[2], args[3]);\n      case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);\n      case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);\n      case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);\n    }\n    var thisBinding = baseCreate(Ctor.prototype),\n        result = Ctor.apply(thisBinding, args);\n\n    // Mimic the constructor's `return` behavior.\n    // See https://es5.github.io/#x13.2.2 for more details.\n    return isObject(result) ? result : thisBinding;\n  };\n}\n\nmodule.exports = createCtor;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseCreate.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseCreate.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar isObject = require('./isObject');\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_createCurry.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_createCurry.js                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar apply = require('./_apply'),\n    createCtor = require('./_createCtor'),\n    createHybrid = require('./_createHybrid'),\n    createRecurry = require('./_createRecurry'),\n    getHolder = require('./_getHolder'),\n    replaceHolders = require('./_replaceHolders'),\n    root = require('./_root');\n\n/**\n * Creates a function that wraps `func` to enable currying.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {number} arity The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createCurry(func, bitmask, arity) {\n  var Ctor = createCtor(func);\n\n  function wrapper() {\n    var length = arguments.length,\n        args = Array(length),\n        index = length,\n        placeholder = getHolder(wrapper);\n\n    while (index--) {\n      args[index] = arguments[index];\n    }\n    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)\n      ? []\n      : replaceHolders(args, placeholder);\n\n    length -= holders.length;\n    if (length < arity) {\n      return createRecurry(\n        func, bitmask, createHybrid, wrapper.placeholder, undefined,\n        args, holders, undefined, undefined, arity - length);\n    }\n    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n    return apply(fn, this, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createCurry;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_createHybrid.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_createHybrid.js                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar composeArgs = require('./_composeArgs'),\n    composeArgsRight = require('./_composeArgsRight'),\n    countHolders = require('./_countHolders'),\n    createCtor = require('./_createCtor'),\n    createRecurry = require('./_createRecurry'),\n    getHolder = require('./_getHolder'),\n    reorder = require('./_reorder'),\n    replaceHolders = require('./_replaceHolders'),\n    root = require('./_root');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_ARY_FLAG = 128,\n    WRAP_FLIP_FLAG = 512;\n\n/**\n * Creates a function that wraps `func` to invoke it with optional `this`\n * binding of `thisArg`, partial application, and currying.\n *\n * @private\n * @param {Function|string} func The function or method name to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to prepend to those provided to\n *  the new function.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [partialsRight] The arguments to append to those provided\n *  to the new function.\n * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n  var isAry = bitmask & WRAP_ARY_FLAG,\n      isBind = bitmask & WRAP_BIND_FLAG,\n      isBindKey = bitmask & WRAP_BIND_KEY_FLAG,\n      isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),\n      isFlip = bitmask & WRAP_FLIP_FLAG,\n      Ctor = isBindKey ? undefined : createCtor(func);\n\n  function wrapper() {\n    var length = arguments.length,\n        args = Array(length),\n        index = length;\n\n    while (index--) {\n      args[index] = arguments[index];\n    }\n    if (isCurried) {\n      var placeholder = getHolder(wrapper),\n          holdersCount = countHolders(args, placeholder);\n    }\n    if (partials) {\n      args = composeArgs(args, partials, holders, isCurried);\n    }\n    if (partialsRight) {\n      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n    }\n    length -= holdersCount;\n    if (isCurried && length < arity) {\n      var newHolders = replaceHolders(args, placeholder);\n      return createRecurry(\n        func, bitmask, createHybrid, wrapper.placeholder, thisArg,\n        args, newHolders, argPos, ary, arity - length\n      );\n    }\n    var thisBinding = isBind ? thisArg : this,\n        fn = isBindKey ? thisBinding[func] : func;\n\n    length = args.length;\n    if (argPos) {\n      args = reorder(args, argPos);\n    } else if (isFlip && length > 1) {\n      args.reverse();\n    }\n    if (isAry && ary < length) {\n      args.length = ary;\n    }\n    if (this && this !== root && this instanceof wrapper) {\n      fn = Ctor || createCtor(fn);\n    }\n    return fn.apply(thisBinding, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createHybrid;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_composeArgs.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_composeArgs.js                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates an array that is the composition of partially applied arguments,\n * placeholders, and provided arguments into a single array of arguments.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to prepend to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgs(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersLength = holders.length,\n      leftIndex = -1,\n      leftLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(leftLength + rangeLength),\n      isUncurried = !isCurried;\n\n  while (++leftIndex < leftLength) {\n    result[leftIndex] = partials[leftIndex];\n  }\n  while (++argsIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[holders[argsIndex]] = args[argsIndex];\n    }\n  }\n  while (rangeLength--) {\n    result[leftIndex++] = args[argsIndex++];\n  }\n  return result;\n}\n\nmodule.exports = composeArgs;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_composeArgsRight.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_composeArgsRight.js                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This function is like `composeArgs` except that the arguments composition\n * is tailored for `_.partialRight`.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to append to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgsRight(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersIndex = -1,\n      holdersLength = holders.length,\n      rightIndex = -1,\n      rightLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(rangeLength + rightLength),\n      isUncurried = !isCurried;\n\n  while (++argsIndex < rangeLength) {\n    result[argsIndex] = args[argsIndex];\n  }\n  var offset = argsIndex;\n  while (++rightIndex < rightLength) {\n    result[offset + rightIndex] = partials[rightIndex];\n  }\n  while (++holdersIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[offset + holders[holdersIndex]] = args[argsIndex++];\n    }\n  }\n  return result;\n}\n\nmodule.exports = composeArgsRight;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_countHolders.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_countHolders.js                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * Gets the number of `placeholder` occurrences in `array`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} placeholder The placeholder to search for.\n * @returns {number} Returns the placeholder count.\n */\nfunction countHolders(array, placeholder) {\n  var length = array.length,\n      result = 0;\n\n  while (length--) {\n    if (array[length] === placeholder) {\n      ++result;\n    }\n  }\n  return result;\n}\n\nmodule.exports = countHolders;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_createRecurry.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_createRecurry.js                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar isLaziable = require('./_isLaziable'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/**\n * Creates a function that wraps `func` to continue currying.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {Function} wrapFunc The function to create the `func` wrapper.\n * @param {*} placeholder The placeholder value.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to prepend to those provided to\n *  the new function.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {\n  var isCurry = bitmask & WRAP_CURRY_FLAG,\n      newHolders = isCurry ? holders : undefined,\n      newHoldersRight = isCurry ? undefined : holders,\n      newPartials = isCurry ? partials : undefined,\n      newPartialsRight = isCurry ? undefined : partials;\n\n  bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);\n  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);\n\n  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {\n    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);\n  }\n  var newData = [\n    func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,\n    newHoldersRight, argPos, ary, arity\n  ];\n\n  var result = wrapFunc.apply(undefined, newData);\n  if (isLaziable(func)) {\n    setData(result, newData);\n  }\n  result.placeholder = placeholder;\n  return setWrapToString(result, func, bitmask);\n}\n\nmodule.exports = createRecurry;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_isLaziable.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_isLaziable.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar LazyWrapper = require('./_LazyWrapper'),\n    getData = require('./_getData'),\n    getFuncName = require('./_getFuncName'),\n    lodash = require('./wrapperLodash');\n\n/**\n * Checks if `func` has a lazy counterpart.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n *  else `false`.\n */\nfunction isLaziable(func) {\n  var funcName = getFuncName(func),\n      other = lodash[funcName];\n\n  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n    return false;\n  }\n  if (func === other) {\n    return true;\n  }\n  var data = getData(other);\n  return !!data && func === data[0];\n}\n\nmodule.exports = isLaziable;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_LazyWrapper.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_LazyWrapper.js                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseCreate = require('./_baseCreate'),\n    baseLodash = require('./_baseLodash');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.\n *\n * @private\n * @constructor\n * @param {*} value The value to wrap.\n */\nfunction LazyWrapper(value) {\n  this.__wrapped__ = value;\n  this.__actions__ = [];\n  this.__dir__ = 1;\n  this.__filtered__ = false;\n  this.__iteratees__ = [];\n  this.__takeCount__ = MAX_ARRAY_LENGTH;\n  this.__views__ = [];\n}\n\n// Ensure `LazyWrapper` is an instance of `baseLodash`.\nLazyWrapper.prototype = baseCreate(baseLodash.prototype);\nLazyWrapper.prototype.constructor = LazyWrapper;\n\nmodule.exports = LazyWrapper;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseLodash.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseLodash.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * The function whose prototype chain sequence wrappers inherit from.\n *\n * @private\n */\nfunction baseLodash() {\n  // No operation performed.\n}\n\nmodule.exports = baseLodash;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_getData.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_getData.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar metaMap = require('./_metaMap'),\n    noop = require('./noop');\n\n/**\n * Gets metadata for `func`.\n *\n * @private\n * @param {Function} func The function to query.\n * @returns {*} Returns the metadata for `func`.\n */\nvar getData = !metaMap ? noop : function(func) {\n  return metaMap.get(func);\n};\n\nmodule.exports = getData;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"noop.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/noop.js                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_getFuncName.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_getFuncName.js                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar realNames = require('./_realNames');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the name of `func`.\n *\n * @private\n * @param {Function} func The function to query.\n * @returns {string} Returns the function name.\n */\nfunction getFuncName(func) {\n  var result = (func.name + ''),\n      array = realNames[result],\n      length = hasOwnProperty.call(realNames, result) ? array.length : 0;\n\n  while (length--) {\n    var data = array[length],\n        otherFunc = data.func;\n    if (otherFunc == null || otherFunc == func) {\n      return data.name;\n    }\n  }\n  return result;\n}\n\nmodule.exports = getFuncName;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_realNames.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_realNames.js                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/** Used to lookup unminified function names. */\nvar realNames = {};\n\nmodule.exports = realNames;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"wrapperLodash.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/wrapperLodash.js                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar LazyWrapper = require('./_LazyWrapper'),\n    LodashWrapper = require('./_LodashWrapper'),\n    baseLodash = require('./_baseLodash'),\n    isArray = require('./isArray'),\n    isObjectLike = require('./isObjectLike'),\n    wrapperClone = require('./_wrapperClone');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates a `lodash` object which wraps `value` to enable implicit method\n * chain sequences. Methods that operate on and return arrays, collections,\n * and functions can be chained together. Methods that retrieve a single value\n * or may return a primitive value will automatically end the chain sequence\n * and return the unwrapped value. Otherwise, the value must be unwrapped\n * with `_#value`.\n *\n * Explicit chain sequences, which must be unwrapped with `_#value`, may be\n * enabled using `_.chain`.\n *\n * The execution of chained methods is lazy, that is, it's deferred until\n * `_#value` is implicitly or explicitly called.\n *\n * Lazy evaluation allows several methods to support shortcut fusion.\n * Shortcut fusion is an optimization to merge iteratee calls; this avoids\n * the creation of intermediate arrays and can greatly reduce the number of\n * iteratee executions. Sections of a chain sequence qualify for shortcut\n * fusion if the section is applied to an array of at least `200` elements\n * and any iteratees accept only one argument. The heuristic for whether a\n * section qualifies for shortcut fusion is subject to change.\n *\n * Chaining is supported in custom builds as long as the `_#value` method is\n * directly or indirectly included in the build.\n *\n * In addition to lodash methods, wrappers have `Array` and `String` methods.\n *\n * The wrapper `Array` methods are:\n * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`\n *\n * The wrapper `String` methods are:\n * `replace` and `split`\n *\n * The wrapper methods that support shortcut fusion are:\n * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,\n * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,\n * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`\n *\n * The chainable wrapper methods are:\n * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,\n * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,\n * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,\n * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,\n * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,\n * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,\n * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,\n * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,\n * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,\n * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,\n * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,\n * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,\n * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,\n * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,\n * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,\n * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,\n * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,\n * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,\n * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,\n * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,\n * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,\n * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,\n * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,\n * `zipObject`, `zipObjectDeep`, and `zipWith`\n *\n * The wrapper methods that are **not** chainable by default are:\n * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,\n * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,\n * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,\n * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,\n * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,\n * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,\n * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,\n * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,\n * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,\n * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,\n * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,\n * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,\n * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,\n * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,\n * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,\n * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,\n * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,\n * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,\n * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,\n * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,\n * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,\n * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,\n * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,\n * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,\n * `upperFirst`, `value`, and `words`\n *\n * @name _\n * @constructor\n * @category Seq\n * @param {*} value The value to wrap in a `lodash` instance.\n * @returns {Object} Returns the new `lodash` wrapper instance.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * var wrapped = _([1, 2, 3]);\n *\n * // Returns an unwrapped value.\n * wrapped.reduce(_.add);\n * // => 6\n *\n * // Returns a wrapped value.\n * var squares = wrapped.map(square);\n *\n * _.isArray(squares);\n * // => false\n *\n * _.isArray(squares.value());\n * // => true\n */\nfunction lodash(value) {\n  if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {\n    if (value instanceof LodashWrapper) {\n      return value;\n    }\n    if (hasOwnProperty.call(value, '__wrapped__')) {\n      return wrapperClone(value);\n    }\n  }\n  return new LodashWrapper(value);\n}\n\n// Ensure wrappers are instances of `baseLodash`.\nlodash.prototype = baseLodash.prototype;\nlodash.prototype.constructor = lodash;\n\nmodule.exports = lodash;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_LodashWrapper.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_LodashWrapper.js                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseCreate = require('./_baseCreate'),\n    baseLodash = require('./_baseLodash');\n\n/**\n * The base constructor for creating `lodash` wrapper objects.\n *\n * @private\n * @param {*} value The value to wrap.\n * @param {boolean} [chainAll] Enable explicit method chain sequences.\n */\nfunction LodashWrapper(value, chainAll) {\n  this.__wrapped__ = value;\n  this.__actions__ = [];\n  this.__chain__ = !!chainAll;\n  this.__index__ = 0;\n  this.__values__ = undefined;\n}\n\nLodashWrapper.prototype = baseCreate(baseLodash.prototype);\nLodashWrapper.prototype.constructor = LodashWrapper;\n\nmodule.exports = LodashWrapper;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isArray.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/isArray.js                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isObjectLike.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/isObjectLike.js                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_wrapperClone.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_wrapperClone.js                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar LazyWrapper = require('./_LazyWrapper'),\n    LodashWrapper = require('./_LodashWrapper'),\n    copyArray = require('./_copyArray');\n\n/**\n * Creates a clone of `wrapper`.\n *\n * @private\n * @param {Object} wrapper The wrapper to clone.\n * @returns {Object} Returns the cloned wrapper.\n */\nfunction wrapperClone(wrapper) {\n  if (wrapper instanceof LazyWrapper) {\n    return wrapper.clone();\n  }\n  var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);\n  result.__actions__ = copyArray(wrapper.__actions__);\n  result.__index__  = wrapper.__index__;\n  result.__values__ = wrapper.__values__;\n  return result;\n}\n\nmodule.exports = wrapperClone;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_copyArray.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_copyArray.js                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_setData.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_setData.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseSetData = require('./_baseSetData'),\n    shortOut = require('./_shortOut');\n\n/**\n * Sets metadata for `func`.\n *\n * **Note:** If this function becomes hot, i.e. is invoked a lot in a short\n * period of time, it will trip its breaker and transition to an identity\n * function to avoid garbage collection pauses in V8. See\n * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)\n * for more details.\n *\n * @private\n * @param {Function} func The function to associate metadata with.\n * @param {*} data The metadata.\n * @returns {Function} Returns `func`.\n */\nvar setData = shortOut(baseSetData);\n\nmodule.exports = setData;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_setWrapToString.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_setWrapToString.js                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar getWrapDetails = require('./_getWrapDetails'),\n    insertWrapDetails = require('./_insertWrapDetails'),\n    setToString = require('./_setToString'),\n    updateWrapDetails = require('./_updateWrapDetails');\n\n/**\n * Sets the `toString` method of `wrapper` to mimic the source of `reference`\n * with wrapper details in a comment at the top of the source body.\n *\n * @private\n * @param {Function} wrapper The function to modify.\n * @param {Function} reference The reference function.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @returns {Function} Returns `wrapper`.\n */\nfunction setWrapToString(wrapper, reference, bitmask) {\n  var source = (reference + '');\n  return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));\n}\n\nmodule.exports = setWrapToString;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_getWrapDetails.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_getWrapDetails.js                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/** Used to match wrap detail comments. */\nvar reWrapDetails = /\\{\\n\\/\\* \\[wrapped with (.+)\\] \\*/,\n    reSplitDetails = /,? & /;\n\n/**\n * Extracts wrapper details from the `source` body comment.\n *\n * @private\n * @param {string} source The source to inspect.\n * @returns {Array} Returns the wrapper details.\n */\nfunction getWrapDetails(source) {\n  var match = source.match(reWrapDetails);\n  return match ? match[1].split(reSplitDetails) : [];\n}\n\nmodule.exports = getWrapDetails;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_insertWrapDetails.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_insertWrapDetails.js                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/** Used to match wrap detail comments. */\nvar reWrapComment = /\\{(?:\\n\\/\\* \\[wrapped with .+\\] \\*\\/)?\\n?/;\n\n/**\n * Inserts wrapper `details` in a comment at the top of the `source` body.\n *\n * @private\n * @param {string} source The source to modify.\n * @returns {Array} details The details to insert.\n * @returns {string} Returns the modified source.\n */\nfunction insertWrapDetails(source, details) {\n  var length = details.length;\n  if (!length) {\n    return source;\n  }\n  var lastIndex = length - 1;\n  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];\n  details = details.join(length > 2 ? ', ' : ' ');\n  return source.replace(reWrapComment, '{\\n/* [wrapped with ' + details + '] */\\n');\n}\n\nmodule.exports = insertWrapDetails;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_updateWrapDetails.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_updateWrapDetails.js                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar arrayEach = require('./_arrayEach'),\n    arrayIncludes = require('./_arrayIncludes');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256,\n    WRAP_FLIP_FLAG = 512;\n\n/** Used to associate wrap methods with their bit flags. */\nvar wrapFlags = [\n  ['ary', WRAP_ARY_FLAG],\n  ['bind', WRAP_BIND_FLAG],\n  ['bindKey', WRAP_BIND_KEY_FLAG],\n  ['curry', WRAP_CURRY_FLAG],\n  ['curryRight', WRAP_CURRY_RIGHT_FLAG],\n  ['flip', WRAP_FLIP_FLAG],\n  ['partial', WRAP_PARTIAL_FLAG],\n  ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],\n  ['rearg', WRAP_REARG_FLAG]\n];\n\n/**\n * Updates wrapper `details` based on `bitmask` flags.\n *\n * @private\n * @returns {Array} details The details to modify.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @returns {Array} Returns `details`.\n */\nfunction updateWrapDetails(details, bitmask) {\n  arrayEach(wrapFlags, function(pair) {\n    var value = '_.' + pair[0];\n    if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {\n      details.push(value);\n    }\n  });\n  return details.sort();\n}\n\nmodule.exports = updateWrapDetails;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_arrayEach.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_arrayEach.js                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nmodule.exports = arrayEach;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_arrayIncludes.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_arrayIncludes.js                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseIndexOf = require('./_baseIndexOf');\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nmodule.exports = arrayIncludes;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseIndexOf.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseIndexOf.js                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseFindIndex = require('./_baseFindIndex'),\n    baseIsNaN = require('./_baseIsNaN'),\n    strictIndexOf = require('./_strictIndexOf');\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nmodule.exports = baseIndexOf;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseFindIndex.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseFindIndex.js                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseIsNaN.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseIsNaN.js                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nmodule.exports = baseIsNaN;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_strictIndexOf.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_strictIndexOf.js                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_getHolder.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_getHolder.js                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * Gets the argument placeholder value for `func`.\n *\n * @private\n * @param {Function} func The function to inspect.\n * @returns {*} Returns the placeholder value.\n */\nfunction getHolder(func) {\n  var object = func;\n  return object.placeholder;\n}\n\nmodule.exports = getHolder;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_reorder.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_reorder.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar copyArray = require('./_copyArray'),\n    isIndex = require('./_isIndex');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Reorder `array` according to the specified indexes where the element at\n * the first index is assigned as the first element, the element at\n * the second index is assigned as the second element, and so on.\n *\n * @private\n * @param {Array} array The array to reorder.\n * @param {Array} indexes The arranged array indexes.\n * @returns {Array} Returns `array`.\n */\nfunction reorder(array, indexes) {\n  var arrLength = array.length,\n      length = nativeMin(indexes.length, arrLength),\n      oldArray = copyArray(array);\n\n  while (length--) {\n    var index = indexes[length];\n    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n  }\n  return array;\n}\n\nmodule.exports = reorder;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_isIndex.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_isIndex.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_replaceHolders.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_replaceHolders.js                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/** Used as the internal argument placeholder. */\nvar PLACEHOLDER = '__lodash_placeholder__';\n\n/**\n * Replaces all `placeholder` elements in `array` with an internal placeholder\n * and returns an array of their indexes.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {*} placeholder The placeholder to replace.\n * @returns {Array} Returns the new array of placeholder indexes.\n */\nfunction replaceHolders(array, placeholder) {\n  var index = -1,\n      length = array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value === placeholder || value === PLACEHOLDER) {\n      array[index] = PLACEHOLDER;\n      result[resIndex++] = index;\n    }\n  }\n  return result;\n}\n\nmodule.exports = replaceHolders;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_createPartial.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_createPartial.js                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar apply = require('./_apply'),\n    createCtor = require('./_createCtor'),\n    root = require('./_root');\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1;\n\n/**\n * Creates a function that wraps `func` to invoke it with the `this` binding\n * of `thisArg` and `partials` prepended to the arguments it receives.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} partials The arguments to prepend to those provided to\n *  the new function.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createPartial(func, bitmask, thisArg, partials) {\n  var isBind = bitmask & WRAP_BIND_FLAG,\n      Ctor = createCtor(func);\n\n  function wrapper() {\n    var argsIndex = -1,\n        argsLength = arguments.length,\n        leftIndex = -1,\n        leftLength = partials.length,\n        args = Array(leftLength + argsLength),\n        fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\n\n    while (++leftIndex < leftLength) {\n      args[leftIndex] = partials[leftIndex];\n    }\n    while (argsLength--) {\n      args[leftIndex++] = arguments[++argsIndex];\n    }\n    return apply(fn, isBind ? thisArg : this, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createPartial;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_mergeData.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_mergeData.js                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar composeArgs = require('./_composeArgs'),\n    composeArgsRight = require('./_composeArgsRight'),\n    replaceHolders = require('./_replaceHolders');\n\n/** Used as the internal argument placeholder. */\nvar PLACEHOLDER = '__lodash_placeholder__';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Merges the function metadata of `source` into `data`.\n *\n * Merging metadata reduces the number of wrappers used to invoke a function.\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n * may be applied regardless of execution order. Methods like `_.ary` and\n * `_.rearg` modify function arguments, making the order in which they are\n * executed important, preventing the merging of metadata. However, we make\n * an exception for a safe combined case where curried functions have `_.ary`\n * and or `_.rearg` applied.\n *\n * @private\n * @param {Array} data The destination metadata.\n * @param {Array} source The source metadata.\n * @returns {Array} Returns `data`.\n */\nfunction mergeData(data, source) {\n  var bitmask = data[1],\n      srcBitmask = source[1],\n      newBitmask = bitmask | srcBitmask,\n      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n  var isCombo =\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n  // Exit early if metadata can't be merged.\n  if (!(isCommon || isCombo)) {\n    return data;\n  }\n  // Use source `thisArg` if available.\n  if (srcBitmask & WRAP_BIND_FLAG) {\n    data[2] = source[2];\n    // Set when currying a bound function.\n    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n  }\n  // Compose partial arguments.\n  var value = source[3];\n  if (value) {\n    var partials = data[3];\n    data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n  }\n  // Compose partial right arguments.\n  value = source[5];\n  if (value) {\n    partials = data[5];\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n  }\n  // Use source `argPos` if available.\n  value = source[7];\n  if (value) {\n    data[7] = value;\n  }\n  // Use source `ary` if it's smaller.\n  if (srcBitmask & WRAP_ARY_FLAG) {\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n  }\n  // Use source `arity` if one is not provided.\n  if (data[9] == null) {\n    data[9] = source[9];\n  }\n  // Use source `func` and merge bitmasks.\n  data[0] = source[0];\n  data[1] = newBitmask;\n\n  return data;\n}\n\nmodule.exports = mergeData;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"toInteger.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/toInteger.js                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"toFinite.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/toFinite.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar toNumber = require('./toNumber');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nmodule.exports = toFinite;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"toNumber.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/toNumber.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isSymbol.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/isSymbol.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"forEach.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/forEach.js                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar arrayEach = require('./_arrayEach'),\n    baseEach = require('./_baseEach'),\n    castFunction = require('./_castFunction'),\n    isArray = require('./isArray');\n\n/**\n * Iterates over elements of `collection` and invokes `iteratee` for each element.\n * The iteratee is invoked with three arguments: (value, index|key, collection).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n * property are iterated like arrays. To avoid this behavior use `_.forIn`\n * or `_.forOwn` for object iteration.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias each\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n * @see _.forEachRight\n * @example\n *\n * _.forEach([1, 2], function(value) {\n *   console.log(value);\n * });\n * // => Logs `1` then `2`.\n *\n * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n *   console.log(key);\n * });\n * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n */\nfunction forEach(collection, iteratee) {\n  var func = isArray(collection) ? arrayEach : baseEach;\n  return func(collection, castFunction(iteratee));\n}\n\nmodule.exports = forEach;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseEach.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseEach.js                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseForOwn.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseForOwn.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseFor.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseFor.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar createBaseFor = require('./_createBaseFor');\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_createBaseFor.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_createBaseFor.js                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"keys.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/keys.js                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeys = require('./_baseKeys'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_arrayLikeKeys.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_arrayLikeKeys.js                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseTimes = require('./_baseTimes'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isIndex = require('./_isIndex'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseTimes.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseTimes.js                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isArguments.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/isArguments.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseIsArguments = require('./_baseIsArguments'),\n    isObjectLike = require('./isObjectLike');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseIsArguments.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseIsArguments.js                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isBuffer.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/isBuffer.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar root = require('./_root'),\n    stubFalse = require('./stubFalse');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"stubFalse.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/stubFalse.js                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isTypedArray.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/isTypedArray.js                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseIsTypedArray = require('./_baseIsTypedArray'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseIsTypedArray.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseIsTypedArray.js                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseGetTag = require('./_baseGetTag'),\n    isLength = require('./isLength'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isLength.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/isLength.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseUnary.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseUnary.js                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_nodeUtil.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_nodeUtil.js                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseKeys.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseKeys.js                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar isPrototype = require('./_isPrototype'),\n    nativeKeys = require('./_nativeKeys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_isPrototype.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_isPrototype.js                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_nativeKeys.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_nativeKeys.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_overArg.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_overArg.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isArrayLike.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/isArrayLike.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar isFunction = require('./isFunction'),\n    isLength = require('./isLength');\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_createBaseEach.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_createBaseEach.js                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar isArrayLike = require('./isArrayLike');\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_castFunction.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_castFunction.js                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"zipObject.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/zipObject.js                            //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar assignValue = require('./_assignValue'),\n    baseZipObject = require('./_baseZipObject');\n\n/**\n * This method is like `_.fromPairs` except that it accepts two arrays,\n * one of property identifiers and one of corresponding values.\n *\n * @static\n * @memberOf _\n * @since 0.4.0\n * @category Array\n * @param {Array} [props=[]] The property identifiers.\n * @param {Array} [values=[]] The property values.\n * @returns {Object} Returns the new object.\n * @example\n *\n * _.zipObject(['a', 'b'], [1, 2]);\n * // => { 'a': 1, 'b': 2 }\n */\nfunction zipObject(props, values) {\n  return baseZipObject(props || [], values || [], assignValue);\n}\n\nmodule.exports = zipObject;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_assignValue.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_assignValue.js                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseAssignValue.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseAssignValue.js                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar defineProperty = require('./_defineProperty');\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"eq.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/eq.js                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseZipObject.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseZipObject.js                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * This base implementation of `_.zipObject` which assigns values using `assignFunc`.\n *\n * @private\n * @param {Array} props The property identifiers.\n * @param {Array} values The property values.\n * @param {Function} assignFunc The function to assign values.\n * @returns {Object} Returns the new object.\n */\nfunction baseZipObject(props, values, assignFunc) {\n  var index = -1,\n      length = props.length,\n      valsLength = values.length,\n      result = {};\n\n  while (++index < length) {\n    var value = index < valsLength ? values[index] : undefined;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\n\nmodule.exports = baseZipObject;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"defaults.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/defaults.js                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar apply = require('./_apply'),\n    assignInDefaults = require('./_assignInDefaults'),\n    assignInWith = require('./assignInWith'),\n    baseRest = require('./_baseRest');\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(args) {\n  args.push(undefined, assignInDefaults);\n  return apply(assignInWith, undefined, args);\n});\n\nmodule.exports = defaults;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_assignInDefaults.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_assignInDefaults.js                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar eq = require('./eq');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used by `_.defaults` to customize its `_.assignIn` use.\n *\n * @private\n * @param {*} objValue The destination value.\n * @param {*} srcValue The source value.\n * @param {string} key The key of the property to assign.\n * @param {Object} object The parent object of `objValue`.\n * @returns {*} Returns the value to assign.\n */\nfunction assignInDefaults(objValue, srcValue, key, object) {\n  if (objValue === undefined ||\n      (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n    return srcValue;\n  }\n  return objValue;\n}\n\nmodule.exports = assignInDefaults;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"assignInWith.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/assignInWith.js                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar copyObject = require('./_copyObject'),\n    createAssigner = require('./_createAssigner'),\n    keysIn = require('./keysIn');\n\n/**\n * This method is like `_.assignIn` except that it accepts `customizer`\n * which is invoked to produce the assigned values. If `customizer` returns\n * `undefined`, assignment is handled by the method instead. The `customizer`\n * is invoked with five arguments: (objValue, srcValue, key, object, source).\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias extendWith\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} sources The source objects.\n * @param {Function} [customizer] The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @see _.assignWith\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   return _.isUndefined(objValue) ? srcValue : objValue;\n * }\n *\n * var defaults = _.partialRight(_.assignInWith, customizer);\n *\n * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar assignInWith = createAssigner(function(object, source, srcIndex, customizer) {\n  copyObject(source, keysIn(source), object, customizer);\n});\n\nmodule.exports = assignInWith;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_copyObject.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_copyObject.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar assignValue = require('./_assignValue'),\n    baseAssignValue = require('./_baseAssignValue');\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_createAssigner.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_createAssigner.js                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_isIterateeCall.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_isIterateeCall.js                      //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar eq = require('./eq'),\n    isArrayLike = require('./isArrayLike'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject');\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"keysIn.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/keysIn.js                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeysIn = require('./_baseKeysIn'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_baseKeysIn.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_baseKeysIn.js                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar isObject = require('./isObject'),\n    isPrototype = require('./_isPrototype'),\n    nativeKeysIn = require('./_nativeKeysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"_nativeKeysIn.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/jagi_astronomy-softremove-behavior/node_modules/lodash/_nativeKeysIn.js                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/jagi:astronomy-softremove-behavior/lib/main.js\");\n\n/* Exports */\nPackage._define(\"jagi:astronomy-softremove-behavior\", exports);\n\n})();\n","servePath":"/packages/jagi_astronomy-softremove-behavior.js","sourceMap":{"version":3,"sources":["packages/jagi:astronomy-softremove-behavior/lib/main.js","packages/jagi:astronomy-softremove-behavior/lib/behavior/behavior.js","packages/jagi:astronomy-softremove-behavior/lib/class_events/beforeFind.js","packages/jagi:astronomy-softremove-behavior/lib/class_prototype_methods/softRemove.js","packages/jagi:astronomy-softremove-behavior/lib/class_prototype_methods/softRestore.js","packages/jagi:astronomy-softremove-behavior/lib/meteor_methods/softRemove.js","packages/jagi:astronomy-softremove-behavior/lib/meteor_methods/softRestore.js","packages/jagi:astronomy-softremove-behavior/lib/utils/classSoftRemove.js","packages/jagi:astronomy-softremove-behavior/lib/utils/classSoftRestore.js","packages/jagi:astronomy-softremove-behavior/lib/utils/documentSoftRemove.js","packages/jagi:astronomy-softremove-behavior/lib/utils/documentSoftRestore.js","packages/jagi:astronomy-softremove-behavior/lib/utils/triggerAfterSoftRemove.js","packages/jagi:astronomy-softremove-behavior/lib/utils/triggerAfterSoftRestore.js","packages/jagi:astronomy-softremove-behavior/lib/utils/triggerBeforeSoftRemove.js","packages/jagi:astronomy-softremove-behavior/lib/utils/triggerBeforeSoftRestore.js"],"names":["module","watch","require","module1","_bind","v","_forEach","_zipObject","Module","Behavior","Event","beforeFind","softRemove","softRestore","meteorSoftRemove","meteorSoftRestore","hasMeteorMethod","modules","storage","utils","create","name","options","removedFieldName","hasRemovedAtField","removedAtFieldName","createClassDefinition","behavior","definition","fields","events","helpers","type","Boolean","Date","optional","apply","Class","Collection","getCollection","connection","_connection","meteorMethods","meteorMethod","methodName","methods","extend","e","doc","currentTarget","constructor","selector","$ne","exportDefault","Match","documentSoftRemove","isRemote","callMeteorMethod","args","callback","arguments","length","test","Function","simulation","methodArgs","className","getName","_id","result","err","trusted","undefined","documentSoftRestore","classSoftRemove","classSoftRestore","AstroClass","throwIfSelectorIsNotId","classRemove","Meteor","isServer","get","docs","find","forEach","classRestore","disableEvents","_defaults","triggerBeforeSoftRemove","triggerAfterSoftRemove","getModifier","isNew","isSecured","Error","modifier","$set","getBehavior","_collection","update","triggerBeforeSoftRestore","triggerAfterSoftRestore","$unset","dispatchEvent","propagates","cancelable","eventName"],"mappings":"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","file":"/packages/jagi_astronomy-softremove-behavior.js","sourcesContent":["import \"./behavior/behavior.js\";\n","import _bind from \"lodash/bind\";\nimport _forEach from \"lodash/forEach\";\nimport _zipObject from \"lodash/zipObject\";\nimport { Module, Behavior, Event } from \"meteor/jagi:astronomy\";\nimport beforeFind from \"../class_events/beforeFind\";\nimport softRemove from \"../class_prototype_methods/softRemove\";\nimport softRestore from \"../class_prototype_methods/softRestore\";\nimport meteorSoftRemove from \"../meteor_methods/softRemove\";\nimport meteorSoftRestore from \"../meteor_methods/softRestore\";\nconst hasMeteorMethod = Module.modules.storage.utils.hasMeteorMethod;\n\nBehavior.create({\n  name: \"softremove\",\n  options: {\n    removedFieldName: \"removed\",\n    hasRemovedAtField: true,\n    removedAtFieldName: \"removedAt\"\n  },\n  createClassDefinition() {\n    const behavior = this;\n\n    const definition = {\n      fields: {},\n      events: {\n        beforeFind: _bind(beforeFind, behavior)\n      },\n      // Fix for Astronomy 2.2.4 where I've changed name of the \"methods\" module\n      // to \"helpers\" module. I shouldn't do that even when changing property\n      // name in schema.\n      helpers: {\n        softRemove,\n        softRestore\n      }\n    };\n\n    // Add a field storing a removal flag.\n    definition.fields[behavior.options.removedFieldName] = {\n      type: Boolean,\n      default: false\n    };\n\n    if (behavior.options.hasRemovedAtField) {\n      // Add a field storing a removal date.\n      definition.fields[behavior.options.removedAtFieldName] = {\n        type: Date,\n        optional: true\n      };\n    }\n\n    return definition;\n  },\n  apply(Class) {\n    const Collection = Class.getCollection();\n\n    // If it's a remote collection then we register methods on the connection\n    // object of the collection.\n    let connection = Collection._connection;\n    if (connection) {\n      // Prepare meteor methods to be added.\n      let meteorMethods = {\n        \"/Astronomy/softRemove\": meteorSoftRemove,\n        \"/Astronomy/softRestore\": meteorSoftRestore\n      };\n      _forEach(meteorMethods, (meteorMethod, methodName) => {\n        if (!hasMeteorMethod(connection, methodName)) {\n          // Add meteor method.\n          connection.methods(_zipObject([methodName], [meteorMethod]));\n        }\n      });\n    }\n\n    Class.extend(this.createClassDefinition(), [\n      \"fields\",\n      \"events\",\n      \"helpers\",\n      \"methods\"\n    ]);\n  }\n});\n","const beforeFind = function(e) {\n  const doc = e.currentTarget;\n  const Class = doc.constructor;\n  const selector = e.selector;\n\n  selector[this.options.removedFieldName] = { $ne: true };\n};\n\nexport default beforeFind;\n","import { Match } from \"meteor/check\";\nimport { Module } from \"meteor/jagi:astronomy\";\nimport documentSoftRemove from \"../utils/documentSoftRemove\";\nconst isRemote = Module.modules.storage.utils.isRemote;\nconst callMeteorMethod = Module.modules.storage.utils.callMeteorMethod;\n\nconst softRemove = function(args = {}, callback) {\n  let doc = this;\n  let Class = doc.constructor;\n\n  // If the first argument is callback function then reassign values.\n  if (arguments.length === 1 && Match.test(args, Function)) {\n    callback = args;\n    args = {};\n  }\n  // Get variables from the first argument.\n  let { simulation = true } = args;\n\n  // If we are dealing with a remote collection and we are not on the server.\n  if (isRemote(Class)) {\n    // Prepare meteor method name to be called.\n    let methodName = \"/Astronomy/softRemove\";\n    // Prepare arguments for the meteor method.\n    let methodArgs = {\n      className: Class.getName(),\n      selector: {\n        _id: doc._id\n      },\n      simulation\n    };\n\n    try {\n      // Run meteor method.\n      let result = callMeteorMethod(Class, methodName, [methodArgs], callback);\n      // Return result of the meteor method call.\n      return result;\n    } catch (err) {\n      // Catch stub exceptions.\n      if (callback) {\n        callback(err);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  // If we can just remove a document without calling the meteor method. We may\n  // be on the server or the collection may be local.\n  try {\n    // Prepare arguments.\n    let methodArgs = {\n      doc,\n      simulation,\n      trusted: true\n    };\n    let result = documentSoftRemove(methodArgs);\n    if (callback) {\n      callback(undefined, result);\n    }\n    return result;\n  } catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n    throw err;\n  }\n};\n\nexport default softRemove;\n","import { Match } from \"meteor/check\";\nimport { Module } from \"meteor/jagi:astronomy\";\nimport documentSoftRestore from \"../utils/documentSoftRestore\";\nconst isRemote = Module.modules.storage.utils.isRemote;\nconst callMeteorMethod = Module.modules.storage.utils.callMeteorMethod;\n\nconst softRestore = function(args = {}, callback) {\n  let doc = this;\n  let Class = doc.constructor;\n\n  // If the first argument is callback function then reassign values.\n  if (arguments.length === 1 && Match.test(args, Function)) {\n    callback = args;\n    args = {};\n  }\n  // Get variables from the first argument.\n  let { simulation = true } = args;\n\n  // If we are dealing with a remote collection and we are not on the server.\n  if (isRemote(Class)) {\n    // Prepare meteor method name to be called.\n    let methodName = \"/Astronomy/softRestore\";\n    // Prepare arguments for the meteor method.\n    let methodArgs = {\n      className: Class.getName(),\n      selector: {\n        _id: doc._id\n      },\n      simulation\n    };\n\n    try {\n      // Run meteor method.\n      let result = callMeteorMethod(Class, methodName, [methodArgs], callback);\n      // Return result of the meteor method call.\n      return result;\n    } catch (err) {\n      // Catch stub exceptions.\n      if (callback) {\n        callback(err);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  // If we can just remove a document without calling the meteor method. We may\n  // be on the server or the collection may be local.\n  try {\n    // Prepare arguments.\n    let methodArgs = {\n      doc,\n      simulation,\n      trusted: true\n    };\n    let result = documentSoftRestore(methodArgs);\n    if (callback) {\n      callback(undefined, result);\n    }\n    return result;\n  } catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n    throw err;\n  }\n};\n\nexport default softRestore;\n","import classSoftRemove from \"../utils/classSoftRemove\";\n\nconst softRemove = function(args) {\n  return classSoftRemove(args);\n};\n\nexport default softRemove;\n","import classSoftRestore from \"../utils/classSoftRestore\";\n\nconst softRestore = function(args) {\n  return classSoftRestore(args);\n};\n\nexport default softRestore;\n","import { Class as AstroClass, Module } from \"meteor/jagi:astronomy\";\nimport documentSoftRemove from \"./documentSoftRemove\";\nconst throwIfSelectorIsNotId =\n  Module.modules.storage.utils.throwIfSelectorIsNotId;\n\nconst classRemove = function(args = {}) {\n  let { className, selector, simulation = true, trusted = false } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  // Throw exception if we are trying to perform an operation on more than one\n  // document at once and it's not trusted call.\n  if (!trusted) {\n    throwIfSelectorIsNotId(selector, \"softRemove\");\n  }\n\n  let Class = AstroClass.get(className);\n  // Get all documents matching selector.\n  let docs = Class.find(selector);\n  // Prepare result of the method execution.\n  let result = 0;\n\n  docs.forEach(doc => {\n    // Update a document.\n    result += documentSoftRemove({\n      doc,\n      simulation,\n      trusted\n    });\n  });\n\n  return result;\n};\n\nexport default classRemove;\n","import { Class as AstroClass, Module } from \"meteor/jagi:astronomy\";\nimport documentSoftRestore from \"./documentSoftRestore\";\nconst throwIfSelectorIsNotId =\n  Module.modules.storage.utils.throwIfSelectorIsNotId;\n\nconst classRestore = function(args = {}) {\n  let { className, selector, simulation = true, trusted = false } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  // Throw exception if we are trying to perform an operation on more than one\n  // document at once and it's not trusted call.\n  if (!trusted) {\n    throwIfSelectorIsNotId(selector, \"softRestore\");\n  }\n\n  let Class = AstroClass.get(className);\n  // Get all documents matching selector.\n  let docs = Class.find(selector, {\n    disableEvents: true\n  });\n  // Prepare result of the method execution.\n  let result = 0;\n\n  docs.forEach(doc => {\n    // Update a document.\n    result += documentSoftRestore({\n      doc,\n      simulation,\n      trusted\n    });\n  });\n\n  return result;\n};\n\nexport default classRestore;\n","import _defaults from \"lodash/defaults\";\nimport triggerBeforeSoftRemove from \"./triggerBeforeSoftRemove\";\nimport triggerAfterSoftRemove from \"./triggerAfterSoftRemove\";\nimport { Module } from \"meteor/jagi:astronomy\";\n\nconst getModifier = Module.modules.storage.utils.getModifier;\n\nconst documentSoftRemove = function(args = {}) {\n  const { doc, simulation = true, trusted = false } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  const Class = doc.constructor;\n  const Collection = Class.getCollection();\n\n  // Remove only when document has the \"_id\" field (it's persisted).\n  if (Class.isNew(doc) || !doc._id) {\n    return 0;\n  }\n\n  // Check if a class is secured.\n  if (Class.isSecured(\"softRemove\") && Meteor.isServer && !trusted) {\n    throw new Meteor.Error(403, \"Soft removing from the client is not allowed\");\n  }\n\n  // Trigger before events.\n  triggerBeforeSoftRemove(doc, trusted);\n\n  // Prepare selector.\n  const selector = {\n    _id: doc._id\n  };\n  // Prepare modifier.\n  const modifier = _defaults(\n    getModifier({\n      doc\n    }),\n    {\n      $set: {}\n    }\n  );\n  const behavior = Class.getBehavior(\"softremove\")[0];\n  modifier.$set[behavior.options.removedFieldName] = true;\n  if (behavior.options.hasRemovedAtField) {\n    modifier.$set[behavior.options.removedAtFieldName] = new Date();\n  }\n  // Remove a document.\n  const result = Collection._collection.update(selector, modifier);\n\n  // Trigger after events.\n  triggerAfterSoftRemove(doc, trusted);\n\n  return result;\n};\n\nexport default documentSoftRemove;\n","import triggerBeforeSoftRestore from \"./triggerBeforeSoftRestore\";\nimport triggerAfterSoftRestore from \"./triggerAfterSoftRestore\";\n\nconst documentSoftRestore = function(args = {}) {\n  const { doc, simulation = true, trusted = false } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  const Class = doc.constructor;\n  const Collection = Class.getCollection();\n\n  // Restore only when document has the \"_id\" field (it's persisted).\n  if (Class.isNew(doc) || !doc._id) {\n    return 0;\n  }\n\n  // Check if a class is secured.\n  if (Class.isSecured(\"softRestore\") && Meteor.isServer && !trusted) {\n    throw new Meteor.Error(\n      403,\n      \"Soft restoring from the client is not allowed\"\n    );\n  }\n\n  // Trigger before events.\n  triggerBeforeSoftRestore(doc, trusted);\n\n  // Prepare selector.\n  const selector = {\n    _id: doc._id\n  };\n  // Prepare modifier.\n  const modifier = {\n    $set: {}\n  };\n  const behavior = Class.getBehavior(\"softremove\")[0];\n  modifier.$set[behavior.options.removedFieldName] = false;\n  if (behavior.options.hasRemovedAtField) {\n    modifier.$unset = {\n      [behavior.options.removedAtFieldName]: \"\"\n    };\n  }\n  // Restore a document.\n  const result = Collection._collection.update(selector, modifier);\n\n  // Trigger after events.\n  triggerAfterSoftRestore(doc, trusted);\n\n  return result;\n};\n\nexport default documentSoftRestore;\n","import { Event } from \"meteor/jagi:astronomy\";\n\nconst triggerAfterSoftRemove = function(doc, trusted) {\n  // Trigger the \"afterSoftRemove\" event handlers.\n  doc.dispatchEvent(\n    new Event(\"afterSoftRemove\", {\n      propagates: true,\n      trusted: trusted\n    })\n  );\n};\n\nexport default triggerAfterSoftRemove;\n","import { Event } from \"meteor/jagi:astronomy\";\n\nconst triggerAfterSoftRestore = function(doc, trusted) {\n  // Trigger the \"afterSoftRestore\" event handlers.\n  doc.dispatchEvent(\n    new Event(\"afterSoftRestore\", {\n      propagates: true,\n      trusted: trusted\n    })\n  );\n};\n\nexport default triggerAfterSoftRestore;\n","import { Event } from \"meteor/jagi:astronomy\";\n\nconst triggerBeforeSoftRemove = function(doc, trusted) {\n  // Trigger the \"beforeSoftRemove\" event handlers.\n  if (\n    !doc.dispatchEvent(\n      new Event(\"beforeSoftRemove\", {\n        cancelable: true,\n        propagates: true,\n        trusted: trusted\n      })\n    )\n  ) {\n    // If an event was prevented, then we stop here.\n    throw new Meteor.Error(\"prevented\", \"Operation prevented\", {\n      eventName: \"beforeSoftRemove\"\n    });\n  }\n};\n\nexport default triggerBeforeSoftRemove;\n","import { Event } from \"meteor/jagi:astronomy\";\n\nconst triggerBeforeSoftRestore = function(doc, trusted) {\n  // Trigger the \"beforeSoftRestore\" event handlers.\n  if (\n    !doc.dispatchEvent(\n      new Event(\"beforeSoftRestore\", {\n        cancelable: true,\n        propagates: true,\n        trusted: trusted\n      })\n    )\n  ) {\n    // If an event was prevented, then we stop here.\n    throw new Meteor.Error(\"prevented\", \"Operation prevented\", {\n      eventName: \"beforeSoftRestore\"\n    });\n  }\n};\n\nexport default triggerBeforeSoftRestore;\n"]}}]