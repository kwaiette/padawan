{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\core\\class.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/core/class.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\core\\class.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","presets":[],"generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\core\\class.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/core/class.js"}},"code":"const module1 = module;\n\nlet _concat;\n\nmodule1.watch(require(\"lodash/concat\"), {\n  default(v) {\n    _concat = v;\n  }\n\n}, 0);\n\nlet _defaults;\n\nmodule1.watch(require(\"lodash/defaults\"), {\n  default(v) {\n    _defaults = v;\n  }\n\n}, 1);\n\nlet _each;\n\nmodule1.watch(require(\"lodash/each\"), {\n  default(v) {\n    _each = v;\n  }\n\n}, 2);\n\nlet _has;\n\nmodule1.watch(require(\"lodash/has\"), {\n  default(v) {\n    _has = v;\n  }\n\n}, 3);\n\nlet _includes;\n\nmodule1.watch(require(\"lodash/includes\"), {\n  default(v) {\n    _includes = v;\n  }\n\n}, 4);\n\nlet _intersection;\n\nmodule1.watch(require(\"lodash/intersection\"), {\n  default(v) {\n    _intersection = v;\n  }\n\n}, 5);\n\nlet _isNumber;\n\nmodule1.watch(require(\"lodash/isNumber\"), {\n  default(v) {\n    _isNumber = v;\n  }\n\n}, 6);\nlet EJSON;\nmodule1.watch(require(\"meteor/ejson\"), {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 7);\nlet config;\nmodule1.watch(require(\"./config\"), {\n  default(v) {\n    config = v;\n  }\n\n}, 8);\nlet throwParseError;\nmodule1.watch(require(\"../modules/core/utils/throw_parse_error\"), {\n  default(v) {\n    throwParseError = v;\n  }\n\n}, 9);\nlet cloneDefinition;\nmodule1.watch(require(\"../modules/core/utils/cloneDefinition\"), {\n  default(v) {\n    cloneDefinition = v;\n  }\n\n}, 10);\nlet castNested;\nmodule1.watch(require(\"../modules/fields/utils/castNested\"), {\n  default(v) {\n    castNested = v;\n  }\n\n}, 11);\nlet Module;\nmodule1.watch(require(\"./module\"), {\n  default(v) {\n    Module = v;\n  }\n\n}, 12);\nlet Event;\nmodule1.watch(require(\"../modules/events/event\"), {\n  default(v) {\n    Event = v;\n  }\n\n}, 13);\nlet Type;\nmodule1.watch(require(\"../modules/fields/type\"), {\n  default(v) {\n    Type = v;\n  }\n\n}, 14);\nlet Validators;\nmodule1.watch(require(\"../modules/validators/validators\"), {\n  default(v) {\n    Validators = v;\n  }\n\n}, 15);\nlet warn;\nmodule1.watch(require(\"../modules/core/utils/warn\"), {\n  default(v) {\n    warn = v;\n  }\n\n}, 16);\n\nlet initClass = function (Class) {\n  // Create and store the schema \"definition\" object in the class constructor.\n  // It's a combination of all parent definitions and a definition that\n  // created this class. It's used to create child classes.\n  Class.definition = {}; // Create and store the \"schema\" object in the class constructor. It's an\n  // object that contains all the data related with a given class. The\n  // \"schema\" object contains \"computed\" data of the schema \"definition\".\n  // Thanks to that, Astronomy does not need to compute data on the fly and\n  // everything works faster.\n\n  Class.schema = {}; // Create empty array for storing child classes.\n\n  Class.children = []; // Init the class schema and schema definition.\n\n  Module.forEach(module => {\n    module.onInitSchema(Class.schema, Class.getName());\n    module.onInitDefinition(Class.definition, Class.getName());\n  }); // We have to call the \"onInitClass\" hooks in the separate loop after\n  // initiation of the schema and schema definition, because some\n  // \"onInitClass\" hooks can execute the \"Class.extend\" method which requires\n  // schema and schama definition to be initalized.\n\n  Module.forEach(module => {\n    module.onInitClass(Class, Class.getName());\n  });\n};\n\nclass Class {\n  constructor(rawDoc = {}, options = {}) {\n    // Set default options.\n    _defaults(options, {\n      // From version 2.3.0, we can turn off setting default values on fetching\n      // so it will not populate fields that were excluded on find.\n      defaults: config.defaults,\n      // We clone values on document construction, but this option is overridden\n      // in the \"find\" method and set to false, so it does not unnecessary clone\n      // clone raw values.\n      clone: true,\n      cast: false\n    });\n\n    const doc = this;\n    const Class = doc.constructor;\n\n    if (!Class.getName()) {\n      throw new Error('Can not create instance of the \"Class\" class');\n    } // If there is the \"_isNew\" property passed to the class constructor, the\n    // we use it to determine if a document is stored in collection. Otherwise\n    // document is a new one.\n\n\n    if (Class.getCollection()) {\n      doc._isNew = _has(rawDoc, \"_isNew\") ? rawDoc._isNew : true;\n    } // Trigger the \"beforeInit\" event handlers.\n\n\n    doc.dispatchEvent(new Event(\"beforeInit\")); // Set values in a document.\n\n    _each(Class.getFieldsNames(), fieldName => {\n      doc.set(fieldName, rawDoc[fieldName], options);\n    }); // Trigger the \"afterInit\" event handlers.\n\n\n    doc.dispatchEvent(new Event(\"afterInit\"));\n  } // Method needed for EJSONification.\n\n\n  typeName() {\n    return \"Astronomy\";\n  }\n\n  toJSONValue(args) {\n    let doc = this;\n    let Class = doc.constructor;\n    let json = {\n      class: Class.getName()\n    }; // Trigger the \"toJSONValue\" event handlers.\n\n    doc.dispatchEvent(new Event(\"toJSONValue\", {\n      json: json\n    }));\n    return json;\n  }\n\n  static getName() {\n    return this.className;\n  }\n\n  static getParent() {\n    if (this.parentClassName) {\n      return this.get(this.parentClassName);\n    }\n  }\n  /**\n   * @param {(Number|Boolean)} depth - The depth to which look for children, or \"true\" to get all children.\n   */\n\n\n  static getChildren(depth = 1) {\n    const classes = [];\n\n    if (!depth) {\n      return classes;\n    }\n\n    classes.push(...this.children);\n\n    if (_isNumber(depth)) {\n      depth--;\n    }\n\n    _each(this.children, Child => {\n      classes.push(...Child.getChildren(depth));\n    });\n\n    return classes;\n  }\n\n  static create(definition) {\n    // Get class name.\n    let className = definition.name; // Warn about class duplicate.\n\n    if (_has(this.classes, className)) {\n      warn(`Duplicate of the \"${className}\" class`);\n    } // Extend the Class class.\n\n\n    let Class = this.classes[className] = class Class extends this {}; // Store the class name in the constructor.\n\n    Class.className = className; // Initialize class.\n\n    initClass(Class); // Extend class with a definition.\n\n    Class.extend(definition); // Register a new type.\n\n    Type.create({\n      name: className,\n      class: Class,\n\n      validate(args) {\n        // Add current class as a param of validator.\n        args.param = Class;\n        Validators.class(args);\n      }\n\n    });\n    return Class;\n  }\n\n  static inherit(definition) {\n    const Parent = this;\n    const className = definition.name; // Warn about class duplicate.\n\n    if (_has(this.classes, className)) {\n      warn(`Duplicate of the \"${className}\" class`);\n    } // Extend the parent class.\n\n\n    const Class = this.classes[className] = class Class extends Parent {}; // Store the class name in the constructor.\n\n    Class.className = className; // Store the parent class name in the constructor.\n\n    Class.parentClassName = Parent.getName(); // Initialize class.\n\n    initClass(Class); // Store child class in the parent class.\n\n    Parent.children.push(Class); // Extend class with the parent class definition.\n\n    Class.extend(Parent.definition); // Extend class with the definition.\n\n    Class.extend(definition); // Register a new type.\n\n    Type.create({\n      name: className,\n      class: Class,\n\n      validate(args) {\n        // Add current class as a param of validator.\n        args.param = Class;\n        Validators.class(args);\n      }\n\n    });\n    return Class;\n  }\n\n  static extend(extendDefinition, onlyModules = []) {\n    if (typeof onlyModules === \"string\") {\n      onlyModules = [onlyModules];\n    }\n\n    if (!Match.test(onlyModules, [String])) {\n      throwParseError([{\n        class: this.getName()\n      }, {\n        method: \"extend\"\n      }, \"The second argument has to be a string or an array of strings\"]);\n    } // Clone definition to not modify the original one.\n\n\n    extendDefinition = cloneDefinition(extendDefinition);\n    Module.forEach(module => {\n      // If the second argument was passed, then we only run module hooks for\n      // modules that were listed in the second argument.\n      if (onlyModules.length > 0 && !_includes(onlyModules, module.name) && _intersection(onlyModules, module.aliases).length === 0) {\n        return;\n      } // Initialize parsed definition.\n\n\n      let parsedDefinition = {};\n      module.onInitDefinition(parsedDefinition, Class.getName()); // Parse the extending definition and put parsed properties in the parsed\n      // definition.\n\n      module.onParseDefinition(parsedDefinition, extendDefinition, this.getName()); // Apply parsed definition.\n\n      module.onApplyDefinition(this, parsedDefinition, this.getName()); // Merge parsed definition with a class definition.\n\n      module.onMergeDefinitions(this.definition, parsedDefinition, this.getName()); // Finalize class creation.\n\n      module.onFinalizeClass(this, this.getName());\n    }); // Extend children.\n\n    const children = this.getChildren();\n\n    _each(children, ChildClass => {\n      ChildClass.extend(extendDefinition, onlyModules);\n    });\n  }\n\n  static get(className) {\n    return this.classes[className];\n  }\n\n  static has(className) {\n    return _has(this.classes, className);\n  }\n\n  static includes(Class) {\n    return _includes(this.classes, Class);\n  }\n\n  static isParentOf(Class) {\n    if (!Class || !Class.prototype) {\n      return false;\n    }\n\n    return this.prototype.isPrototypeOf(Class.prototype);\n  }\n\n  static isChildOf(Class) {\n    if (!Class || !Class.prototype) {\n      return false;\n    }\n\n    return Class.prototype.isPrototypeOf(this.prototype);\n  }\n\n  static isNew(doc, isNew) {\n    if (arguments.length === 2) {\n      doc._isNew = isNew;\n    } else {\n      return doc._isNew;\n    }\n  }\n\n}\n\nClass.classes = {};\nmodule1.exportDefault(Class);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/core/class.js"],"names":["module1","module","_concat","watch","require","default","v","_defaults","_each","_has","_includes","_intersection","_isNumber","EJSON","config","throwParseError","cloneDefinition","castNested","Module","Event","Type","Validators","warn","initClass","Class","definition","schema","children","forEach","onInitSchema","getName","onInitDefinition","onInitClass","constructor","rawDoc","options","defaults","clone","cast","doc","Error","getCollection","_isNew","dispatchEvent","getFieldsNames","fieldName","set","typeName","toJSONValue","args","json","class","className","getParent","parentClassName","get","getChildren","depth","classes","push","Child","create","name","extend","validate","param","inherit","Parent","extendDefinition","onlyModules","Match","test","String","method","length","aliases","parsedDefinition","onParseDefinition","onApplyDefinition","onMergeDefinitions","onFinalizeClass","ChildClass","has","includes","isParentOf","prototype","isPrototypeOf","isChildOf","isNew","arguments","exportDefault"],"mappings":"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","sourcesContent":["import _concat from \"lodash/concat\";\nimport _defaults from \"lodash/defaults\";\nimport _each from \"lodash/each\";\nimport _has from \"lodash/has\";\nimport _includes from \"lodash/includes\";\nimport _intersection from \"lodash/intersection\";\nimport _isNumber from \"lodash/isNumber\";\nimport { EJSON } from \"meteor/ejson\";\nimport config from \"./config\";\nimport throwParseError from \"../modules/core/utils/throw_parse_error\";\nimport cloneDefinition from \"../modules/core/utils/cloneDefinition\";\nimport castNested from \"../modules/fields/utils/castNested\";\nimport Module from \"./module\";\nimport Event from \"../modules/events/event\";\nimport Type from \"../modules/fields/type\";\nimport Validators from \"../modules/validators/validators\";\nimport warn from \"../modules/core/utils/warn\";\n\nlet initClass = function(Class) {\n  // Create and store the schema \"definition\" object in the class constructor.\n  // It's a combination of all parent definitions and a definition that\n  // created this class. It's used to create child classes.\n  Class.definition = {};\n  // Create and store the \"schema\" object in the class constructor. It's an\n  // object that contains all the data related with a given class. The\n  // \"schema\" object contains \"computed\" data of the schema \"definition\".\n  // Thanks to that, Astronomy does not need to compute data on the fly and\n  // everything works faster.\n  Class.schema = {};\n  // Create empty array for storing child classes.\n  Class.children = [];\n  // Init the class schema and schema definition.\n  Module.forEach(module => {\n    module.onInitSchema(Class.schema, Class.getName());\n    module.onInitDefinition(Class.definition, Class.getName());\n  });\n  // We have to call the \"onInitClass\" hooks in the separate loop after\n  // initiation of the schema and schema definition, because some\n  // \"onInitClass\" hooks can execute the \"Class.extend\" method which requires\n  // schema and schama definition to be initalized.\n  Module.forEach(module => {\n    module.onInitClass(Class, Class.getName());\n  });\n};\n\nclass Class {\n  constructor(rawDoc = {}, options = {}) {\n    // Set default options.\n    _defaults(options, {\n      // From version 2.3.0, we can turn off setting default values on fetching\n      // so it will not populate fields that were excluded on find.\n      defaults: config.defaults,\n      // We clone values on document construction, but this option is overridden\n      // in the \"find\" method and set to false, so it does not unnecessary clone\n      // clone raw values.\n      clone: true,\n      cast: false\n    });\n\n    const doc = this;\n    const Class = doc.constructor;\n\n    if (!Class.getName()) {\n      throw new Error('Can not create instance of the \"Class\" class');\n    }\n\n    // If there is the \"_isNew\" property passed to the class constructor, the\n    // we use it to determine if a document is stored in collection. Otherwise\n    // document is a new one.\n    if (Class.getCollection()) {\n      doc._isNew = _has(rawDoc, \"_isNew\") ? rawDoc._isNew : true;\n    }\n\n    // Trigger the \"beforeInit\" event handlers.\n    doc.dispatchEvent(new Event(\"beforeInit\"));\n\n    // Set values in a document.\n    _each(Class.getFieldsNames(), fieldName => {\n      doc.set(fieldName, rawDoc[fieldName], options);\n    });\n\n    // Trigger the \"afterInit\" event handlers.\n    doc.dispatchEvent(new Event(\"afterInit\"));\n  }\n\n  // Method needed for EJSONification.\n  typeName() {\n    return \"Astronomy\";\n  }\n\n  toJSONValue(args) {\n    let doc = this;\n    let Class = doc.constructor;\n\n    let json = {\n      class: Class.getName()\n    };\n\n    // Trigger the \"toJSONValue\" event handlers.\n    doc.dispatchEvent(\n      new Event(\"toJSONValue\", {\n        json: json\n      })\n    );\n\n    return json;\n  }\n\n  static getName() {\n    return this.className;\n  }\n\n  static getParent() {\n    if (this.parentClassName) {\n      return this.get(this.parentClassName);\n    }\n  }\n\n  /**\n   * @param {(Number|Boolean)} depth - The depth to which look for children, or \"true\" to get all children.\n   */\n  static getChildren(depth = 1) {\n    const classes = [];\n    if (!depth) {\n      return classes;\n    }\n    classes.push(...this.children);\n    if (_isNumber(depth)) {\n      depth--;\n    }\n    _each(this.children, Child => {\n      classes.push(...Child.getChildren(depth));\n    });\n    return classes;\n  }\n\n  static create(definition) {\n    // Get class name.\n    let className = definition.name;\n    // Warn about class duplicate.\n    if (_has(this.classes, className)) {\n      warn(`Duplicate of the \"${className}\" class`);\n    }\n    // Extend the Class class.\n    let Class = (this.classes[className] = class Class extends this {});\n    // Store the class name in the constructor.\n    Class.className = className;\n    // Initialize class.\n    initClass(Class);\n    // Extend class with a definition.\n    Class.extend(definition);\n    // Register a new type.\n    Type.create({\n      name: className,\n      class: Class,\n      validate(args) {\n        // Add current class as a param of validator.\n        args.param = Class;\n        Validators.class(args);\n      }\n    });\n\n    return Class;\n  }\n\n  static inherit(definition) {\n    const Parent = this;\n    const className = definition.name;\n    // Warn about class duplicate.\n    if (_has(this.classes, className)) {\n      warn(`Duplicate of the \"${className}\" class`);\n    }\n    // Extend the parent class.\n    const Class = (this.classes[className] = class Class extends Parent {});\n    // Store the class name in the constructor.\n    Class.className = className;\n    // Store the parent class name in the constructor.\n    Class.parentClassName = Parent.getName();\n    // Initialize class.\n    initClass(Class);\n    // Store child class in the parent class.\n    Parent.children.push(Class);\n    // Extend class with the parent class definition.\n    Class.extend(Parent.definition);\n    // Extend class with the definition.\n    Class.extend(definition);\n    // Register a new type.\n    Type.create({\n      name: className,\n      class: Class,\n      validate(args) {\n        // Add current class as a param of validator.\n        args.param = Class;\n        Validators.class(args);\n      }\n    });\n\n    return Class;\n  }\n\n  static extend(extendDefinition, onlyModules = []) {\n    if (typeof onlyModules === \"string\") {\n      onlyModules = [onlyModules];\n    }\n\n    if (!Match.test(onlyModules, [String])) {\n      throwParseError([\n        {\n          class: this.getName()\n        },\n        {\n          method: \"extend\"\n        },\n        \"The second argument has to be a string or an array of strings\"\n      ]);\n    }\n\n    // Clone definition to not modify the original one.\n    extendDefinition = cloneDefinition(extendDefinition);\n\n    Module.forEach(module => {\n      // If the second argument was passed, then we only run module hooks for\n      // modules that were listed in the second argument.\n      if (\n        onlyModules.length > 0 &&\n        !_includes(onlyModules, module.name) &&\n        _intersection(onlyModules, module.aliases).length === 0\n      ) {\n        return;\n      }\n      // Initialize parsed definition.\n      let parsedDefinition = {};\n      module.onInitDefinition(parsedDefinition, Class.getName());\n      // Parse the extending definition and put parsed properties in the parsed\n      // definition.\n      module.onParseDefinition(\n        parsedDefinition,\n        extendDefinition,\n        this.getName()\n      );\n      // Apply parsed definition.\n      module.onApplyDefinition(this, parsedDefinition, this.getName());\n      // Merge parsed definition with a class definition.\n      module.onMergeDefinitions(\n        this.definition,\n        parsedDefinition,\n        this.getName()\n      );\n      // Finalize class creation.\n      module.onFinalizeClass(this, this.getName());\n    });\n\n    // Extend children.\n    const children = this.getChildren();\n    _each(children, ChildClass => {\n      ChildClass.extend(extendDefinition, onlyModules);\n    });\n  }\n\n  static get(className) {\n    return this.classes[className];\n  }\n\n  static has(className) {\n    return _has(this.classes, className);\n  }\n\n  static includes(Class) {\n    return _includes(this.classes, Class);\n  }\n\n  static isParentOf(Class) {\n    if (!Class || !Class.prototype) {\n      return false;\n    }\n    return this.prototype.isPrototypeOf(Class.prototype);\n  }\n\n  static isChildOf(Class) {\n    if (!Class || !Class.prototype) {\n      return false;\n    }\n    return Class.prototype.isPrototypeOf(this.prototype);\n  }\n\n  static isNew(doc, isNew) {\n    if (arguments.length === 2) {\n      doc._isNew = isNew;\n    } else {\n      return doc._isNew;\n    }\n  }\n}\n\nClass.classes = {};\n\nexport default Class;\n"]},"sourceType":"script","hash":"5d57041812d8c9351cb5c2e018e18eeda20a5f34"}
