{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\utils\\class_upsert.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/storage/utils/class_upsert.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\utils\\class_upsert.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","presets":[],"generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\utils\\class_upsert.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/storage/utils/class_upsert.js"}},"code":"let _extend;\n\nmodule.watch(require(\"lodash/extend\"), {\n  default(v) {\n    _extend = v;\n  }\n\n}, 0);\nlet AstroClass;\nmodule.watch(require(\"../../../core/class.js\"), {\n  default(v) {\n    AstroClass = v;\n  }\n\n}, 1);\nlet alreadyInSimulation;\nmodule.watch(require(\"./already_in_simulation.js\"), {\n  default(v) {\n    alreadyInSimulation = v;\n  }\n\n}, 2);\nlet throwIfSelectorIsNotId;\nmodule.watch(require(\"./throw_if_selector_is_not_id.js\"), {\n  default(v) {\n    throwIfSelectorIsNotId = v;\n  }\n\n}, 3);\nlet documentInsert;\nmodule.watch(require(\"./document_insert.js\"), {\n  default(v) {\n    documentInsert = v;\n  }\n\n}, 4);\nlet documentUpdate;\nmodule.watch(require(\"./document_update.js\"), {\n  default(v) {\n    documentUpdate = v;\n  }\n\n}, 5);\nlet applyModifier;\nmodule.watch(require(\"./apply_modifier.js\"), {\n  default(v) {\n    applyModifier = v;\n  }\n\n}, 6);\nlet Minimongo, LocalCollection;\nmodule.watch(require(\"meteor/minimongo\"), {\n  Minimongo(v) {\n    Minimongo = v;\n  },\n\n  LocalCollection(v) {\n    LocalCollection = v;\n  }\n\n}, 7);\n\nfunction classUpsert(args = {}) {\n  const {\n    className,\n    selector,\n    modifier,\n    options,\n    stopOnFirstError,\n    fields,\n    simulation = true,\n    trusted = false\n  } = args; // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n\n  if (!simulation && !Meteor.isServer) {\n    return;\n  } // Throw exception if we are trying to perform an operation on more than one\n  // document at once and it's not trusted call.\n\n\n  if (!trusted && !alreadyInSimulation()) {\n    throwIfSelectorIsNotId(selector, 'upsert');\n  }\n\n  const Class = AstroClass.get(className); // Get all documents matching selector.\n\n  let docs;\n\n  if (options.multi) {\n    docs = Class.find(selector, options);\n  } else {\n    docs = Class.find(selector, _extend(options, {\n      limit: 1\n    }));\n  } // Create a minimongo matcher object to find array indexes on the projection\n  // operator use.\n\n\n  const matcher = new Minimongo.Matcher(selector); // Prepare result of the method execution.\n\n  const result = {\n    numberAffected: 0,\n    insertedId: null\n  };\n\n  if (docs.count() > 0) {\n    docs.forEach(doc => {\n      // Use matcher to find array indexes in a given document that needs updating\n      // on the projection operator use.\n      let queryResult = matcher.documentMatches(doc); // Apply modifier.\n\n      applyModifier({\n        doc,\n        modifier,\n        options: queryResult.arrayIndices ? {\n          arrayIndices: queryResult.arrayIndices\n        } : {}\n      }); // Update a document.\n\n      result.numberAffected += documentUpdate({\n        doc,\n        stopOnFirstError,\n        simulation,\n        fields,\n        trusted\n      });\n    });\n  } else {\n    let doc; // Create a new document from selector.\n\n    if (LocalCollection._createUpsertDocument) {\n      doc = new Class(LocalCollection._createUpsertDocument(selector, modifier));\n    } else if (LocalCollection._removeDollarOperators) {\n      doc = new Class(LocalCollection._removeDollarOperators(selector)); // Apply modifier for the insert operation.\n\n      applyModifier({\n        doc,\n        modifier,\n        options: {\n          isInsert: true\n        }\n      });\n    } // Insert a document.\n\n\n    result.insertedId = documentInsert({\n      doc,\n      stopOnFirstError,\n      simulation,\n      trusted\n    });\n  }\n\n  return result;\n}\n\n;\nmodule.exportDefault(classUpsert);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/storage/utils/class_upsert.js"],"names":["_extend","module","watch","require","default","v","AstroClass","alreadyInSimulation","throwIfSelectorIsNotId","documentInsert","documentUpdate","applyModifier","Minimongo","LocalCollection","classUpsert","args","className","selector","modifier","options","stopOnFirstError","fields","simulation","trusted","Meteor","isServer","Class","get","docs","multi","find","limit","matcher","Matcher","result","numberAffected","insertedId","count","forEach","doc","queryResult","documentMatches","arrayIndices","_createUpsertDocument","_removeDollarOperators","isInsert","exportDefault"],"mappings":"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","sourcesContent":["import _extend from 'lodash/extend';\nimport AstroClass from '../../../core/class.js';\nimport alreadyInSimulation from './already_in_simulation.js';\nimport throwIfSelectorIsNotId from './throw_if_selector_is_not_id.js';\nimport documentInsert from './document_insert.js';\nimport documentUpdate from './document_update.js';\nimport applyModifier from './apply_modifier.js';\nimport { Minimongo, LocalCollection } from 'meteor/minimongo';\n\nfunction classUpsert(args = {}) {\n  const {\n    className,\n    selector,\n    modifier,\n    options,\n    stopOnFirstError,\n    fields,\n    simulation = true,\n    trusted = false,\n  } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  // Throw exception if we are trying to perform an operation on more than one\n  // document at once and it's not trusted call.\n  if (!trusted && !alreadyInSimulation()) {\n    throwIfSelectorIsNotId(selector, 'upsert');\n  }\n\n  const Class = AstroClass.get(className);\n  // Get all documents matching selector.\n  let docs;\n  if (options.multi) {\n    docs = Class.find(selector, options);\n  }\n  else {\n    docs = Class.find(selector, _extend(options, {\n      limit: 1\n    }));\n  }\n\n  // Create a minimongo matcher object to find array indexes on the projection\n  // operator use.\n  const matcher = new Minimongo.Matcher(selector);\n\n  // Prepare result of the method execution.\n  const result = {\n    numberAffected: 0,\n    insertedId: null\n  };\n\n  if (docs.count() > 0) {\n    docs.forEach((doc) => {\n      // Use matcher to find array indexes in a given document that needs updating\n      // on the projection operator use.\n      let queryResult = matcher.documentMatches(doc);\n\n      // Apply modifier.\n      applyModifier({\n        doc,\n        modifier,\n        options: queryResult.arrayIndices ? {\n          arrayIndices: queryResult.arrayIndices\n        } : {}\n      });\n\n      // Update a document.\n      result.numberAffected += documentUpdate({\n        doc,\n        stopOnFirstError,\n        simulation,\n        fields,\n        trusted\n      });\n    });\n  }\n  else {\n    let doc;\n    // Create a new document from selector.\n    if (LocalCollection._createUpsertDocument) {\n      doc = new Class(LocalCollection._createUpsertDocument(selector, modifier));\n    }\n    else if (LocalCollection._removeDollarOperators) {\n      doc = new Class(LocalCollection._removeDollarOperators(selector));\n      // Apply modifier for the insert operation.\n      applyModifier({\n        doc,\n        modifier,\n        options: {\n          isInsert: true\n        }\n      });\n    }\n\n    // Insert a document.\n    result.insertedId = documentInsert({\n      doc,\n      stopOnFirstError,\n      simulation,\n      trusted,\n    });\n  }\n\n  return result;\n};\n\nexport default classUpsert;"]},"sourceType":"script","hash":"5d66aec44eb93f35f378424f8d6750a3d8bbf225"}
