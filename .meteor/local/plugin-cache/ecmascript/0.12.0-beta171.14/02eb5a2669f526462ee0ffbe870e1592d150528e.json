{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\Union.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/fields/Union.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\Union.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","presets":[],"generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\Union.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/fields/Union.js"}},"code":"let _clone;\n\nmodule.watch(require(\"lodash/clone\"), {\n  default(v) {\n    _clone = v;\n  }\n\n}, 0);\n\nlet _some;\n\nmodule.watch(require(\"lodash/some\"), {\n  default(v) {\n    _some = v;\n  }\n\n}, 1);\nlet Type;\nmodule.watch(require(\"./type.js\"), {\n  default(v) {\n    Type = v;\n  }\n\n}, 2);\nlet Validators;\nmodule.watch(require(\"../validators/validators.js\"), {\n  default(v) {\n    Validators = v;\n  }\n\n}, 3);\nlet check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 4);\nconst unionDefinitionPattern = {\n  name: String,\n  types: [Function],\n  cast: Match.Optional(Function)\n};\nconst Union = {\n  create(definition) {\n    check(definition, unionDefinitionPattern); // Create a new Union constructor.\n\n    const Union = function Union(identifier) {\n      return Union[identifier];\n    }; // Copy list of types to the union constructor.\n\n\n    Union.types = _clone(definition.types); // Copy casting function to the union constructor if defined.\n\n    if (typeof definition.cast === 'function') {\n      Union.cast = definition.cast;\n    } // Create type definition for the given enum.\n\n\n    Type.create({\n      name: definition.name,\n      class: Union,\n\n      cast(value) {\n        return Union.cast ? Union.cast(value) : value;\n      },\n\n      validate(args) {\n        const caughtErrors = []; // Check if a value will pass validation executed by any of the union\n        // types.\n\n        if (!_some(Union.types, TypeClass => {\n          const AstroType = Type.find(TypeClass);\n\n          try {\n            AstroType.validate(args);\n            return true;\n          } catch (err) {\n            caughtErrors.push(err);\n            return false;\n          }\n        })) {\n          throw caughtErrors[0];\n        }\n      }\n\n    }); // Store enum in the unions list.\n\n    this.unions[definition.name] = Union;\n    return Union;\n  },\n\n  unions: {}\n};\nmodule.exportDefault(Union);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/fields/Union.js"],"names":["_clone","module","watch","require","default","v","_some","Type","Validators","check","Match","unionDefinitionPattern","name","String","types","Function","cast","Optional","Union","create","definition","identifier","class","value","validate","args","caughtErrors","TypeClass","AstroType","find","err","push","unions","exportDefault"],"mappings":"AAAA,IAAIA,MAAJ;;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACC,UAAQC,CAAR,EAAU;AAACL,aAAOK,CAAP;AAAS;;AAArB,CAArC,EAA4D,CAA5D;;AAA+D,IAAIC,KAAJ;;AAAUL,OAAOC,KAAP,CAAaC,QAAQ,aAAR,CAAb,EAAoC;AAACC,UAAQC,CAAR,EAAU;AAACC,YAAMD,CAAN;AAAQ;;AAApB,CAApC,EAA0D,CAA1D;AAA6D,IAAIE,IAAJ;AAASN,OAAOC,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAACC,UAAQC,CAAR,EAAU;AAACE,WAAKF,CAAL;AAAO;;AAAnB,CAAlC,EAAuD,CAAvD;AAA0D,IAAIG,UAAJ;AAAeP,OAAOC,KAAP,CAAaC,QAAQ,6BAAR,CAAb,EAAoD;AAACC,UAAQC,CAAR,EAAU;AAACG,iBAAWH,CAAX;AAAa;;AAAzB,CAApD,EAA+E,CAA/E;AAAkF,IAAII,KAAJ,EAAUC,KAAV;AAAgBT,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACM,QAAMJ,CAAN,EAAQ;AAACI,YAAMJ,CAAN;AAAQ,GAAlB;;AAAmBK,QAAML,CAAN,EAAQ;AAACK,YAAML,CAAN;AAAQ;;AAApC,CAArC,EAA2E,CAA3E;AAMrU,MAAMM,yBAAyB;AAC7BC,QAAMC,MADuB;AAE7BC,SAAO,CAACC,QAAD,CAFsB;AAG7BC,QAAMN,MAAMO,QAAN,CAAeF,QAAf;AAHuB,CAA/B;AAMA,MAAMG,QAAQ;AACZC,SAAOC,UAAP,EAAmB;AACjBX,UAAMW,UAAN,EAAkBT,sBAAlB,EADiB,CAGjB;;AACA,UAAMO,QAAQ,SAASA,KAAT,CAAeG,UAAf,EAA2B;AACvC,aAAOH,MAAMG,UAAN,CAAP;AACD,KAFD,CAJiB,CAQjB;;;AACAH,UAAMJ,KAAN,GAAcd,OAAOoB,WAAWN,KAAlB,CAAd,CATiB,CAUjB;;AACA,QAAI,OAAOM,WAAWJ,IAAlB,KAA2B,UAA/B,EAA2C;AACzCE,YAAMF,IAAN,GAAaI,WAAWJ,IAAxB;AACD,KAbgB,CAejB;;;AACAT,SAAKY,MAAL,CAAY;AACVP,YAAMQ,WAAWR,IADP;AAEVU,aAAOJ,KAFG;;AAGVF,WAAKO,KAAL,EAAY;AACV,eAAOL,MAAMF,IAAN,GAAaE,MAAMF,IAAN,CAAWO,KAAX,CAAb,GAAiCA,KAAxC;AACD,OALS;;AAMVC,eAASC,IAAT,EAAe;AACb,cAAMC,eAAe,EAArB,CADa,CAEb;AACA;;AACA,YAAI,CAACpB,MAAMY,MAAMJ,KAAZ,EAAoBa,SAAD,IAAe;AACrC,gBAAMC,YAAYrB,KAAKsB,IAAL,CAAUF,SAAV,CAAlB;;AACA,cAAI;AACFC,sBAAUJ,QAAV,CAAmBC,IAAnB;AACA,mBAAO,IAAP;AACD,WAHD,CAIA,OAAOK,GAAP,EAAY;AACVJ,yBAAaK,IAAb,CAAkBD,GAAlB;AACA,mBAAO,KAAP;AACD;AACF,SAVI,CAAL,EAUI;AACF,gBAAMJ,aAAa,CAAb,CAAN;AACD;AACF;;AAvBS,KAAZ,EAhBiB,CAyCjB;;AACA,SAAKM,MAAL,CAAYZ,WAAWR,IAAvB,IAA+BM,KAA/B;AAEA,WAAOA,KAAP;AACD,GA9CW;;AA+CZc,UAAQ;AA/CI,CAAd;AAZA/B,OAAOgC,aAAP,CA8Def,KA9Df","sourcesContent":["import _clone from 'lodash/clone';\nimport _some from 'lodash/some';\nimport Type from './type.js';\nimport Validators from '../validators/validators.js';\nimport { check, Match } from 'meteor/check';\n\nconst unionDefinitionPattern = {\n  name: String,\n  types: [Function],\n  cast: Match.Optional(Function)\n};\n\nconst Union = {\n  create(definition) {\n    check(definition, unionDefinitionPattern);\n\n    // Create a new Union constructor.\n    const Union = function Union(identifier) {\n      return Union[identifier];\n    };\n\n    // Copy list of types to the union constructor.\n    Union.types = _clone(definition.types);\n    // Copy casting function to the union constructor if defined.\n    if (typeof definition.cast === 'function') {\n      Union.cast = definition.cast;\n    }\n\n    // Create type definition for the given enum.\n    Type.create({\n      name: definition.name,\n      class: Union,\n      cast(value) {\n        return Union.cast ? Union.cast(value) : value;\n      },\n      validate(args) {\n        const caughtErrors = [];\n        // Check if a value will pass validation executed by any of the union\n        // types.\n        if (!_some(Union.types, (TypeClass) => {\n          const AstroType = Type.find(TypeClass);\n          try {\n            AstroType.validate(args);\n            return true;\n          }\n          catch (err) {\n            caughtErrors.push(err);\n            return false;\n          }\n        })) {\n          throw caughtErrors[0];\n        }\n      }\n    });\n    // Store enum in the unions list.\n    this.unions[definition.name] = Union;\n\n    return Union;\n  },\n  unions: {}\n};\n\nexport default Union;"]},"sourceType":"script","hash":"02eb5a2669f526462ee0ffbe870e1592d150528e"}
