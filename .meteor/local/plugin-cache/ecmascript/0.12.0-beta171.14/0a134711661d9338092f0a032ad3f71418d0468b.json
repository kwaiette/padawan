{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\hooks\\apply_definition.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/fields/hooks/apply_definition.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\hooks\\apply_definition.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\hooks\\apply_definition.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/fields/hooks/apply_definition.js"}},"code":"let _each;\n\nmodule.watch(require(\"lodash/each\"), {\n  default(v) {\n    _each = v;\n  }\n\n}, 0);\n\nlet _extend;\n\nmodule.watch(require(\"lodash/extend\"), {\n  default(v) {\n    _extend = v;\n  }\n\n}, 1);\nlet throwParseError;\nmodule.watch(require(\"../../core/utils/throw_parse_error.js\"), {\n  default(v) {\n    throwParseError = v;\n  }\n\n}, 2);\nlet Type;\nmodule.watch(require(\"../type.js\"), {\n  default(v) {\n    Type = v;\n  }\n\n}, 3);\nlet AstroClass;\nmodule.watch(require(\"../../../core/class.js\"), {\n  default(v) {\n    AstroClass = v;\n  }\n\n}, 4);\nlet ScalarField;\nmodule.watch(require(\"../ScalarField\"), {\n  default(v) {\n    ScalarField = v;\n  }\n\n}, 5);\nlet ObjectField;\nmodule.watch(require(\"../ObjectField\"), {\n  default(v) {\n    ObjectField = v;\n  }\n\n}, 6);\nlet ListField;\nmodule.watch(require(\"../ListField\"), {\n  default(v) {\n    ListField = v;\n  }\n\n}, 7);\n\nfunction checkTypeExistence(type, className, fieldName) {\n  if (!type) {\n    throwParseError([{\n      'class': className\n    }, {\n      'property': 'fields'\n    }, {\n      'field': fieldName\n    }, 'Type does not exist']);\n  }\n}\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n  _each(parsedDefinition.fields, function (fieldDefinition, fieldName) {\n    // Prepare field variable.\n    let field; // List field.\n\n    if (Match.test(fieldDefinition.type, Array)) {\n      let type = Type.find(fieldDefinition.type[0]);\n      checkTypeExistence(type, className, fieldDefinition.name);\n\n      if (AstroClass.isParentOf(type.class)) {\n        field = new ListField(_extend({}, fieldDefinition, {\n          type: type\n        }));\n      } else {\n        field = new ListField(_extend({}, fieldDefinition, {\n          type: type\n        }));\n      }\n    } // Scalar or object field.\n    else {\n        let type = Type.find(fieldDefinition.type);\n        checkTypeExistence(type, className, fieldDefinition.name);\n\n        if (AstroClass.isParentOf(type.class)) {\n          field = new ObjectField(_extend({}, fieldDefinition, {\n            type: type\n          }));\n        } else {\n          field = new ScalarField(_extend({}, fieldDefinition, {\n            type: type\n          }));\n        }\n      } // Add a field object to the fields list.\n\n\n    Class.schema.fields[fieldName] = field;\n    Class.schema.fieldsNames.push(fieldName);\n  });\n}\n\nmodule.exportDefault(onApplyDefinition);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/fields/hooks/apply_definition.js"],"names":["_each","module","watch","require","default","v","_extend","throwParseError","Type","AstroClass","ScalarField","ObjectField","ListField","checkTypeExistence","type","className","fieldName","onApplyDefinition","Class","parsedDefinition","fields","fieldDefinition","field","Match","test","Array","find","name","isParentOf","class","schema","fieldsNames","push","exportDefault"],"mappings":"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","sourcesContent":["import _each from 'lodash/each';\nimport _extend from 'lodash/extend';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport Type from '../type.js';\nimport AstroClass from '../../../core/class.js';\nimport ScalarField from '../ScalarField';\nimport ObjectField from '../ObjectField';\nimport ListField from '../ListField';\n\nfunction checkTypeExistence(type, className, fieldName) {\n  if (!type) {\n    throwParseError([{\n        'class': className\n      }, {\n        'property': 'fields'\n      }, {\n        'field': fieldName\n      },\n      'Type does not exist'\n    ]);\n  }\n}\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n  _each(parsedDefinition.fields, function(fieldDefinition, fieldName) {\n    // Prepare field variable.\n    let field;\n    // List field.\n    if (Match.test(fieldDefinition.type, Array)) {\n      let type = Type.find(fieldDefinition.type[0]);\n      checkTypeExistence(type, className, fieldDefinition.name);\n      if (AstroClass.isParentOf(type.class)) {\n        field = new ListField(\n          _extend({}, fieldDefinition, {\n            type: type\n          })\n        );\n      }\n      else {\n        field = new ListField(\n          _extend({}, fieldDefinition, {\n            type: type\n          })\n        );\n      }\n    }\n    // Scalar or object field.\n    else {\n      let type = Type.find(fieldDefinition.type);\n      checkTypeExistence(type, className, fieldDefinition.name);\n      if (AstroClass.isParentOf(type.class)) {\n        field = new ObjectField(\n          _extend({}, fieldDefinition, {\n            type: type\n          })\n        );\n      }\n      else {\n        field = new ScalarField(\n          _extend({}, fieldDefinition, {\n            type: type\n          })\n        );\n      }\n    }\n\n    // Add a field object to the fields list.\n    Class.schema.fields[fieldName] = field;\n    Class.schema.fieldsNames.push(fieldName);\n  });\n}\n\nexport default onApplyDefinition;"]},"sourceType":"script","hash":"0a134711661d9338092f0a032ad3f71418d0468b"}
