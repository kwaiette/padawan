{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\utils\\getModified.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/storage/utils/getModified.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\utils\\getModified.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\utils\\getModified.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/storage/utils/getModified.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\nconst module1 = module;\n\nlet _each;\n\nmodule1.watch(require(\"lodash/each\"), {\n  default(v) {\n    _each = v;\n  }\n\n}, 0);\n\nlet _isPlainObject;\n\nmodule1.watch(require(\"lodash/isPlainObject\"), {\n  default(v) {\n    _isPlainObject = v;\n  }\n\n}, 1);\n\nlet _range;\n\nmodule1.watch(require(\"lodash/range\"), {\n  default(v) {\n    _range = v;\n  }\n\n}, 2);\nlet EJSON;\nmodule1.watch(require(\"meteor/ejson\"), {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 3);\nlet throwParseError;\nmodule1.watch(require(\"../../core/utils/throw_parse_error.js\"), {\n  default(v) {\n    throwParseError = v;\n  }\n\n}, 4);\nlet rawMany;\nmodule1.watch(require(\"../../fields/utils/rawMany\"), {\n  default(v) {\n    rawMany = v;\n  }\n\n}, 5);\nlet diff;\nmodule1.watch(require(\"./diff\"), {\n  default(v) {\n    diff = v;\n  }\n\n}, 6);\nconst handlers = {};\n\nhandlers.onDiff = function (_ref) {\n  let {\n    prefix,\n    result\n  } = _ref;\n  result.push(prefix);\n};\n\nhandlers.onObjectDiff = function (_ref2) {\n  let {\n    oldDoc,\n    newDoc,\n    prefix,\n    result\n  } = _ref2;\n  diff((0, _objectSpread2.default)({\n    oldDoc,\n    newDoc,\n    prefix,\n    result\n  }, handlers));\n};\n\nhandlers.onListDiff = function (_ref3) {\n  let {\n    oldList,\n    newList,\n    prefix,\n    result\n  } = _ref3;\n  const maxLength = Math.max(oldList.length, newList.length);\n\n  _each(_range(maxLength), function (index) {\n    const arrayPrefix = \"\".concat(prefix, \".\").concat(index);\n    const oldElement = oldList[index];\n    const newElement = newList[index];\n\n    if (!EJSON.equals(oldElement, newElement)) {\n      result.push(arrayPrefix); // If both array elements are object, then we perform diff between\n      // them.\n\n      if (_isPlainObject(oldElement) && _isPlainObject(newElement)) {\n        // Get a difference between elements.\n        diff((0, _objectSpread2.default)({\n          oldDoc: oldElement,\n          newDoc: newElement,\n          prefix: arrayPrefix,\n          result\n        }, handlers));\n      }\n    }\n  });\n};\n\nfunction getModified() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    doc: newDoc,\n    transient = false,\n    immutable = false,\n    fields\n  } = options;\n  const Class = newDoc.constructor;\n  const opts = {\n    defaults: false\n  };\n  let oldDoc = Class.findOne(newDoc._id, opts);\n\n  if (!oldDoc) {\n    oldDoc = new Class({}, opts);\n  } // If there is no document before modifications that may mean that we are not\n  // subscribed to the publication publishing given document or we modified the\n  // _id of a document.\n\n\n  if (!oldDoc) {\n    throwParseError([{\n      'module': 'storage'\n    }, {\n      'utility': 'getModified'\n    }, \"Can not get a document before modifications. You are not subscribed \" + \"to the publication publishing a \\\"\".concat(Class.getName(), \"\\\" document with \") + \"the id \\\"\".concat(newDoc._id, \"\\\" or you have modified the \\\"_id\\\" field\")]);\n  } // If there are not fields specified, then get all of them.\n\n\n  if (!fields) {\n    fields = Class.getFieldsNames();\n  }\n\n  const result = [];\n  diff((0, _objectSpread2.default)({\n    // Get raw data from the docs.\n    oldDoc: rawMany(oldDoc, fields, {\n      transient,\n      immutable,\n      undefined: false\n    }),\n    newDoc: rawMany(newDoc, fields, {\n      transient,\n      immutable,\n      undefined: false\n    }),\n    result\n  }, handlers));\n  return result;\n}\n\n;\nmodule1.exportDefault(getModified);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/storage/utils/getModified.js"],"names":["module1","module","_each","watch","require","default","v","_isPlainObject","_range","EJSON","throwParseError","rawMany","diff","handlers","onDiff","prefix","result","push","onObjectDiff","oldDoc","newDoc","onListDiff","oldList","newList","maxLength","Math","max","length","index","arrayPrefix","oldElement","newElement","equals","getModified","options","doc","transient","immutable","fields","Class","constructor","opts","defaults","findOne","_id","getName","getFieldsNames","undefined","exportDefault"],"mappings":"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","sourcesContent":["import _each from 'lodash/each';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport _range from 'lodash/range';\nimport { EJSON } from 'meteor/ejson';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport rawMany from '../../fields/utils/rawMany';\nimport diff from './diff';\n\nconst handlers = {};\n\nhandlers.onDiff = function({prefix, result}) {\n  result.push(prefix);\n};\n\nhandlers.onObjectDiff = function({oldDoc, newDoc, prefix, result}) {\n  diff({\n    oldDoc,\n    newDoc,\n    prefix,\n    result,\n    ...handlers\n  });\n};\n\nhandlers.onListDiff = function({oldList, newList, prefix, result}) {\n  const maxLength = Math.max(oldList.length, newList.length);\n  _each(_range(maxLength), function(index) {\n    const arrayPrefix = `${prefix}.${index}`;\n    const oldElement = oldList[index];\n    const newElement = newList[index];\n    if (!EJSON.equals(oldElement, newElement)) {\n      result.push(arrayPrefix);\n      // If both array elements are object, then we perform diff between\n      // them.\n      if (_isPlainObject(oldElement) && _isPlainObject(newElement)) {\n        // Get a difference between elements.\n        diff({\n          oldDoc: oldElement,\n          newDoc: newElement,\n          prefix: arrayPrefix,\n          result,\n          ...handlers\n        });\n      }\n    }\n  });\n};\n\nfunction getModified(options = {}) {\n  let {\n    doc: newDoc,\n    transient = false,\n    immutable = false,\n    fields\n  } = options;\n\n  const Class = newDoc.constructor;\n  const opts = {\n    defaults: false\n  };\n  let oldDoc = Class.findOne(newDoc._id, opts);\n  if (!oldDoc) {\n    oldDoc = new Class({}, opts);\n  }\n  // If there is no document before modifications that may mean that we are not\n  // subscribed to the publication publishing given document or we modified the\n  // _id of a document.\n  if (!oldDoc) {\n    throwParseError([{\n        'module': 'storage'\n      }, {\n        'utility': 'getModified'\n      },\n      `Can not get a document before modifications. You are not subscribed ` +\n      `to the publication publishing a \"${Class.getName()}\" document with ` +\n      `the id \"${newDoc._id}\" or you have modified the \"_id\" field`\n    ]);\n  }\n\n  // If there are not fields specified, then get all of them.\n  if (!fields) {\n    fields = Class.getFieldsNames();\n  }\n\n  const result = [];\n  diff({\n    // Get raw data from the docs.\n    oldDoc: rawMany(oldDoc, fields, {\n      transient,\n      immutable,\n      undefined: false\n    }),\n    newDoc: rawMany(newDoc, fields, {\n      transient,\n      immutable,\n      undefined: false\n    }),\n    result,\n    ...handlers\n  });\n  return result;\n};\n\nexport default getModified;"]},"sourceType":"script","hash":"a87c5ab32356be04aec675dea7648c1346e38397"}
