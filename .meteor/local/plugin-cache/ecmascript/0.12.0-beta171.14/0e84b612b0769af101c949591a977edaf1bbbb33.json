{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\imports\\api\\teams\\teams.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/api/teams/teams.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\imports\\api\\teams\\teams.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\imports\\api\\teams\\teams.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/api/teams/teams.js"}},"code":"module.export({\n  Team: () => Team,\n  TeamIcon: () => TeamIcon\n});\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 1);\nlet Class, Enum;\nmodule.watch(require(\"meteor/jagi:astronomy\"), {\n  Class(v) {\n    Class = v;\n  },\n\n  Enum(v) {\n    Enum = v;\n  }\n\n}, 2);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 3);\nlet User;\nmodule.watch(require(\"../users/users.js\"), {\n  User(v) {\n    User = v;\n  }\n\n}, 4);\nlet Defaults;\nmodule.watch(require(\"/imports/startup/both/defaults.js\"), {\n  Defaults(v) {\n    Defaults = v;\n  }\n\n}, 5);\nlet UserNotify;\nmodule.watch(require(\"/imports/api/user_notify/user_notify.js\"), {\n  UserNotify(v) {\n    UserNotify = v;\n  }\n\n}, 6);\nconst DefaultTeamID = \"NCuypCXN47KrSTeXh\";\nconst TeamIcon = Class.create({\n  name: \"TeamIcon\",\n  fields: {\n    data: {\n      type: String,\n      default: ''\n    },\n    contentType: {\n      type: String,\n      default: 'image/png'\n    }\n  }\n});\nconst Team = Class.create({\n  name: \"Team\",\n  collection: new Mongo.Collection('teams'),\n  fields: {\n    Name: {\n      type: String,\n      default: 'Whoa! The no-name team?'\n    },\n    Description: {\n      type: String,\n      default: 'This team is nondescript.'\n    },\n    Icon64: {\n      type: String,\n      default: ''\n    },\n    IconType: {\n      type: String,\n      defaut: 'image/png',\n      optional: true\n    },\n    Icon: {\n      type: TeamIcon,\n      default: function () {\n        return new TeamIcon();\n      }\n    },\n    Public: {\n      type: Boolean,\n      default: true\n    },\n    Members: {\n      type: [String],\n      default: []\n    },\n    Active: {\n      type: Boolean,\n      default: false\n    },\n    CreatedBy: {\n      type: String,\n      default: function () {\n        return this.userId;\n      }\n    }\n  },\n  indexes: {\n    nameIndex: {\n      fields: {\n        Name: 1\n      },\n      options: {\n        unique: true\n      }\n    }\n  },\n  meteorMethods: {\n    userRequestJoin() {\n      Roles.addUsersToRoles(Meteor.userId(), 'user-join-request', this.Name);\n    },\n\n    adminRequestUserJoin(user) {\n      if (Roles.userIsInRole(Meteor.userId(), 'admin', this.Name) && !Roles.userIsInRole(user, 'member', this.Name)) {\n        Roles.addUsersToRoles(user, 'admin-join-request', this.Name);\n\n        for (let i = 0; i < user.length; i++) {\n          UserNotify.add({\n            userId: user[i],\n            title: 'Teams',\n            body: 'Received join request for team ' + this.Name,\n            action: 'teams:' + this.Name.split(' ').join('-')\n          });\n        }\n      }\n    },\n\n    userAcceptJoin() {\n      if (Roles.userIsInRole(Meteor.userId(), 'admin-join-request', this.Name)) {\n        Roles.removeUsersFromRoles(Meteor.userId(), 'admin-join-request', this.Name);\n        this.addUsers(Meteor.userId());\n      }\n    },\n\n    userDeclineJoin() {\n      if (Roles.userIsInRole(Meteor.userId(), 'admin-join-request', this.Name)) {\n        Roles.removeUsersFromRoles(Meteor.userId(), 'admin-join-request', this.Name);\n      }\n    },\n\n    adminAcceptJoin(userId) {\n      if (Roles.userIsInRole(Meteor.userId(), 'admin', this.Name)) {\n        Roles.removeUsersFromRoles(userId, 'user-join-request', this.Name); //Roles.addUsersToRoles(userId, 'member', this.Name);\n\n        this.addUsers(userId);\n      }\n    },\n\n    adminRejectJoin(userId) {\n      if (Roles.userIsInRole(Meteor.userId(), 'admin', this.Name)) {\n        Roles.removeUsersFromRoles(userId, 'user-join-request', this.Name);\n      }\n    },\n\n    addRole(userId, role) {\n      if (Roles.userIsInRole(Meteor.userId(), 'admin', this.Name)) {\n        Roles.addUsersToRoles(userId, role, this.Name);\n      }\n    },\n\n    removeRole(userId, role) {\n      if (Roles.userIsInRole(Meteor.userId(), 'admin', this.Name)) {\n        Roles.removeUsersFromRoles(userId, role, this.Name);\n      }\n    },\n\n    updateFromObj(updObj) {\n      if (Roles.userIsInRole(Meteor.userId(), 'admin', this.Name)) {\n        for (let fld in updObj) {\n          if (\"Icon64\" !== fld && \"IconType\" !== fld && \"Icon\" !== fld) {\n            this[fld] = updObj[fld];\n          }\n        }\n\n        this.save();\n      }\n    },\n\n    uploadIcon(fileInfo, fileData) {\n      if (Meteor.isServer) {\n        var base64Image = new Buffer(fileData, 'binary').toString('base64');\n        this.Icon64 = base64Image;\n        this.IconType = 'image/png';\n        this.save();\n      }\n    }\n\n  },\n  helpers: {\n    addUsers(users) {\n      if (typeof users === 'string') {\n        users = [users];\n      } //admin list has to be filtered because getUsersInRole includes admin in GLOBAL_GROUP\n\n\n      let groupAdminList = Roles.getUsersInRole('admin', this.Name).fetch().filter(user => {\n        return \"undefined\" !== typeof user.roles && \"undefined\" !== typeof user.roles[this.Name] && user.roles[this.Name].indexOf('admin') > -1;\n      });\n\n      for (let i = 0; i < users.length; i++) {\n        if (this.Members.indexOf(users[i]) === -1) {\n          this.Members.push(users[i]);\n        }\n\n        let currUserRoles = ['member']; //Roles.addUsersToRoles(users[i], 'member', this.Name);\n        //if team doesn't have an admin, the first user added becomes admin\n\n        if (i == 0 && groupAdminList.length == 0) {\n          //Roles.addUsersToRoles(users[i], 'admin', this.Name);\n          currUserRoles.push('admin');\n        } else {\n          //Roles.addUsersToRoles(users[i], Defaults.role.name, this.Name);\n          currUserRoles.push(Defaults.role.name);\n        }\n\n        Roles.addUsersToRoles(users[i], currUserRoles, this.Name);\n        /*\n        let u = User.findOne( {_id: users[i]} );\n        if (u && u.teams.indexOf(this.Name) === -1) {\n            u.teams.push(this.Name);\n            u.save();\n        }\n        */\n      }\n\n      this.save();\n    },\n\n    removeUsers(users) {\n      if (typeof users === 'string') {\n        users = [users];\n      }\n\n      for (let i = 0; i < users.length; i++) {}\n    },\n\n    removeUsersFromTeamRoles(users, roles) {\n      if (typeof users === 'string') {\n        users = [users];\n      }\n\n      if (typeof roles === 'string') {\n        roles = [roles];\n      } //if removing the 'member' role from users, completely remove them from all roles and from the group\n\n\n      if (roles.indexOf('member') !== -1) {\n        this.removeUsers(users);\n      }\n\n      for (let i = 0; i < users.length; i++) {}\n    }\n\n  },\n  behaviors: {\n    timestamp: {},\n    softremove: {}\n  },\n  secured: {},\n  events: {\n    afterInit(e) {//\n    },\n\n    beforeSave(e) {\n      console.log(\"before save Team\", e.currentTarget.Name, e.currentTarget.Members);\n    }\n\n  }\n});\nTeam.Default = Team.findOne({\n  _id: DefaultTeamID\n});\n\nif (typeof Team.Default === \"undefined\") {\n  Team.Default = new Team({\n    _id: DefaultTeamID,\n    Name: 'No Team',\n    Active: true\n  });\n\n  if (Meteor.isServer) {\n    Team.Default.CreatedBy = 'kkcDYH3ix4f4Lb5qk'; //console.log(Team.Default);\n    //Team.Default.save();\n  }\n}","map":{"version":3,"sources":["imports/api/teams/teams.js"],"names":["module","export","Team","TeamIcon","Meteor","watch","require","v","Mongo","Class","Enum","check","User","Defaults","UserNotify","DefaultTeamID","create","name","fields","data","type","String","default","contentType","collection","Collection","Name","Description","Icon64","IconType","defaut","optional","Icon","Public","Boolean","Members","Active","CreatedBy","userId","indexes","nameIndex","options","unique","meteorMethods","userRequestJoin","Roles","addUsersToRoles","adminRequestUserJoin","user","userIsInRole","i","length","add","title","body","action","split","join","userAcceptJoin","removeUsersFromRoles","addUsers","userDeclineJoin","adminAcceptJoin","adminRejectJoin","addRole","role","removeRole","updateFromObj","updObj","fld","save","uploadIcon","fileInfo","fileData","isServer","base64Image","Buffer","toString","helpers","users","groupAdminList","getUsersInRole","fetch","filter","roles","indexOf","push","currUserRoles","removeUsers","removeUsersFromTeamRoles","behaviors","timestamp","softremove","secured","events","afterInit","e","beforeSave","console","log","currentTarget","Default","findOne","_id"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { Class, Enum } from 'meteor/jagi:astronomy';\nimport { check } from 'meteor/check';\nimport { User } from '../users/users.js';\nimport { Defaults } from '/imports/startup/both/defaults.js';\nimport { UserNotify } from '/imports/api/user_notify/user_notify.js';\nconst DefaultTeamID = \"NCuypCXN47KrSTeXh\";\n\nconst TeamIcon = Class.create({\n    name: \"TeamIcon\",\n    fields: {\n        data: {\n            type: String,\n            default: ''\n        },\n        contentType: {\n            type: String,\n            default: 'image/png'\n        }\n    }\n});\n\nconst Team = Class.create({\n    name: \"Team\",\n    collection: new Mongo.Collection('teams'),\n    fields: {\n        Name: {\n            type: String,\n            default: 'Whoa! The no-name team?'\n        },\n        Description: {\n        \ttype: String,\n        \tdefault: 'This team is nondescript.'\n        },\n        Icon64: {\n            type: String,\n            default: ''\n        },\n        IconType: {\n            type: String,\n            defaut: 'image/png',\n            optional: true\n        },\n        Icon: {\n            type: TeamIcon,\n            default: function() { return new TeamIcon(); }\n        },\n        Public: {\n            type: Boolean,\n            default: true\n        },\n        Members: {\n            type: [String],\n            default: []\n        },\n        Active: {\n            type: Boolean,\n            default: false\n        },\n        CreatedBy: {\n            type: String,\n            default: function() { return this.userId; }\n        },\n    },\n    indexes: {\n        nameIndex: {\n            fields: {\n                Name: 1\n            },\n            options: {\n                unique: true\n            },\n        }\n    },\n    meteorMethods: {\n        userRequestJoin() {\n            Roles.addUsersToRoles(Meteor.userId(), 'user-join-request', this.Name);\n        },\n        adminRequestUserJoin(user) {\n            if (Roles.userIsInRole(Meteor.userId(), 'admin', this.Name) && !Roles.userIsInRole(user, 'member', this.Name)) {\n                Roles.addUsersToRoles(user, 'admin-join-request', this.Name);\n                for (let i = 0; i < user.length; i++) {\n                    UserNotify.add({\n                        userId: user[i],\n                        title: 'Teams',\n                        body: 'Received join request for team ' + this.Name,\n                        action: 'teams:'+this.Name.split(' ').join('-')\n                    });\n                }\n            }\n        },\n        userAcceptJoin() {\n            if (Roles.userIsInRole(Meteor.userId(), 'admin-join-request', this.Name)) {\n                Roles.removeUsersFromRoles(Meteor.userId(), 'admin-join-request', this.Name);\n                this.addUsers(Meteor.userId());\n            }\n        },\n        userDeclineJoin() {\n            if (Roles.userIsInRole(Meteor.userId(), 'admin-join-request', this.Name)) {\n                Roles.removeUsersFromRoles(Meteor.userId(), 'admin-join-request', this.Name);\n            }\n        },\n        adminAcceptJoin(userId) {\n            if (Roles.userIsInRole(Meteor.userId(), 'admin', this.Name)) {\n                Roles.removeUsersFromRoles(userId, 'user-join-request', this.Name);\n                //Roles.addUsersToRoles(userId, 'member', this.Name);\n                this.addUsers(userId);\n            }\n        },\n        adminRejectJoin(userId) {\n            if (Roles.userIsInRole(Meteor.userId(), 'admin', this.Name)) {\n                Roles.removeUsersFromRoles(userId, 'user-join-request', this.Name);\n            }\n        },\n        addRole(userId, role) {\n            if (Roles.userIsInRole(Meteor.userId(), 'admin', this.Name)) {\n                Roles.addUsersToRoles(userId, role, this.Name);\n            }\n        },\n        removeRole(userId, role) {\n            if (Roles.userIsInRole(Meteor.userId(), 'admin', this.Name)) {\n                Roles.removeUsersFromRoles(userId, role, this.Name);\n            }\n        },\n        updateFromObj(updObj) {\n            if (Roles.userIsInRole(Meteor.userId(), 'admin', this.Name)) {\n                for (let fld in updObj) {\n                    if (\"Icon64\" !== fld && \"IconType\" !== fld && \"Icon\" !== fld) {\n                        this[fld] = updObj[fld];\n                    }\n                }\n                this.save();\n            }\n        },\n        uploadIcon(fileInfo, fileData) {\n            if (Meteor.isServer) {\n                var base64Image = new Buffer(fileData, 'binary').toString('base64');\n                this.Icon64 = base64Image;\n                this.IconType = 'image/png';\n                this.save();\n            }\n        }\n    },\n    helpers: {\n        addUsers(users) {\n            if (typeof users === 'string') {\n                users = [users];\n            }\n\n            //admin list has to be filtered because getUsersInRole includes admin in GLOBAL_GROUP\n            let groupAdminList = Roles.getUsersInRole('admin', this.Name).fetch().filter( (user) => {\n                return (\n                    \"undefined\" !== typeof user.roles &&\n                    \"undefined\" !== typeof user.roles[this.Name] &&\n                    user.roles[this.Name].indexOf('admin') > -1\n                );\n            });\n\n            for (let i = 0; i < users.length; i++) {\n                if (this.Members.indexOf(users[i]) === -1) {\n                    this.Members.push( users[i] );\n                }\n                let currUserRoles = ['member'];\n                //Roles.addUsersToRoles(users[i], 'member', this.Name);\n\n                //if team doesn't have an admin, the first user added becomes admin\n                if (i == 0 && groupAdminList.length == 0) {\n                    //Roles.addUsersToRoles(users[i], 'admin', this.Name);\n                    currUserRoles.push('admin');\n                } else {\n                    //Roles.addUsersToRoles(users[i], Defaults.role.name, this.Name);\n                    currUserRoles.push(Defaults.role.name);\n                }\n                Roles.addUsersToRoles(users[i], currUserRoles, this.Name);\n                /*\n                let u = User.findOne( {_id: users[i]} );\n                if (u && u.teams.indexOf(this.Name) === -1) {\n                    u.teams.push(this.Name);\n                    u.save();\n                }\n                */\n            }\n            this.save();\n        },\n        removeUsers(users) {\n            if (typeof users === 'string') {\n                users = [users];\n            }\n\n            for (let i = 0; i < users.length; i++) {\n            }\n        },\n        removeUsersFromTeamRoles(users, roles) {\n            if (typeof users === 'string') {\n                users = [users];\n            }\n            if (typeof roles === 'string') {\n                roles = [roles];\n            }\n\n            //if removing the 'member' role from users, completely remove them from all roles and from the group\n            if (roles.indexOf('member') !== -1) {\n                this.removeUsers(users)\n            }\n\n            for (let i = 0; i < users.length; i++) {\n            }\n        }\n    },\n    behaviors: {\n        timestamp: {},\n        softremove: {}\n    },\n    secured: {\n    },\n    events: {\n        afterInit(e) {\n            //\n        },\n        beforeSave(e) {\n            console.log(\"before save Team\", e.currentTarget.Name, e.currentTarget.Members);\n        }\n    }\n});\n\nTeam.Default = Team.findOne({_id:DefaultTeamID});\nif (typeof Team.Default === \"undefined\") {\n    Team.Default = new Team({\n        _id:DefaultTeamID,\n        Name: 'No Team',\n        Active: true\n    });\n    if (Meteor.isServer) {\n        Team.Default.CreatedBy = 'kkcDYH3ix4f4Lb5qk';\n        //console.log(Team.Default);\n        //Team.Default.save();\n    }\n}\n\nexport { Team,TeamIcon };\n"]},"sourceType":"script","hash":"0e84b612b0769af101c949591a977edaf1bbbb33"}
