{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\hooks\\apply_definition.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/storage/hooks/apply_definition.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\hooks\\apply_definition.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\hooks\\apply_definition.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/storage/hooks/apply_definition.js"}},"code":"var _each;\n\nmodule.watch(require(\"lodash/each\"), {\n  \"default\": function (v) {\n    _each = v;\n  }\n}, 0);\n\nvar _extend;\n\nmodule.watch(require(\"lodash/extend\"), {\n  \"default\": function (v) {\n    _extend = v;\n  }\n}, 1);\n\nvar _zipObject;\n\nmodule.watch(require(\"lodash/zipObject\"), {\n  \"default\": function (v) {\n    _zipObject = v;\n  }\n}, 2);\nvar resolveValues;\nmodule.watch(require(\"../../fields/utils/resolveValues\"), {\n  \"default\": function (v) {\n    resolveValues = v;\n  }\n}, 3);\nvar hasMeteorMethod;\nmodule.watch(require(\"../utils/has_meteor_method\"), {\n  \"default\": function (v) {\n    hasMeteorMethod = v;\n  }\n}, 4);\nvar find, findOne;\nmodule.watch(require(\"../class_static_methods/find\"), {\n  find: function (v) {\n    find = v;\n  },\n  findOne: function (v) {\n    findOne = v;\n  }\n}, 5);\nvar insert;\nmodule.watch(require(\"../class_static_methods/insert\"), {\n  \"default\": function (v) {\n    insert = v;\n  }\n}, 6);\nvar update;\nmodule.watch(require(\"../class_static_methods/update\"), {\n  \"default\": function (v) {\n    update = v;\n  }\n}, 7);\nvar upsert;\nmodule.watch(require(\"../class_static_methods/upsert\"), {\n  \"default\": function (v) {\n    upsert = v;\n  }\n}, 8);\nvar remove;\nmodule.watch(require(\"../class_static_methods/remove\"), {\n  \"default\": function (v) {\n    remove = v;\n  }\n}, 9);\nvar protoSave;\nmodule.watch(require(\"../class_prototype_methods/save\"), {\n  \"default\": function (v) {\n    protoSave = v;\n  }\n}, 10);\nvar protoRemove;\nmodule.watch(require(\"../class_prototype_methods/remove\"), {\n  \"default\": function (v) {\n    protoRemove = v;\n  }\n}, 11);\nvar protoReload;\nmodule.watch(require(\"../class_prototype_methods/reload\"), {\n  \"default\": function (v) {\n    protoReload = v;\n  }\n}, 12);\nvar protoCopy;\nmodule.watch(require(\"../class_prototype_methods/copy\"), {\n  \"default\": function (v) {\n    protoCopy = v;\n  }\n}, 13);\nvar protoGetModifier;\nmodule.watch(require(\"../class_prototype_methods/getModifier\"), {\n  \"default\": function (v) {\n    protoGetModifier = v;\n  }\n}, 14);\nvar protoGetModified;\nmodule.watch(require(\"../class_prototype_methods/getModified\"), {\n  \"default\": function (v) {\n    protoGetModified = v;\n  }\n}, 15);\nvar protoGetModifiedValues;\nmodule.watch(require(\"../class_prototype_methods/getModifiedValues\"), {\n  \"default\": function (v) {\n    protoGetModifiedValues = v;\n  }\n}, 16);\nvar protoIsModified;\nmodule.watch(require(\"../class_prototype_methods/isModified\"), {\n  \"default\": function (v) {\n    protoIsModified = v;\n  }\n}, 17);\nvar meteorInsert;\nmodule.watch(require(\"../meteor_methods/insert\"), {\n  \"default\": function (v) {\n    meteorInsert = v;\n  }\n}, 18);\nvar meteorUpdate;\nmodule.watch(require(\"../meteor_methods/update\"), {\n  \"default\": function (v) {\n    meteorUpdate = v;\n  }\n}, 19);\nvar meteorUpsert;\nmodule.watch(require(\"../meteor_methods/upsert\"), {\n  \"default\": function (v) {\n    meteorUpsert = v;\n  }\n}, 20);\nvar meteorRemove;\nmodule.watch(require(\"../meteor_methods/remove\"), {\n  \"default\": function (v) {\n    meteorRemove = v;\n  }\n}, 21);\nvar fromJSONValue;\nmodule.watch(require(\"../class_events/fromJSONValue\"), {\n  \"default\": function (v) {\n    fromJSONValue = v;\n  }\n}, 22);\nvar toJSONValue;\nmodule.watch(require(\"../class_events/toJSONValue\"), {\n  \"default\": function (v) {\n    toJSONValue = v;\n  }\n}, 23);\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n  var schema = Class.schema;\n\n  if (parsedDefinition.collection) {\n    var _Collection = schema.collection = parsedDefinition.collection; // Get type of the \"_id\" field.\n\n\n    var id = _Collection._makeNewID();\n\n    var IdType = id.constructor;\n    Class.extend({\n      // Add the \"_id\" field if not already added.\n      fields: {\n        _id: {\n          name: '_id',\n          type: IdType,\n          optional: true\n        }\n      },\n      // Add storage events.\n      events: {\n        toJSONValue: [toJSONValue],\n        fromJSONValue: [fromJSONValue]\n      }\n    }, ['fields', 'events']); // If it's a remote collection then we register methods on the connection\n    // object of the collection.\n\n    var connection = _Collection._connection;\n\n    if (connection) {\n      // Prepare meteor methods to be added.\n      var meteorMethods = {\n        '/Astronomy/insert': meteorInsert,\n        '/Astronomy/update': meteorUpdate,\n        '/Astronomy/upsert': meteorUpsert,\n        '/Astronomy/remove': meteorRemove\n      };\n\n      _each(meteorMethods, function (meteorMethod, methodName) {\n        if (!hasMeteorMethod(connection, methodName)) {\n          // Add meteor method.\n          connection.methods(_zipObject([methodName], [meteorMethod]));\n        }\n      });\n    } // Class static methods.\n\n\n    Class.find = find;\n    Class.findOne = findOne;\n    Class.insert = insert;\n    Class.update = update;\n    Class.upsert = upsert;\n    Class.remove = remove; // Class prototype methods.\n\n    Class.prototype.save = protoSave;\n    Class.prototype.remove = protoRemove;\n    Class.prototype.reload = protoReload;\n    Class.prototype.copy = protoCopy;\n    Class.prototype.getModifier = protoGetModifier;\n    Class.prototype.getModified = protoGetModified;\n    Class.prototype.getModifiedValues = protoGetModifiedValues;\n    Class.prototype.isModified = protoIsModified;\n  } // Apply type field.\n\n\n  if (parsedDefinition.typeField) {\n    var typeField = schema.typeField = parsedDefinition.typeField; // Add the type field if not already added.\n\n    if (!Class.hasField(typeField)) {\n      var _fields;\n\n      Class.extend({\n        fields: (_fields = {}, _fields[typeField] = {\n          type: String,\n          index: 1\n        }, _fields),\n        events: {\n          afterInit: function (e) {\n            var doc = e.currentTarget;\n            var Class = doc.constructor;\n            doc[typeField] = Class.getName();\n          }\n        }\n      }, ['fields', 'events']);\n    }\n\n    if (parsedDefinition.typeField) {\n      schema.typeField = parsedDefinition.typeField;\n    }\n  } // If class has already assigned collection.\n\n\n  var Collection = Class.getCollection();\n\n  if (Collection) {\n    // Apply the \"transform\" property only if it's a function or equal null.\n    if (typeof parsedDefinition.transform === 'function' || parsedDefinition.transform === null) {\n      schema.transform = parsedDefinition.transform;\n    }\n\n    if (parsedDefinition.secured !== undefined) {\n      _extend(schema.secured, parsedDefinition.secured);\n    }\n  }\n}\n\n;\nmodule.exportDefault(onApplyDefinition);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/storage/hooks/apply_definition.js"],"names":["_each","module","watch","require","v","_extend","_zipObject","resolveValues","hasMeteorMethod","find","findOne","insert","update","upsert","remove","protoSave","protoRemove","protoReload","protoCopy","protoGetModifier","protoGetModified","protoGetModifiedValues","protoIsModified","meteorInsert","meteorUpdate","meteorUpsert","meteorRemove","fromJSONValue","toJSONValue","onApplyDefinition","Class","parsedDefinition","className","schema","collection","Collection","id","_makeNewID","IdType","constructor","extend","fields","_id","name","type","optional","events","connection","_connection","meteorMethods","meteorMethod","methodName","methods","prototype","save","reload","copy","getModifier","getModified","getModifiedValues","isModified","typeField","hasField","String","index","afterInit","e","doc","currentTarget","getName","getCollection","transform","secured","undefined","exportDefault"],"mappings":"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","sourcesContent":["import _each from 'lodash/each';\nimport _extend from 'lodash/extend';\nimport _zipObject from 'lodash/zipObject';\n// Utils.\nimport resolveValues from '../../fields/utils/resolveValues';\nimport hasMeteorMethod from '../utils/has_meteor_method';\n// Class static methods.\nimport { find, findOne } from '../class_static_methods/find';\nimport insert from '../class_static_methods/insert';\nimport update from '../class_static_methods/update';\nimport upsert from '../class_static_methods/upsert';\nimport remove from '../class_static_methods/remove';\n// Class prototype methods.\nimport protoSave from '../class_prototype_methods/save';\nimport protoRemove from '../class_prototype_methods/remove';\nimport protoReload from '../class_prototype_methods/reload';\nimport protoCopy from '../class_prototype_methods/copy';\nimport protoGetModifier from '../class_prototype_methods/getModifier';\nimport protoGetModified from '../class_prototype_methods/getModified';\nimport protoGetModifiedValues from '../class_prototype_methods/getModifiedValues';\nimport protoIsModified from '../class_prototype_methods/isModified';\n// Meteor methods.\nimport meteorInsert from '../meteor_methods/insert';\nimport meteorUpdate from '../meteor_methods/update';\nimport meteorUpsert from '../meteor_methods/upsert';\nimport meteorRemove from '../meteor_methods/remove';\n// Class events.\nimport fromJSONValue from '../class_events/fromJSONValue';\nimport toJSONValue from '../class_events/toJSONValue';\n\nfunction onApplyDefinition(Class, parsedDefinition, className) {\n  const schema = Class.schema;\n\n  if (parsedDefinition.collection) {\n    const Collection = schema.collection = parsedDefinition.collection;\n    // Get type of the \"_id\" field.\n    const id = Collection._makeNewID();\n    const IdType = id.constructor;\n\n    Class.extend({\n      // Add the \"_id\" field if not already added.\n      fields: {\n        _id: {\n          name: '_id',\n          type: IdType,\n          optional: true\n        }\n      },\n      // Add storage events.\n      events: {\n        toJSONValue: [toJSONValue],\n        fromJSONValue: [fromJSONValue]\n      }\n    }, ['fields', 'events']);\n\n    // If it's a remote collection then we register methods on the connection\n    // object of the collection.\n    const connection = Collection._connection;\n    if (connection) {\n      // Prepare meteor methods to be added.\n      const meteorMethods = {\n        '/Astronomy/insert': meteorInsert,\n        '/Astronomy/update': meteorUpdate,\n        '/Astronomy/upsert': meteorUpsert,\n        '/Astronomy/remove': meteorRemove,\n      };\n      _each(meteorMethods, (meteorMethod, methodName) => {\n        if (!hasMeteorMethod(connection, methodName)) {\n          // Add meteor method.\n          connection.methods(_zipObject([methodName], [meteorMethod]));\n        }\n      });\n    }\n\n    // Class static methods.\n    Class.find = find;\n    Class.findOne = findOne;\n    Class.insert = insert;\n    Class.update = update;\n    Class.upsert = upsert;\n    Class.remove = remove;\n    // Class prototype methods.\n    Class.prototype.save = protoSave;\n    Class.prototype.remove = protoRemove;\n    Class.prototype.reload = protoReload;\n    Class.prototype.copy = protoCopy;\n    Class.prototype.getModifier = protoGetModifier;\n    Class.prototype.getModified = protoGetModified;\n    Class.prototype.getModifiedValues = protoGetModifiedValues;\n    Class.prototype.isModified = protoIsModified;\n  }\n\n  // Apply type field.\n  if (parsedDefinition.typeField) {\n    const typeField = schema.typeField = parsedDefinition.typeField;\n    // Add the type field if not already added.\n    if (!Class.hasField(typeField)) {\n      Class.extend({\n        fields: {\n          [typeField]: {\n            type: String,\n            index: 1\n          }\n        },\n        events: {\n          afterInit(e) {\n            const doc = e.currentTarget;\n            const Class = doc.constructor;\n            doc[typeField] = Class.getName();\n          }\n        }\n      }, ['fields', 'events']);\n    }\n\n    if (parsedDefinition.typeField) {\n      schema.typeField = parsedDefinition.typeField;\n    }\n  }\n\n  // If class has already assigned collection.\n  const Collection = Class.getCollection();\n  if (Collection) {\n    // Apply the \"transform\" property only if it's a function or equal null.\n    if (\n      typeof parsedDefinition.transform === 'function' ||\n      parsedDefinition.transform === null\n    ) {\n      schema.transform = parsedDefinition.transform;\n    }\n\n    if (parsedDefinition.secured !== undefined) {\n      _extend(schema.secured, parsedDefinition.secured);\n    }\n  }\n};\n\nexport default onApplyDefinition;"]},"sourceType":"script","hash":"45afdd42609a54d9a37782ca46c098049a1097f0"}
