{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\utils\\traverse.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/fields/utils/traverse.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\utils\\traverse.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\utils\\traverse.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/fields/utils/traverse.js"}},"code":"let _isObject;\n\nmodule.watch(require(\"lodash/isObject\"), {\n  default(v) {\n    _isObject = v;\n  }\n\n}, 0);\nlet isNestedFieldName;\nmodule.watch(require(\"./isNestedFieldName\"), {\n  default(v) {\n    isNestedFieldName = v;\n  }\n\n}, 1);\nlet AstroClass;\nmodule.watch(require(\"../../../core/class\"), {\n  default(v) {\n    AstroClass = v;\n  }\n\n}, 2);\n\nfunction traverse(doc, name, callback) {\n  if (!doc) {\n    return;\n  }\n\n  let Class;\n  let field; // Check whether the given field name is a nested field name.\n\n  if (!isNestedFieldName(name)) {\n    // Get a class.\n    let Class = doc.constructor; // Get a field definition.\n\n    let field = Class.getField(name); // Execute the callback function passing the last nested document, the last\n    // segment name and a field object.\n\n    return callback(doc, name, field);\n  } // Split the nested field pattern name by the \".\" character.\n\n\n  let segments = name.split('.'); // Get the last and one before the last index.\n\n  let lastIndex = segments.length - 1; // Traverse nested fields until reaching the last one from the pattern.\n\n  let next = function (nestedDoc, segmentIndex) {\n    segmentIndex = segmentIndex || 0; // Get a nested field name under the given index.\n\n    let segment = segments[segmentIndex]; // Check if a nested document is an instance of the Astronomy class and get\n    // a field object for a given field name;\n\n    if (nestedDoc instanceof AstroClass) {\n      // Get a class for of a nested document.\n      Class = nestedDoc.constructor; // Get a field object from the nested class.\n\n      field = Class.getField(segment);\n    }\n\n    if (segmentIndex === lastIndex) {\n      // Execute the callback function, if we reached the last nested document.\n      return callback(nestedDoc, segment, field);\n    } else if (_isObject(nestedDoc[segment])) {\n      // Go deeper if a value of the current nested document is an object.\n      return next(nestedDoc[segment], segmentIndex + 1);\n    }\n  }; // Start traversing nested fields.\n\n\n  return next(doc);\n}\n\n;\nmodule.exportDefault(traverse);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/fields/utils/traverse.js"],"names":["_isObject","module","watch","require","default","v","isNestedFieldName","AstroClass","traverse","doc","name","callback","Class","field","constructor","getField","segments","split","lastIndex","length","next","nestedDoc","segmentIndex","segment","exportDefault"],"mappings":"AAAA,IAAIA,SAAJ;;AAAcC,OAAOC,KAAP,CAAaC,QAAQ,iBAAR,CAAb,EAAwC;AAACC,UAAQC,CAAR,EAAU;AAACL,gBAAUK,CAAV;AAAY;;AAAxB,CAAxC,EAAkE,CAAlE;AAAqE,IAAIC,iBAAJ;AAAsBL,OAAOC,KAAP,CAAaC,QAAQ,qBAAR,CAAb,EAA4C;AAACC,UAAQC,CAAR,EAAU;AAACC,wBAAkBD,CAAlB;AAAoB;;AAAhC,CAA5C,EAA8E,CAA9E;AAAiF,IAAIE,UAAJ;AAAeN,OAAOC,KAAP,CAAaC,QAAQ,qBAAR,CAAb,EAA4C;AAACC,UAAQC,CAAR,EAAU;AAACE,iBAAWF,CAAX;AAAa;;AAAzB,CAA5C,EAAuE,CAAvE;;AAIzM,SAASG,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6BC,QAA7B,EAAuC;AACrC,MAAI,CAACF,GAAL,EAAU;AACR;AACD;;AAED,MAAIG,KAAJ;AACA,MAAIC,KAAJ,CANqC,CAQrC;;AACA,MAAI,CAACP,kBAAkBI,IAAlB,CAAL,EAA8B;AAC5B;AACA,QAAIE,QAAQH,IAAIK,WAAhB,CAF4B,CAG5B;;AACA,QAAID,QAAQD,MAAMG,QAAN,CAAeL,IAAf,CAAZ,CAJ4B,CAK5B;AACA;;AACA,WAAOC,SAASF,GAAT,EAAcC,IAAd,EAAoBG,KAApB,CAAP;AACD,GAjBoC,CAmBrC;;;AACA,MAAIG,WAAWN,KAAKO,KAAL,CAAW,GAAX,CAAf,CApBqC,CAqBrC;;AACA,MAAIC,YAAYF,SAASG,MAAT,GAAkB,CAAlC,CAtBqC,CAwBrC;;AACA,MAAIC,OAAO,UAASC,SAAT,EAAoBC,YAApB,EAAkC;AAC3CA,mBAAeA,gBAAgB,CAA/B,CAD2C,CAE3C;;AACA,QAAIC,UAAUP,SAASM,YAAT,CAAd,CAH2C,CAI3C;AACA;;AACA,QAAID,qBAAqBd,UAAzB,EAAqC;AACnC;AACAK,cAAQS,UAAUP,WAAlB,CAFmC,CAGnC;;AACAD,cAAQD,MAAMG,QAAN,CAAeQ,OAAf,CAAR;AACD;;AACD,QAAID,iBAAiBJ,SAArB,EAAgC;AAC9B;AACA,aAAOP,SAASU,SAAT,EAAoBE,OAApB,EAA6BV,KAA7B,CAAP;AACD,KAHD,MAIK,IAAIb,UAAUqB,UAAUE,OAAV,CAAV,CAAJ,EAAmC;AACtC;AACA,aAAOH,KAAKC,UAAUE,OAAV,CAAL,EAAyBD,eAAe,CAAxC,CAAP;AACD;AACF,GApBD,CAzBqC,CA+CrC;;;AACA,SAAOF,KAAKX,GAAL,CAAP;AACD;;AAAA;AArDDR,OAAOuB,aAAP,CAuDehB,QAvDf","sourcesContent":["import _isObject from 'lodash/isObject';\nimport isNestedFieldName from './isNestedFieldName';\nimport AstroClass from '../../../core/class';\n\nfunction traverse(doc, name, callback) {\n  if (!doc) {\n    return;\n  }\n\n  let Class;\n  let field;\n\n  // Check whether the given field name is a nested field name.\n  if (!isNestedFieldName(name)) {\n    // Get a class.\n    let Class = doc.constructor;\n    // Get a field definition.\n    let field = Class.getField(name);\n    // Execute the callback function passing the last nested document, the last\n    // segment name and a field object.\n    return callback(doc, name, field);\n  }\n\n  // Split the nested field pattern name by the \".\" character.\n  let segments = name.split('.');\n  // Get the last and one before the last index.\n  let lastIndex = segments.length - 1;\n\n  // Traverse nested fields until reaching the last one from the pattern.\n  let next = function(nestedDoc, segmentIndex) {\n    segmentIndex = segmentIndex || 0;\n    // Get a nested field name under the given index.\n    let segment = segments[segmentIndex];\n    // Check if a nested document is an instance of the Astronomy class and get\n    // a field object for a given field name;\n    if (nestedDoc instanceof AstroClass) {\n      // Get a class for of a nested document.\n      Class = nestedDoc.constructor;\n      // Get a field object from the nested class.\n      field = Class.getField(segment);\n    }\n    if (segmentIndex === lastIndex) {\n      // Execute the callback function, if we reached the last nested document.\n      return callback(nestedDoc, segment, field);\n    }\n    else if (_isObject(nestedDoc[segment])) {\n      // Go deeper if a value of the current nested document is an object.\n      return next(nestedDoc[segment], segmentIndex + 1);\n    }\n  };\n\n  // Start traversing nested fields.\n  return next(doc);\n};\n\nexport default traverse;"]},"sourceType":"script","hash":"0aae90737bc63dbab5a93b397deeabbe42b4f770"}
