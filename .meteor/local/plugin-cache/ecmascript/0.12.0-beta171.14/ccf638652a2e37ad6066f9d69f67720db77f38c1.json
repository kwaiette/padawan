{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\reactive-dict\\reactive-dict.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/reactive-dict/reactive-dict.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\reactive-dict\\reactive-dict.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","presets":[],"generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\reactive-dict\\reactive-dict.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/reactive-dict/reactive-dict.js"}},"code":"module.export({\n  ReactiveDict: () => ReactiveDict\n});\nconst hasOwn = Object.prototype.hasOwnProperty; // XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\n\nfunction stringify(value) {\n  if (value === undefined) {\n    return 'undefined';\n  }\n\n  return EJSON.stringify(value);\n}\n\nfunction parse(serialized) {\n  if (serialized === undefined || serialized === 'undefined') {\n    return undefined;\n  }\n\n  return EJSON.parse(serialized);\n}\n\nfunction changed(v) {\n  v && v.changed();\n} // XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\n\n\nclass ReactiveDict {\n  constructor(dictName, dictData) {\n    // this.keys: key -> value\n    this.keys = {};\n\n    if (dictName) {\n      // name given; migration will be performed\n      if (typeof dictName === 'string') {\n        // the normal case, argument is a string name.\n        // Only run migration logic on client, it will cause\n        // duplicate name errors on server during reloads.\n        // _registerDictForMigrate will throw an error on duplicate name.\n        Meteor.isClient && ReactiveDict._registerDictForMigrate(dictName, this);\n\n        const migratedData = Meteor.isClient && ReactiveDict._loadMigratedDict(dictName);\n\n        if (migratedData) {\n          // Don't stringify migrated data\n          this.keys = migratedData;\n        } else {\n          // Use _setObject to make sure values are stringified\n          this._setObject(dictData || {});\n        }\n\n        this.name = dictName;\n      } else if (typeof dictName === 'object') {\n        // back-compat case: dictName is actually migrationData\n        // Use _setObject to make sure values are stringified\n        this._setObject(dictName);\n      } else {\n        throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n      }\n    } else if (typeof dictData === 'object') {\n      this._setObject(dictData);\n    }\n\n    this.allDeps = new Tracker.Dependency();\n    this.keyDeps = {}; // key -> Dependency\n\n    this.keyValueDeps = {}; // key -> Dependency\n  } // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n\n\n  set(keyOrObject, value) {\n    if (typeof keyOrObject === 'object' && value === undefined) {\n      // Called as `dict.set({...})`\n      this._setObject(keyOrObject);\n\n      return;\n    } // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n\n\n    const key = keyOrObject;\n    value = stringify(value);\n    const keyExisted = hasOwn.call(this.keys, key);\n    const oldSerializedValue = keyExisted ? this.keys[key] : 'undefined';\n    const isNewValue = value !== oldSerializedValue;\n    this.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      // Using the changed utility function here because this.allDeps might not exist yet,\n      // when setting initial data from constructor\n      changed(this.allDeps);\n    } // Don't trigger changes when setting initial data from constructor,\n    // this.KeyDeps is undefined in this case\n\n\n    if (isNewValue && this.keyDeps) {\n      changed(this.keyDeps[key]);\n\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldSerializedValue]);\n        changed(this.keyValueDeps[key][value]);\n      }\n    }\n  }\n\n  setDefault(keyOrObject, value) {\n    if (typeof keyOrObject === 'object' && value === undefined) {\n      // Called as `dict.setDefault({...})`\n      this._setDefaultObject(keyOrObject);\n\n      return;\n    } // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n\n\n    const key = keyOrObject;\n\n    if (!hasOwn.call(this.keys, key)) {\n      this.set(key, value);\n    }\n  }\n\n  get(key) {\n    this._ensureKey(key);\n\n    this.keyDeps[key].depend();\n    return parse(this.keys[key]);\n  }\n\n  equals(key, value) {\n    // Mongo.ObjectID is in the 'mongo' package\n    let ObjectID = null;\n\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    } // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n\n\n    if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n\n    const serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      this._ensureKey(key);\n\n      if (!hasOwn.call(this.keyValueDeps[key], serializedValue)) {\n        this.keyValueDeps[key][serializedValue] = new Tracker.Dependency();\n      }\n\n      var isNew = this.keyValueDeps[key][serializedValue].depend();\n\n      if (isNew) {\n        Tracker.onInvalidate(() => {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (!this.keyValueDeps[key][serializedValue].hasDependents()) {\n            delete this.keyValueDeps[key][serializedValue];\n          }\n        });\n      }\n    }\n\n    let oldValue = undefined;\n\n    if (hasOwn.call(this.keys, key)) {\n      oldValue = parse(this.keys[key]);\n    }\n\n    return EJSON.equals(oldValue, value);\n  }\n\n  all() {\n    this.allDeps.depend();\n    let ret = {};\n    Object.keys(this.keys).forEach(key => {\n      ret[key] = parse(this.keys[key]);\n    });\n    return ret;\n  }\n\n  clear() {\n    const oldKeys = this.keys;\n    this.keys = {};\n    this.allDeps.changed();\n    Object.keys(oldKeys).forEach(key => {\n      changed(this.keyDeps[key]);\n\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldKeys[key]]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n    });\n  }\n\n  delete(key) {\n    let didRemove = false;\n\n    if (hasOwn.call(this.keys, key)) {\n      const oldValue = this.keys[key];\n      delete this.keys[key];\n      changed(this.keyDeps[key]);\n\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldValue]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n\n      this.allDeps.changed();\n      didRemove = true;\n    }\n\n    return didRemove;\n  }\n\n  destroy() {\n    this.clear();\n\n    if (this.name && hasOwn.call(ReactiveDict._dictsToMigrate, this.name)) {\n      delete ReactiveDict._dictsToMigrate[this.name];\n    }\n  }\n\n  _setObject(object) {\n    Object.keys(object).forEach(key => {\n      this.set(key, object[key]);\n    });\n  }\n\n  _setDefaultObject(object) {\n    Object.keys(object).forEach(key => {\n      this.setDefault(key, object[key]);\n    });\n  }\n\n  _ensureKey(key) {\n    if (!(key in this.keyDeps)) {\n      this.keyDeps[key] = new Tracker.Dependency();\n      this.keyValueDeps[key] = {};\n    }\n  } // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n\n\n  _getMigrationData() {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n\n}","map":{"version":3,"sources":["packages/reactive-dict/reactive-dict.js"],"names":["module","export","ReactiveDict","hasOwn","Object","prototype","hasOwnProperty","stringify","value","undefined","EJSON","parse","serialized","changed","v","constructor","dictName","dictData","keys","Meteor","isClient","_registerDictForMigrate","migratedData","_loadMigratedDict","_setObject","name","Error","allDeps","Tracker","Dependency","keyDeps","keyValueDeps","set","keyOrObject","key","keyExisted","call","oldSerializedValue","isNewValue","setDefault","_setDefaultObject","get","_ensureKey","depend","equals","ObjectID","Package","mongo","Mongo","Date","serializedValue","active","isNew","onInvalidate","hasDependents","oldValue","all","ret","forEach","clear","oldKeys","delete","didRemove","destroy","_dictsToMigrate","object","_getMigrationData"],"mappings":"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","sourcesContent":["const hasOwn = Object.prototype.hasOwnProperty;\n\n// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nfunction stringify(value) {\n  if (value === undefined) {\n    return 'undefined';\n  }\n  return EJSON.stringify(value);\n}\n\nfunction parse(serialized) {\n  if (serialized === undefined || serialized === 'undefined') {\n    return undefined;\n  }\n  return EJSON.parse(serialized);\n}\n\nfunction changed(v) {\n  v && v.changed();\n}\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\nexport class ReactiveDict {\n  constructor(dictName, dictData) {\n    // this.keys: key -> value\n    this.keys = {};\n\n    if (dictName) {\n      // name given; migration will be performed\n      if (typeof dictName === 'string') {\n        // the normal case, argument is a string name.\n\n        // Only run migration logic on client, it will cause\n        // duplicate name errors on server during reloads.\n        // _registerDictForMigrate will throw an error on duplicate name.\n        Meteor.isClient && ReactiveDict._registerDictForMigrate(dictName, this);\n        const migratedData = Meteor.isClient && ReactiveDict._loadMigratedDict(dictName);\n\n        if (migratedData) {\n          // Don't stringify migrated data\n          this.keys = migratedData;\n        } else {\n          // Use _setObject to make sure values are stringified\n          this._setObject(dictData || {});\n        }\n        this.name = dictName;\n      } else if (typeof dictName === 'object') {\n        // back-compat case: dictName is actually migrationData\n        // Use _setObject to make sure values are stringified\n        this._setObject(dictName);\n      } else {\n        throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n      }\n    } else if (typeof dictData === 'object') {\n      this._setObject(dictData);\n    }\n\n    this.allDeps = new Tracker.Dependency;\n    this.keyDeps = {}; // key -> Dependency\n    this.keyValueDeps = {}; // key -> Dependency\n  }\n\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n  set(keyOrObject, value) {\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.set({...})`\n      this._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n\n    value = stringify(value);\n\n    const keyExisted = hasOwn.call(this.keys, key);\n    const oldSerializedValue = keyExisted ? this.keys[key] : 'undefined';\n    const isNewValue = (value !== oldSerializedValue);\n\n    this.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      // Using the changed utility function here because this.allDeps might not exist yet,\n      // when setting initial data from constructor\n      changed(this.allDeps);\n    }\n\n    // Don't trigger changes when setting initial data from constructor,\n    // this.KeyDeps is undefined in this case\n    if (isNewValue && this.keyDeps) {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldSerializedValue]);\n        changed(this.keyValueDeps[key][value]);\n      }\n    }\n  }\n\n  setDefault(keyOrObject, value) {\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.setDefault({...})`\n      this._setDefaultObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    const key = keyOrObject;\n\n    if (! hasOwn.call(this.keys, key)) {\n      this.set(key, value);\n    }\n  }\n\n  get(key) {\n    this._ensureKey(key);\n    this.keyDeps[key].depend();\n    return parse(this.keys[key]);\n  }\n\n  equals(key, value) {\n    // Mongo.ObjectID is in the 'mongo' package\n    let ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    const serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      this._ensureKey(key);\n\n      if (! hasOwn.call(this.keyValueDeps[key], serializedValue)) {\n        this.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n      }\n\n      var isNew = this.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(() => {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! this.keyValueDeps[key][serializedValue].hasDependents()) {\n            delete this.keyValueDeps[key][serializedValue];\n          }\n        });\n      }\n    }\n\n    let oldValue = undefined;\n    if (hasOwn.call(this.keys, key)) {\n      oldValue = parse(this.keys[key]);\n    }\n    return EJSON.equals(oldValue, value);\n  }\n\n  all() {\n    this.allDeps.depend();\n    let ret = {};\n    Object.keys(this.keys).forEach(key => {\n      ret[key] = parse(this.keys[key]);\n    });\n    return ret;\n  }\n\n  clear() {\n    const oldKeys = this.keys;\n    this.keys = {};\n\n    this.allDeps.changed();\n\n    Object.keys(oldKeys).forEach(key => {\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldKeys[key]]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n    });\n  }\n\n  delete(key) {\n    let didRemove = false;\n\n    if (hasOwn.call(this.keys, key)) {\n      const oldValue = this.keys[key];\n      delete this.keys[key];\n      changed(this.keyDeps[key]);\n      if (this.keyValueDeps[key]) {\n        changed(this.keyValueDeps[key][oldValue]);\n        changed(this.keyValueDeps[key]['undefined']);\n      }\n      this.allDeps.changed();\n      didRemove = true;\n    }\n    return didRemove;\n  }\n\n  destroy() {\n    this.clear();\n    if (this.name && hasOwn.call(ReactiveDict._dictsToMigrate, this.name)) {\n      delete ReactiveDict._dictsToMigrate[this.name];\n    }\n  }\n\n  _setObject(object) {\n    Object.keys(object).forEach(key => {\n      this.set(key, object[key]);\n    });\n  }\n\n  _setDefaultObject(object) {\n    Object.keys(object).forEach(key => {\n      this.setDefault(key, object[key]);\n    });\n  }\n\n  _ensureKey(key) {\n    if (!(key in this.keyDeps)) {\n      this.keyDeps[key] = new Tracker.Dependency;\n      this.keyValueDeps[key] = {};\n    }\n  }\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData() {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n}\n"]},"sourceType":"script","hash":"ccf638652a2e37ad6066f9d69f67720db77f38c1"}
