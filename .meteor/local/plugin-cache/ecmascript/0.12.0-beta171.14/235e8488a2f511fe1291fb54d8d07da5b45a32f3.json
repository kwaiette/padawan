{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\imports\\startup\\server\\fixtures.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/startup/server/fixtures.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\imports\\startup\\server\\fixtures.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","presets":[],"generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\imports\\startup\\server\\fixtures.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/startup/server/fixtures.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet Question, MyersBriggsCategory;\nmodule.watch(require(\"../../api/questions/questions.js\"), {\n  Question(v) {\n    Question = v;\n  },\n\n  MyersBriggsCategory(v) {\n    MyersBriggsCategory = v;\n  }\n\n}, 1);\nlet User;\nmodule.watch(require(\"../../api/users/users.js\"), {\n  User(v) {\n    User = v;\n  }\n\n}, 2);\nlet Team;\nmodule.watch(require(\"../../api/teams/teams.js\"), {\n  Team(v) {\n    Team = v;\n  }\n\n}, 3);\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 4);\nlet Defaults;\nmodule.watch(require(\"../both/defaults.js\"), {\n  Defaults(v) {\n    Defaults = v;\n  }\n\n}, 5);\nlet SrvDefaults;\nmodule.watch(require(\"./defaults.js\"), {\n  SrvDefaults(v) {\n    SrvDefaults = v;\n  }\n\n}, 6);\nlet TypeReading, ReadingRange, TypeReadingCategory;\nmodule.watch(require(\"../../api/type_readings/type_readings.js\"), {\n  TypeReading(v) {\n    TypeReading = v;\n  },\n\n  ReadingRange(v) {\n    ReadingRange = v;\n  },\n\n  TypeReadingCategory(v) {\n    TypeReadingCategory = v;\n  }\n\n}, 7);\nMeteor.startup(() => {\n  var defaultUserId;\n\n  if (Meteor.users.find().count() < 1) {\n    defaultUserId = Accounts.createUser({\n      username: Defaults.user.username,\n      email: Defaults.user.email,\n      password: SrvDefaults.user.password,\n      isAdmin: Defaults.user.isAdmin,\n      profile: Defaults.user.profile,\n      teams: [Team.Default.Name]\n    });\n    let t = Team.findOne({\n      Name: Team.Default.Name\n    });\n    t.CreatedBy = userId;\n    t.save();\n  } //add all existing members to the default team\n\n\n  let teamUserIdList = [];\n  User.find({}).forEach(u => {\n    teamUserIdList.push(u._id);\n    Roles.addUsersToRoles(u._id, 'member', Team.Default.Name);\n\n    if (Roles.userIsInRole(u._id, 'admin', Roles.GLOBAL_GROUP)) {\n      Roles.addUsersToRoles(u._id, 'admin', Team.Default.Name);\n    } else {\n      Roles.addUsersToRoles(u._id, Defaults.role.name, Team.Default.Name);\n    }\n  }); //Team.Default.Members = Team.Default.Members.concat(teamUserIdList);\n\n  Team.Default.Members = teamUserIdList;\n  Team.Default.save();\n  let existingRoleNames = [];\n  Roles.getAllRoles().forEach(function (r) {\n    existingRoleNames.push(r.name);\n  });\n  let possibleRoles = [\"admin\", \"view-goals\", \"view-members\", \"member\", \"mentor\", \"assigned\", \"manage-users\", \"learn-share-host\", \"developer\"];\n\n  for (let i in possibleRoles) {\n    if (existingRoleNames.indexOf(possibleRoles[i]) === -1) {\n      Roles.createRole(possibleRoles[i]);\n    }\n  } // Adding this so that it will auto fix type readings inserted the wrong way. We can remove this once no one has them.\n\n\n  const RawReadings = TypeReading.getCollection();\n  var wrongReadings = RawReadings.find({\n    \"MyersBriggsCategory\": {\n      $exists: true\n    }\n  });\n  wrongReadings.forEach(reading => {\n    var newType = new TypeReadingCategory({\n      MyersBriggsCategory: reading.MyersBriggsCategory,\n      Range: reading.Range\n    });\n    delete reading.MyersBriggsCategory;\n    delete reading.Range;\n    delete reading.TypeReadingCategories;\n    RawReadings.update({\n      _id: reading._id\n    }, {\n      $unset: {\n        MyersBriggsCategory: \"\",\n        Range: \"\"\n      }\n    });\n    var newReading = new TypeReading(reading);\n    newReading._isNew = false;\n    newReading.addTypeCategory(newType);\n    console.log(newReading);\n    newReading.getModified();\n    newReading.save();\n  }); //convert questions with single category to array of categories\n\n  let qs = Question.find({\n    Categories: {\n      $exists: false\n    }\n  });\n\n  if (qs) {\n    qs.forEach(function (q) {\n      q.Categories = [q.Category];\n      q.save();\n    });\n  }\n\n  var fs = Npm.require('fs');\n\n  var uploadPath = SrvDefaults.uploadPath;\n\n  try {\n    if (!fs.existsSync(uploadPath)) {\n      fs.mkdirSync(uploadPath);\n    }\n  } catch (e) {\n    console.log(e);\n  }\n\n  WebApp.connectHandlers.use('/learnShareRecording', (req, res, next) => {\n    let fileName = req.url.split('/')[1];\n\n    if (fs.existsSync(uploadPath + fileName)) {\n      res.writeHead(200, {\n        'Content-Type': 'video/mp4'\n      });\n      fs.readFile(uploadPath + fileName, (err, data) => {\n        if (err) {\n          console.log(err);\n        } else {\n          res.write(data);\n          res.end();\n        }\n      });\n    } else {\n      console.log(\"file does not exist\");\n      res.writeHead(404);\n      res.write('404 not found');\n      res.end();\n    }\n  });\n});","map":{"version":3,"sources":["imports/startup/server/fixtures.js"],"names":["Meteor","module","watch","require","v","Question","MyersBriggsCategory","User","Team","Mongo","Defaults","SrvDefaults","TypeReading","ReadingRange","TypeReadingCategory","startup","defaultUserId","users","find","count","Accounts","createUser","username","user","email","password","isAdmin","profile","teams","Default","Name","t","findOne","CreatedBy","userId","save","teamUserIdList","forEach","u","push","_id","Roles","addUsersToRoles","userIsInRole","GLOBAL_GROUP","role","name","Members","existingRoleNames","getAllRoles","r","possibleRoles","i","indexOf","createRole","RawReadings","getCollection","wrongReadings","$exists","reading","newType","Range","TypeReadingCategories","update","$unset","newReading","_isNew","addTypeCategory","console","log","getModified","qs","Categories","q","Category","fs","Npm","uploadPath","existsSync","mkdirSync","e","WebApp","connectHandlers","use","req","res","next","fileName","url","split","writeHead","readFile","err","data","write","end"],"mappings":"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","sourcesContent":["// Fill the DB with example data on startup\n\nimport { Meteor } from 'meteor/meteor';\nimport { Question, MyersBriggsCategory } from '../../api/questions/questions.js';\nimport { User } from '../../api/users/users.js';\nimport { Team } from '../../api/teams/teams.js';\nimport { Mongo } from 'meteor/mongo';\nimport { Defaults } from '../both/defaults.js';\nimport { SrvDefaults } from './defaults.js';\nimport { TypeReading, ReadingRange, TypeReadingCategory } from '../../api/type_readings/type_readings.js';\n\nMeteor.startup(() => {\n    var defaultUserId;\n    if(Meteor.users.find().count() < 1) {\n        defaultUserId = Accounts.createUser({\n            username: Defaults.user.username,\n            email: Defaults.user.email,\n            password: SrvDefaults.user.password,\n            isAdmin: Defaults.user.isAdmin,\n            profile: Defaults.user.profile,\n            teams: [Team.Default.Name]\n        });\n        let t = Team.findOne( {Name: Team.Default.Name} );\n        t.CreatedBy = userId;\n        t.save();\n    }\n\n    //add all existing members to the default team\n    let teamUserIdList = [];\n    User.find( {} ).forEach( (u) => {\n        teamUserIdList.push(u._id);\n        Roles.addUsersToRoles(u._id, 'member', Team.Default.Name);\n        if (Roles.userIsInRole(u._id, 'admin', Roles.GLOBAL_GROUP)) {\n            Roles.addUsersToRoles(u._id, 'admin', Team.Default.Name);\n        } else {\n            Roles.addUsersToRoles(u._id, Defaults.role.name, Team.Default.Name);\n        }\n    });\n    //Team.Default.Members = Team.Default.Members.concat(teamUserIdList);\n    Team.Default.Members = teamUserIdList;\n    Team.Default.save();\n\n    let existingRoleNames = [];\n    Roles.getAllRoles().forEach(function (r) {\n        existingRoleNames.push(r.name);\n    });\n    let possibleRoles = [\"admin\",\"view-goals\",\"view-members\",\"member\",\"mentor\",\"assigned\",\"manage-users\",\"learn-share-host\",\"developer\"];\n    for (let i in possibleRoles) {\n        if (existingRoleNames.indexOf(possibleRoles[i]) === -1) {\n            Roles.createRole(possibleRoles[i]);\n        }\n    }\n\n    // Adding this so that it will auto fix type readings inserted the wrong way. We can remove this once no one has them.\n    const RawReadings = TypeReading.getCollection();\n    var wrongReadings = RawReadings.find({ \"MyersBriggsCategory\" : { $exists : true } });\n    wrongReadings.forEach((reading) => {\n        var newType = new TypeReadingCategory({ MyersBriggsCategory: reading.MyersBriggsCategory, Range: reading.Range });\n        delete reading.MyersBriggsCategory;\n        delete reading.Range;\n        delete reading.TypeReadingCategories;\n        RawReadings.update({ _id: reading._id }, { $unset: { MyersBriggsCategory: \"\", Range: \"\" } });\n        var newReading = new TypeReading(reading);\n        newReading._isNew = false;\n        newReading.addTypeCategory(newType);\n        console.log(newReading);\n        newReading.getModified();\n        newReading.save();\n    });\n\n    //convert questions with single category to array of categories\n    let qs = Question.find( {Categories: {$exists: false}} );\n    if (qs) {\n        qs.forEach(function (q) {\n            q.Categories = [q.Category];\n            q.save();\n        });\n    }\n\n    var fs = Npm.require('fs');\n    var uploadPath = SrvDefaults.uploadPath;\n    try {\n        if (!fs.existsSync(uploadPath)) {\n            fs.mkdirSync(uploadPath);\n        }\n    } catch (e) {\n        console.log(e);\n    }\n\tWebApp.connectHandlers.use('/learnShareRecording', (req, res, next) => {\n\t\tlet fileName = req.url.split('/')[1];\n\n        if (fs.existsSync(uploadPath+fileName)) {\n    \t\tres.writeHead(200, { 'Content-Type': 'video/mp4' });\n\n            fs.readFile(uploadPath+fileName, (err, data) => {\n                if (err) {\n                    console.log(err);\n                } else {\n                    res.write(data);\n                    res.end();\n                }\n            });\n\n        } else {\n            console.log(\"file does not exist\");\n            res.writeHead(404);\n            res.write('404 not found');\n            res.end();\n        }\n\t});\n});\n"]},"sourceType":"script","hash":"235e8488a2f511fe1291fb54d8d07da5b45a32f3"}
