{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\ListField.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/fields/ListField.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\ListField.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","presets":[],"generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\ListField.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/fields/ListField.js"}},"code":"let _each;\n\nmodule.watch(require(\"lodash/each\"), {\n  default(v) {\n    _each = v;\n  }\n\n}, 0);\n\nlet _isArray;\n\nmodule.watch(require(\"lodash/isArray\"), {\n  default(v) {\n    _isArray = v;\n  }\n\n}, 1);\n\nlet _isNil;\n\nmodule.watch(require(\"lodash/isNil\"), {\n  default(v) {\n    _isNil = v;\n  }\n\n}, 2);\n\nlet _isPlainObject;\n\nmodule.watch(require(\"lodash/isPlainObject\"), {\n  default(v) {\n    _isPlainObject = v;\n  }\n\n}, 3);\n\nlet _map;\n\nmodule.watch(require(\"lodash/map\"), {\n  default(v) {\n    _map = v;\n  }\n\n}, 4);\nlet Field;\nmodule.watch(require(\"./Field\"), {\n  default(v) {\n    Field = v;\n  }\n\n}, 5);\nlet AstroClass;\nmodule.watch(require(\"../../core/class\"), {\n  default(v) {\n    AstroClass = v;\n  }\n\n}, 6);\nlet Validators;\nmodule.watch(require(\"../validators/validators\"), {\n  default(v) {\n    Validators = v;\n  }\n\n}, 7);\nlet castToClass;\nmodule.watch(require(\"./utils/castToClass\"), {\n  default(v) {\n    castToClass = v;\n  }\n\n}, 8);\nlet resolveValues;\nmodule.watch(require(\"./utils/resolveValues\"), {\n  default(v) {\n    resolveValues = v;\n  }\n\n}, 9);\n\nclass ListField extends Field {\n  constructor(definition = {}) {\n    super(definition);\n    this.isClass = AstroClass.isParentOf(this.type.class);\n  }\n\n  validate(args) {\n    super.validate(args);\n    var {\n      doc,\n      name,\n      value\n    } = args; // If a value is not empty.\n\n    if (!_isNil(value)) {\n      Validators.array(args);\n\n      _each(value, (element, index) => {\n        this.type.validate({\n          doc,\n          name: name + '.' + index,\n          value: element\n        });\n      });\n    }\n  }\n\n  cast(value, options) {\n    if (options.element) {\n      return this.type.cast(value, options);\n    }\n\n    if (value === '' && this.optional) {\n      return null;\n    } else if (_isArray(value)) {\n      return _map(value, element => {\n        // Class type.\n        if (this.isClass) {\n          // We only cast if a value is a plain object.\n          if (_isPlainObject(element)) {\n            // Cast value to an instance of the class.\n            return castToClass({\n              Class: this.type.class,\n              rawDoc: element,\n              options\n            });\n          }\n\n          return element;\n        } // Scalar type.\n        else {\n            // The \"cast\" option is only passed to the ObjectFields and ListFields.\n            // Here we have to check if it's set, so we don't cast if user don't\n            // want to.\n            if (options.cast) {\n              return this.type.cast.call(this, element);\n            }\n\n            return element;\n          }\n      });\n    }\n\n    return value;\n  }\n\n  resolveValue(rawDoc) {\n    const resolvedValues = super.resolveValue(rawDoc);\n\n    if (!this.isClass) {\n      return resolvedValues;\n    }\n\n    return _map(resolvedValues, nestedRawDoc => {\n      return resolveValues({\n        Class: this.type.class,\n        rawDoc: nestedRawDoc\n      });\n    });\n  }\n\n}\n\n;\nmodule.exportDefault(ListField);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/fields/ListField.js"],"names":["_each","module","watch","require","default","v","_isArray","_isNil","_isPlainObject","_map","Field","AstroClass","Validators","castToClass","resolveValues","ListField","constructor","definition","isClass","isParentOf","type","class","validate","args","doc","name","value","array","element","index","cast","options","optional","Class","rawDoc","call","resolveValue","resolvedValues","nestedRawDoc","exportDefault"],"mappings":"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","sourcesContent":["import _each from 'lodash/each';\nimport _isArray from 'lodash/isArray';\nimport _isNil from 'lodash/isNil';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport _map from 'lodash/map';\nimport Field from './Field';\nimport AstroClass from '../../core/class';\nimport Validators from '../validators/validators';\nimport castToClass from './utils/castToClass';\nimport resolveValues from './utils/resolveValues';\n\nclass ListField extends Field {\n  constructor(definition = {}) {\n    super(definition);\n    this.isClass = AstroClass.isParentOf(this.type.class);\n  }\n\n  validate(args) {\n    super.validate(args);\n    var {\n      doc,\n      name,\n      value\n    } = args;\n    // If a value is not empty.\n    if (!_isNil(value)) {\n      Validators.array(args);\n      _each(value, (element, index) => {\n        this.type.validate({\n          doc,\n          name: name + '.' + index,\n          value: element\n        });\n      });\n    }\n  }\n\n  cast(value, options) {\n    if (options.element) {\n      return this.type.cast(value, options);\n    }\n    if (value === '' && this.optional) {\n      return null;\n    }\n    else if (_isArray(value)) {\n      return _map(value, (element) => {\n        // Class type.\n        if (this.isClass) {\n          // We only cast if a value is a plain object.\n          if (_isPlainObject(element)) {\n            // Cast value to an instance of the class.\n            return castToClass({\n              Class: this.type.class,\n              rawDoc: element,\n              options\n            });\n          }\n          return element;\n        }\n        // Scalar type.\n        else {\n          // The \"cast\" option is only passed to the ObjectFields and ListFields.\n          // Here we have to check if it's set, so we don't cast if user don't\n          // want to.\n          if (options.cast) {\n            return this.type.cast.call(this, element);\n          }\n          return element;\n        }\n      });\n    }\n    return value;\n  }\n\n  resolveValue(rawDoc) {\n    const resolvedValues = super.resolveValue(rawDoc);\n    if (!this.isClass) {\n      return resolvedValues;\n    }\n    return _map(resolvedValues, (nestedRawDoc) => {\n      return resolveValues({\n        Class: this.type.class,\n        rawDoc: nestedRawDoc\n      });\n    });\n  }\n};\n\nexport default ListField;\n"]},"sourceType":"script","hash":"73d6556835b8a14fbcd5bfd4613ff17d4d1cd325"}
