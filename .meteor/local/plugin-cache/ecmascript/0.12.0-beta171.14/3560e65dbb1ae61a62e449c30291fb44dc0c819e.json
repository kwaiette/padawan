{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\behaviors\\hooks\\parse_definition.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/behaviors/hooks/parse_definition.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\behaviors\\hooks\\parse_definition.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","presets":[],"generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\behaviors\\hooks\\parse_definition.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/behaviors/hooks/parse_definition.js"}},"code":"let _each;\n\nmodule.watch(require(\"lodash/each\"), {\n  default(v) {\n    _each = v;\n  }\n\n}, 0);\nlet throwParseError;\nmodule.watch(require(\"../../core/utils/throw_parse_error.js\"), {\n  default(v) {\n    throwParseError = v;\n  }\n\n}, 1);\nlet Behavior;\nmodule.watch(require(\"../behavior.js\"), {\n  default(v) {\n    Behavior = v;\n  }\n\n}, 2);\n\nfunction onParseDefinition(parsedDefinition, definition, className) {\n  // Check existence of the \"behaviors\" property.\n  if (definition.behaviors !== undefined) {\n    if (!Match.test(definition.behaviors, Match.OneOf([String], Object))) {\n      throwParseError([{\n        'class': className\n      }, {\n        'property': 'behaviors'\n      }, `Behaviors definition has to be an array of behaviors' names or an ` + `object with behaviors' options`]);\n    }\n\n    _each(definition.behaviors, function (behaviorOptions, behaviorName) {\n      // If we deal with an array of behaviors' names, then behavior options is\n      // an empty object.\n      if (typeof behaviorOptions === 'string') {\n        behaviorName = behaviorOptions;\n        behaviorOptions = [{}];\n      } // Check if behavior with a given name exists.\n\n\n      if (!Behavior.has(behaviorName)) {\n        throwParseError([{\n          'class': className\n        }, {\n          'behavior': behaviorName\n        }, 'Behavior does not exist']);\n      } // Behavior options has to be an object or an array of objects, when we\n      // are adding multiple behaviors of the same type.\n\n\n      if (!Match.test(behaviorOptions, Match.OneOf(Object, [Object]))) {\n        throwParseError([{\n          'class': className\n        }, {\n          'behavior': behaviorName\n        }, 'Behavior options have to be an object or an array of objects']);\n      } // Make sure that behavior options is an array of objects.\n\n\n      if (!Match.test(behaviorOptions, Array)) {\n        behaviorOptions = [behaviorOptions];\n      }\n\n      parsedDefinition.behaviors[behaviorName] = behaviorOptions;\n    });\n  }\n}\n\n;\nmodule.exportDefault(onParseDefinition);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/behaviors/hooks/parse_definition.js"],"names":["_each","module","watch","require","default","v","throwParseError","Behavior","onParseDefinition","parsedDefinition","definition","className","behaviors","undefined","Match","test","OneOf","String","Object","behaviorOptions","behaviorName","has","Array","exportDefault"],"mappings":"AAAA,IAAIA,KAAJ;;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,aAAR,CAAb,EAAoC;AAACC,UAAQC,CAAR,EAAU;AAACL,YAAMK,CAAN;AAAQ;;AAApB,CAApC,EAA0D,CAA1D;AAA6D,IAAIC,eAAJ;AAAoBL,OAAOC,KAAP,CAAaC,QAAQ,uCAAR,CAAb,EAA8D;AAACC,UAAQC,CAAR,EAAU;AAACC,sBAAgBD,CAAhB;AAAkB;;AAA9B,CAA9D,EAA8F,CAA9F;AAAiG,IAAIE,QAAJ;AAAaN,OAAOC,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAACC,UAAQC,CAAR,EAAU;AAACE,eAASF,CAAT;AAAW;;AAAvB,CAAvC,EAAgE,CAAhE;;AAIzM,SAASG,iBAAT,CAA2BC,gBAA3B,EAA6CC,UAA7C,EAAyDC,SAAzD,EAAoE;AAClE;AACA,MAAID,WAAWE,SAAX,KAAyBC,SAA7B,EAAwC;AACtC,QAAI,CAACC,MAAMC,IAAN,CAAWL,WAAWE,SAAtB,EAAiCE,MAAME,KAAN,CAAY,CAACC,MAAD,CAAZ,EAAsBC,MAAtB,CAAjC,CAAL,EAAsE;AACpEZ,sBAAgB,CAAC;AACb,iBAASK;AADI,OAAD,EAEX;AACD,oBAAY;AADX,OAFW,EAKb,oEAAD,GACC,gCANa,CAAhB;AAQD;;AACDX,UAAMU,WAAWE,SAAjB,EAA4B,UAASO,eAAT,EAA0BC,YAA1B,EAAwC;AAClE;AACA;AACA,UAAI,OAAOD,eAAP,KAA2B,QAA/B,EAAyC;AACvCC,uBAAeD,eAAf;AACAA,0BAAkB,CAAC,EAAD,CAAlB;AACD,OANiE,CAOlE;;;AACA,UAAI,CAACZ,SAASc,GAAT,CAAaD,YAAb,CAAL,EAAiC;AAC/Bd,wBAAgB,CAAC;AACb,mBAASK;AADI,SAAD,EAEX;AACD,sBAAYS;AADX,SAFW,EAKd,yBALc,CAAhB;AAOD,OAhBiE,CAiBlE;AACA;;;AACA,UAAI,CAACN,MAAMC,IAAN,CAAWI,eAAX,EAA4BL,MAAME,KAAN,CAAYE,MAAZ,EAAoB,CAACA,MAAD,CAApB,CAA5B,CAAL,EAAiE;AAC/DZ,wBAAgB,CAAC;AACb,mBAASK;AADI,SAAD,EAEX;AACD,sBAAYS;AADX,SAFW,EAKd,8DALc,CAAhB;AAOD,OA3BiE,CA4BlE;;;AACA,UAAI,CAACN,MAAMC,IAAN,CAAWI,eAAX,EAA4BG,KAA5B,CAAL,EAAyC;AACvCH,0BAAkB,CAACA,eAAD,CAAlB;AACD;;AACDV,uBAAiBG,SAAjB,CAA2BQ,YAA3B,IAA2CD,eAA3C;AACD,KAjCD;AAkCD;AACF;;AAAA;AApDDlB,OAAOsB,aAAP,CAsDef,iBAtDf","sourcesContent":["import _each from 'lodash/each';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport Behavior from '../behavior.js';\n\nfunction onParseDefinition(parsedDefinition, definition, className) {\n  // Check existence of the \"behaviors\" property.\n  if (definition.behaviors !== undefined) {\n    if (!Match.test(definition.behaviors, Match.OneOf([String], Object))) {\n      throwParseError([{\n          'class': className\n        }, {\n          'property': 'behaviors'\n        },\n        `Behaviors definition has to be an array of behaviors' names or an ` +\n        `object with behaviors' options`\n      ]);\n    }\n    _each(definition.behaviors, function(behaviorOptions, behaviorName) {\n      // If we deal with an array of behaviors' names, then behavior options is\n      // an empty object.\n      if (typeof behaviorOptions === 'string') {\n        behaviorName = behaviorOptions;\n        behaviorOptions = [{}];\n      }\n      // Check if behavior with a given name exists.\n      if (!Behavior.has(behaviorName)) {\n        throwParseError([{\n            'class': className\n          }, {\n            'behavior': behaviorName\n          },\n          'Behavior does not exist'\n        ]);\n      }\n      // Behavior options has to be an object or an array of objects, when we\n      // are adding multiple behaviors of the same type.\n      if (!Match.test(behaviorOptions, Match.OneOf(Object, [Object]))) {\n        throwParseError([{\n            'class': className\n          }, {\n            'behavior': behaviorName\n          },\n          'Behavior options have to be an object or an array of objects'\n        ]);\n      }\n      // Make sure that behavior options is an array of objects.\n      if (!Match.test(behaviorOptions, Array)) {\n        behaviorOptions = [behaviorOptions];\n      }\n      parsedDefinition.behaviors[behaviorName] = behaviorOptions;\n    });\n  }\n};\n\nexport default onParseDefinition;"]},"sourceType":"script","hash":"3560e65dbb1ae61a62e449c30291fb44dc0c819e"}
