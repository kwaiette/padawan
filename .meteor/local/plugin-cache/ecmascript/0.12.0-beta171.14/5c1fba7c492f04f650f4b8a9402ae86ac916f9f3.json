{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\Union.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/fields/Union.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\Union.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\Union.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/fields/Union.js"}},"code":"var _clone;\n\nmodule.watch(require(\"lodash/clone\"), {\n  \"default\": function (v) {\n    _clone = v;\n  }\n}, 0);\n\nvar _some;\n\nmodule.watch(require(\"lodash/some\"), {\n  \"default\": function (v) {\n    _some = v;\n  }\n}, 1);\nvar Type;\nmodule.watch(require(\"./type.js\"), {\n  \"default\": function (v) {\n    Type = v;\n  }\n}, 2);\nvar Validators;\nmodule.watch(require(\"../validators/validators.js\"), {\n  \"default\": function (v) {\n    Validators = v;\n  }\n}, 3);\nvar check, Match;\nmodule.watch(require(\"meteor/check\"), {\n  check: function (v) {\n    check = v;\n  },\n  Match: function (v) {\n    Match = v;\n  }\n}, 4);\nvar unionDefinitionPattern = {\n  name: String,\n  types: [Function],\n  cast: Match.Optional(Function)\n};\nvar Union = {\n  create: function (definition) {\n    check(definition, unionDefinitionPattern); // Create a new Union constructor.\n\n    var Union = function () {\n      function Union(identifier) {\n        return Union[identifier];\n      }\n\n      return Union;\n    }(); // Copy list of types to the union constructor.\n\n\n    Union.types = _clone(definition.types); // Copy casting function to the union constructor if defined.\n\n    if (typeof definition.cast === 'function') {\n      Union.cast = definition.cast;\n    } // Create type definition for the given enum.\n\n\n    Type.create({\n      name: definition.name,\n      \"class\": Union,\n      cast: function (value) {\n        return Union.cast ? Union.cast(value) : value;\n      },\n      validate: function (args) {\n        var caughtErrors = []; // Check if a value will pass validation executed by any of the union\n        // types.\n\n        if (!_some(Union.types, function (TypeClass) {\n          var AstroType = Type.find(TypeClass);\n\n          try {\n            AstroType.validate(args);\n            return true;\n          } catch (err) {\n            caughtErrors.push(err);\n            return false;\n          }\n        })) {\n          throw caughtErrors[0];\n        }\n      }\n    }); // Store enum in the unions list.\n\n    this.unions[definition.name] = Union;\n    return Union;\n  },\n  unions: {}\n};\nmodule.exportDefault(Union);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/fields/Union.js"],"names":["_clone","module","watch","require","v","_some","Type","Validators","check","Match","unionDefinitionPattern","name","String","types","Function","cast","Optional","Union","create","definition","identifier","value","validate","args","caughtErrors","TypeClass","AstroType","find","err","push","unions","exportDefault"],"mappings":"AAAA,IAAIA,MAAJ;;AAAWC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAAA,uBAASC,CAAT,EAAW;AAACJ,aAAOI,CAAP;AAAS;AAArB,CAArC,EAA4D,CAA5D;;AAA+D,IAAIC,KAAJ;;AAAUJ,OAAOC,KAAP,CAAaC,QAAQ,aAAR,CAAb,EAAoC;AAAA,uBAASC,CAAT,EAAW;AAACC,YAAMD,CAAN;AAAQ;AAApB,CAApC,EAA0D,CAA1D;AAA6D,IAAIE,IAAJ;AAASL,OAAOC,KAAP,CAAaC,QAAQ,WAAR,CAAb,EAAkC;AAAA,uBAASC,CAAT,EAAW;AAACE,WAAKF,CAAL;AAAO;AAAnB,CAAlC,EAAuD,CAAvD;AAA0D,IAAIG,UAAJ;AAAeN,OAAOC,KAAP,CAAaC,QAAQ,6BAAR,CAAb,EAAoD;AAAA,uBAASC,CAAT,EAAW;AAACG,iBAAWH,CAAX;AAAa;AAAzB,CAApD,EAA+E,CAA/E;AAAkF,IAAII,KAAJ,EAAUC,KAAV;AAAgBR,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACK,OAAD,YAAOJ,CAAP,EAAS;AAACI,YAAMJ,CAAN;AAAQ,GAAlB;AAAmBK,OAAnB,YAAyBL,CAAzB,EAA2B;AAACK,YAAML,CAAN;AAAQ;AAApC,CAArC,EAA2E,CAA3E;AAMrU,IAAMM,yBAAyB;AAC7BC,QAAMC,MADuB;AAE7BC,SAAO,CAACC,QAAD,CAFsB;AAG7BC,QAAMN,MAAMO,QAAN,CAAeF,QAAf;AAHuB,CAA/B;AAMA,IAAMG,QAAQ;AACZC,QADY,YACLC,UADK,EACO;AACjBX,UAAMW,UAAN,EAAkBT,sBAAlB,EADiB,CAGjB;;AACA,QAAMO;AAAQ,eAASA,KAAT,CAAeG,UAAf,EAA2B;AACvC,eAAOH,MAAMG,UAAN,CAAP;AACD;;AAFK,aAAiBH,KAAjB;AAAA,OAAN,CAJiB,CAQjB;;;AACAA,UAAMJ,KAAN,GAAcb,OAAOmB,WAAWN,KAAlB,CAAd,CATiB,CAUjB;;AACA,QAAI,OAAOM,WAAWJ,IAAlB,KAA2B,UAA/B,EAA2C;AACzCE,YAAMF,IAAN,GAAaI,WAAWJ,IAAxB;AACD,KAbgB,CAejB;;;AACAT,SAAKY,MAAL,CAAY;AACVP,YAAMQ,WAAWR,IADP;AAEV,eAAOM,KAFG;AAGVF,UAHU,YAGLM,KAHK,EAGE;AACV,eAAOJ,MAAMF,IAAN,GAAaE,MAAMF,IAAN,CAAWM,KAAX,CAAb,GAAiCA,KAAxC;AACD,OALS;AAMVC,cANU,YAMDC,IANC,EAMK;AACb,YAAMC,eAAe,EAArB,CADa,CAEb;AACA;;AACA,YAAI,CAACnB,MAAMY,MAAMJ,KAAZ,EAAmB,UAACY,SAAD,EAAe;AACrC,cAAMC,YAAYpB,KAAKqB,IAAL,CAAUF,SAAV,CAAlB;;AACA,cAAI;AACFC,sBAAUJ,QAAV,CAAmBC,IAAnB;AACA,mBAAO,IAAP;AACD,WAHD,CAIA,OAAOK,GAAP,EAAY;AACVJ,yBAAaK,IAAb,CAAkBD,GAAlB;AACA,mBAAO,KAAP;AACD;AACF,SAVI,CAAL,EAUI;AACF,gBAAMJ,aAAa,CAAb,CAAN;AACD;AACF;AAvBS,KAAZ,EAhBiB,CAyCjB;;AACA,SAAKM,MAAL,CAAYX,WAAWR,IAAvB,IAA+BM,KAA/B;AAEA,WAAOA,KAAP;AACD,GA9CW;AA+CZa,UAAQ;AA/CI,CAAd;AAZA7B,OAAO8B,aAAP,CA8Ded,KA9Df","sourcesContent":["import _clone from 'lodash/clone';\nimport _some from 'lodash/some';\nimport Type from './type.js';\nimport Validators from '../validators/validators.js';\nimport { check, Match } from 'meteor/check';\n\nconst unionDefinitionPattern = {\n  name: String,\n  types: [Function],\n  cast: Match.Optional(Function)\n};\n\nconst Union = {\n  create(definition) {\n    check(definition, unionDefinitionPattern);\n\n    // Create a new Union constructor.\n    const Union = function Union(identifier) {\n      return Union[identifier];\n    };\n\n    // Copy list of types to the union constructor.\n    Union.types = _clone(definition.types);\n    // Copy casting function to the union constructor if defined.\n    if (typeof definition.cast === 'function') {\n      Union.cast = definition.cast;\n    }\n\n    // Create type definition for the given enum.\n    Type.create({\n      name: definition.name,\n      class: Union,\n      cast(value) {\n        return Union.cast ? Union.cast(value) : value;\n      },\n      validate(args) {\n        const caughtErrors = [];\n        // Check if a value will pass validation executed by any of the union\n        // types.\n        if (!_some(Union.types, (TypeClass) => {\n          const AstroType = Type.find(TypeClass);\n          try {\n            AstroType.validate(args);\n            return true;\n          }\n          catch (err) {\n            caughtErrors.push(err);\n            return false;\n          }\n        })) {\n          throw caughtErrors[0];\n        }\n      }\n    });\n    // Store enum in the unions list.\n    this.unions[definition.name] = Union;\n\n    return Union;\n  },\n  unions: {}\n};\n\nexport default Union;"]},"sourceType":"script","hash":"5c1fba7c492f04f650f4b8a9402ae86ac916f9f3"}
