{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\class_prototype_methods\\save.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/save.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\class_prototype_methods\\save.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\class_prototype_methods\\save.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/save.js"}},"code":"let _defaults;\n\nmodule.watch(require(\"lodash/defaults\"), {\n  default(v) {\n    _defaults = v;\n  }\n\n}, 0);\n\nlet _each;\n\nmodule.watch(require(\"lodash/each\"), {\n  default(v) {\n    _each = v;\n  }\n\n}, 1);\n\nlet _extend;\n\nmodule.watch(require(\"lodash/extend\"), {\n  default(v) {\n    _extend = v;\n  }\n\n}, 2);\n\nlet _omit;\n\nmodule.watch(require(\"lodash/omit\"), {\n  default(v) {\n    _omit = v;\n  }\n\n}, 3);\nlet DDP;\nmodule.watch(require(\"meteor/ddp\"), {\n  DDP(v) {\n    DDP = v;\n  }\n\n}, 4);\nlet documentInsert;\nmodule.watch(require(\"../utils/document_insert\"), {\n  default(v) {\n    documentInsert = v;\n  }\n\n}, 5);\nlet documentUpdate;\nmodule.watch(require(\"../utils/document_update\"), {\n  default(v) {\n    documentUpdate = v;\n  }\n\n}, 6);\nlet isRemote;\nmodule.watch(require(\"../utils/is_remote\"), {\n  default(v) {\n    isRemote = v;\n  }\n\n}, 7);\nlet callMeteorMethod;\nmodule.watch(require(\"../utils/call_meteor_method\"), {\n  default(v) {\n    callMeteorMethod = v;\n  }\n\n}, 8);\nlet rawAll;\nmodule.watch(require(\"../../fields/utils/rawAll\"), {\n  default(v) {\n    rawAll = v;\n  }\n\n}, 9);\nlet castNested;\nmodule.watch(require(\"../../fields/utils/castNested\"), {\n  default(v) {\n    castNested = v;\n  }\n\n}, 10);\nlet getModifier;\nmodule.watch(require(\"../../storage/utils/getModifier\"), {\n  default(v) {\n    getModifier = v;\n  }\n\n}, 11);\n\nfunction save() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let callback = arguments.length > 1 ? arguments[1] : undefined;\n  const doc = this;\n  const Class = doc.constructor;\n  const Collection = Class.getCollection(); // If the first argument is callback function then reassign values.\n\n  if (arguments.length === 1 && Match.test(options, Function)) {\n    callback = options;\n    options = {};\n  } // Set default options.\n\n\n  _defaults(options, {\n    stopOnFirstError: true,\n    simulation: true,\n    forceUpdate: false\n  }); // Cast all fields.\n\n\n  if (options.cast) {\n    _each(Class.getFields(), field => {\n      doc[field.name] = field.castValue(doc[field.name], {\n        clone: false,\n        cast: true\n      });\n    });\n  } // Cast only nested fields.\n  else {\n      castNested({\n        doc,\n        options: {\n          clone: false\n        }\n      });\n    } // Detect which operation we are executing.\n\n\n  const inserting = doc._isNew; // Generate ID if not provided.\n\n  if (inserting && !doc._id) {\n    let generateId = true; // Don't generate the id if we're the client and the 'outermost' call.\n    // This optimization saves us passing both the randomSeed and the id.\n    // Passing both is redundant.\n\n    if (Collection._isRemoteCollection()) {\n      const enclosing = DDP._CurrentInvocation.get();\n\n      if (!enclosing) {\n        generateId = false;\n      }\n    }\n\n    if (generateId) {\n      doc._id = Collection._makeNewID();\n    }\n  } // If we are dealing with a remote collection and we are not on the server.\n\n\n  if (isRemote(Class)) {\n    // Prepare meteor method name to be called.\n    const methodName = '/Astronomy/' + (inserting ? 'insert' : 'update'); // Prepare arguments for meteor method.\n\n    const methodArgs = {\n      className: Class.getName(),\n      stopOnFirstError: options.stopOnFirstError,\n      simulation: options.simulation\n    }; // Inserting.\n\n    if (inserting) {\n      _extend(methodArgs, {\n        rawDoc: rawAll(doc, {\n          transient: false\n        })\n      });\n    } // Updating.\n    else {\n        // If the \"forceUpdate\" option was set then we don't run the \"getModifier\"\n        // function to get modifier and instead we just take entire raw object and\n        // remove the \"_id\" field as we can't update it.\n        const modifier = options.forceUpdate ? _omit(doc.raw(), ['_id']) : getModifier({\n          doc\n        });\n\n        _extend(methodArgs, {\n          selector: {\n            _id: doc._id\n          },\n          modifier,\n          options: {},\n          fields: options.fields\n        });\n      }\n\n    try {\n      // Run Meteor method.\n      const result = callMeteorMethod(Class, methodName, [methodArgs], callback);\n\n      if (result && inserting) {\n        // In the insert operation the value return from the meteor method is\n        // a document ID.\n        doc._id = result;\n      } // Document is not new anymore.\n\n\n      doc._isNew = false;\n      return result;\n    } // Catch stub exceptions.\n    catch (err) {\n      if (callback) {\n        callback(err);\n        return null;\n      }\n\n      throw err;\n    }\n  } // If we can just insert a document without calling the meteor method. We may\n  // be on the server or the collection may be local.\n\n\n  try {\n    // Prepare arguments.\n    let methodArgs = {\n      doc,\n      stopOnFirstError: options.stopOnFirstError,\n      simulation: options.simulation,\n      trusted: true\n    };\n\n    if (inserting) {\n      let result = documentInsert(methodArgs);\n\n      if (callback) {\n        callback(undefined, result);\n      }\n\n      return result;\n    } else {\n      methodArgs.fields = options.fields;\n      let result = documentUpdate(methodArgs);\n\n      if (callback) {\n        callback(undefined, result);\n      }\n\n      return result;\n    }\n  } catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n\n    throw err;\n  }\n}\n\nmodule.exportDefault(save);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/storage/class_prototype_methods/save.js"],"names":["_defaults","module","watch","require","default","v","_each","_extend","_omit","DDP","documentInsert","documentUpdate","isRemote","callMeteorMethod","rawAll","castNested","getModifier","save","options","callback","doc","Class","constructor","Collection","getCollection","arguments","length","Match","test","Function","stopOnFirstError","simulation","forceUpdate","cast","getFields","field","name","castValue","clone","inserting","_isNew","_id","generateId","_isRemoteCollection","enclosing","_CurrentInvocation","get","_makeNewID","methodName","methodArgs","className","getName","rawDoc","transient","modifier","raw","selector","fields","result","err","trusted","undefined","exportDefault"],"mappings":"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","sourcesContent":["import _defaults from 'lodash/defaults';\nimport _each from 'lodash/each';\nimport _extend from 'lodash/extend';\nimport _omit from 'lodash/omit';\nimport { DDP } from 'meteor/ddp';\nimport documentInsert from '../utils/document_insert';\nimport documentUpdate from '../utils/document_update';\nimport isRemote from '../utils/is_remote';\nimport callMeteorMethod from '../utils/call_meteor_method';\nimport rawAll from '../../fields/utils/rawAll';\nimport castNested from '../../fields/utils/castNested';\nimport getModifier from '../../storage/utils/getModifier';\n\nfunction save(options = {}, callback) {\n  const doc = this;\n  const Class = doc.constructor;\n  const Collection = Class.getCollection();\n\n  // If the first argument is callback function then reassign values.\n  if (arguments.length === 1 && Match.test(options, Function)) {\n    callback = options;\n    options = {};\n  }\n\n  // Set default options.\n  _defaults(options, {\n    stopOnFirstError: true,\n    simulation: true,\n    forceUpdate: false\n  });\n\n  // Cast all fields.\n  if (options.cast) {\n    _each(Class.getFields(), (field) => {\n      doc[field.name] = field.castValue(doc[field.name], {\n        clone: false,\n        cast: true\n      });\n    });\n  }\n  // Cast only nested fields.\n  else {\n    castNested({\n      doc,\n      options: {\n        clone: false\n      }\n    });\n  }\n\n  // Detect which operation we are executing.\n  const inserting = doc._isNew;\n\n  // Generate ID if not provided.\n  if (inserting && !doc._id) {\n    let generateId = true;\n    // Don't generate the id if we're the client and the 'outermost' call.\n    // This optimization saves us passing both the randomSeed and the id.\n    // Passing both is redundant.\n    if (Collection._isRemoteCollection()) {\n      const enclosing = DDP._CurrentInvocation.get();\n      if (!enclosing) {\n        generateId = false;\n      }\n    }\n    if (generateId) {\n      doc._id = Collection._makeNewID();\n    }\n  }\n\n  // If we are dealing with a remote collection and we are not on the server.\n  if (isRemote(Class)) {\n    // Prepare meteor method name to be called.\n    const methodName = '/Astronomy/' + (inserting ? 'insert' : 'update');\n    // Prepare arguments for meteor method.\n    const methodArgs = {\n      className: Class.getName(),\n      stopOnFirstError: options.stopOnFirstError,\n      simulation: options.simulation,\n    };\n    // Inserting.\n    if (inserting) {\n      _extend(methodArgs, {\n        rawDoc: rawAll(doc, {\n          transient: false\n        })\n      });\n    }\n    // Updating.\n    else {\n      // If the \"forceUpdate\" option was set then we don't run the \"getModifier\"\n      // function to get modifier and instead we just take entire raw object and\n      // remove the \"_id\" field as we can't update it.\n      const modifier = options.forceUpdate ? _omit(doc.raw(), ['_id']) : getModifier({doc});\n      _extend(methodArgs, {\n        selector: {\n          _id: doc._id\n        },\n        modifier,\n        options: {},\n        fields: options.fields\n      });\n    }\n\n    try {\n      // Run Meteor method.\n      const result = callMeteorMethod(\n        Class, methodName, [methodArgs], callback\n      );\n      if (result && inserting) {\n        // In the insert operation the value return from the meteor method is\n        // a document ID.\n        doc._id = result;\n      }\n      // Document is not new anymore.\n      doc._isNew = false;\n      return result;\n    }\n    // Catch stub exceptions.\n    catch (err) {\n      if (callback) {\n        callback(err);\n        return null;\n      }\n      throw err;\n    }\n  }\n\n  // If we can just insert a document without calling the meteor method. We may\n  // be on the server or the collection may be local.\n  try {\n    // Prepare arguments.\n    let methodArgs = {\n      doc,\n      stopOnFirstError: options.stopOnFirstError,\n      simulation: options.simulation,\n      trusted: true\n    };\n    if (inserting) {\n      let result = documentInsert(methodArgs);\n      if (callback) {\n        callback(undefined, result);\n      }\n      return result;\n    }\n    else {\n      methodArgs.fields = options.fields;\n      let result = documentUpdate(methodArgs);\n      if (callback) {\n        callback(undefined, result);\n      }\n      return result;\n    }\n  }\n  catch (err) {\n    if (callback) {\n      callback(err);\n      return null;\n    }\n    throw err;\n  }\n}\n\nexport default save;"]},"sourceType":"script","hash":"1899ec073e8fcca2030931c4800ab60471df65f7"}
