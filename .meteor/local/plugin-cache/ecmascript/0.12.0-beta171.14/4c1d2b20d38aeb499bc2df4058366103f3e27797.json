{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\srp\\srp.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/srp/srp.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\srp\\srp.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","presets":[],"generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\srp\\srp.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/srp/srp.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/builtin/objectSpread\"));\n\n// This package contains just enough of the original SRP code to\n// support the backwards-compatibility upgrade path.\n//\n// An SRP (and possibly also accounts-srp) package should eventually be\n// available in Atmosphere so that users can continue to use SRP if they\n// want to.\nSRP = {};\n/**\n * Generate a new SRP verifier. Password is the plaintext password.\n *\n * options is optional and can include:\n * - identity: String. The SRP username to user. Mostly this is passed\n *   in for testing.  Random UUID if not provided.\n * - hashedIdentityAndPassword: combined identity and password, already hashed, for the SRP to bcrypt upgrade path.\n * - salt: String. A salt to use.  Mostly this is passed in for\n *   testing.  Random UUID if not provided.\n * - SRP parameters (see _defaults and paramsFromOptions below)\n */\n\nSRP.generateVerifier = function (password, options) {\n  var params = paramsFromOptions(options);\n  var salt = options && options.salt || Random.secret();\n  var identity;\n  var hashedIdentityAndPassword = options && options.hashedIdentityAndPassword;\n\n  if (!hashedIdentityAndPassword) {\n    identity = options && options.identity || Random.secret();\n    hashedIdentityAndPassword = params.hash(identity + \":\" + password);\n  }\n\n  var x = params.hash(salt + hashedIdentityAndPassword);\n  var xi = new BigInteger(x, 16);\n  var v = params.g.modPow(xi, params.N);\n  return {\n    identity: identity,\n    salt: salt,\n    verifier: v.toString(16)\n  };\n}; // For use with check().\n\n\nSRP.matchVerifier = {\n  identity: String,\n  salt: String,\n  verifier: String\n};\n/**\n * Default parameter values for SRP.\n *\n */\n\nvar _defaults = {\n  hash: function (x) {\n    return SHA256(x).toLowerCase();\n  },\n  N: new BigInteger(\"EEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE48E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B297BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9AFD5138FE8376435B9FC61D2FC0EB06E3\", 16),\n  g: new BigInteger(\"2\")\n};\n_defaults.k = new BigInteger(_defaults.hash(_defaults.N.toString(16) + _defaults.g.toString(16)), 16);\n/**\n * Process an options hash to create SRP parameters.\n *\n * Options can include:\n * - hash: Function. Defaults to SHA256.\n * - N: String or BigInteger. Defaults to 1024 bit value from RFC 5054\n * - g: String or BigInteger. Defaults to 2.\n * - k: String or BigInteger. Defaults to hash(N, g)\n */\n\nvar paramsFromOptions = function (options) {\n  if (!options) // fast path\n    return _defaults;\n  var ret = (0, _objectSpread2.default)({}, _defaults);\n  ['N', 'g', 'k'].forEach(function (p) {\n    if (options[p]) {\n      if (typeof options[p] === \"string\") ret[p] = new BigInteger(options[p], 16);else if (options[p] instanceof BigInteger) ret[p] = options[p];else throw new Error(\"Invalid parameter: \" + p);\n    }\n  });\n  if (options.hash) ret.hash = function (x) {\n    return options.hash(x).toLowerCase();\n  };\n\n  if (!options.k && (options.N || options.g || options.hash)) {\n    ret.k = ret.hash(ret.N.toString(16) + ret.g.toString(16));\n  }\n\n  return ret;\n};","map":{"version":3,"sources":["packages/srp/srp.js"],"names":["SRP","generateVerifier","password","options","params","paramsFromOptions","salt","Random","secret","identity","hashedIdentityAndPassword","hash","x","xi","BigInteger","v","g","modPow","N","verifier","toString","matchVerifier","String","_defaults","SHA256","toLowerCase","k","ret","forEach","p","Error"],"mappings":"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","sourcesContent":["// This package contains just enough of the original SRP code to\n// support the backwards-compatibility upgrade path.\n//\n// An SRP (and possibly also accounts-srp) package should eventually be\n// available in Atmosphere so that users can continue to use SRP if they\n// want to.\n\nSRP = {};\n\n/**\n * Generate a new SRP verifier. Password is the plaintext password.\n *\n * options is optional and can include:\n * - identity: String. The SRP username to user. Mostly this is passed\n *   in for testing.  Random UUID if not provided.\n * - hashedIdentityAndPassword: combined identity and password, already hashed, for the SRP to bcrypt upgrade path.\n * - salt: String. A salt to use.  Mostly this is passed in for\n *   testing.  Random UUID if not provided.\n * - SRP parameters (see _defaults and paramsFromOptions below)\n */\nSRP.generateVerifier = function (password, options) {\n  var params = paramsFromOptions(options);\n\n  var salt = (options && options.salt) || Random.secret();\n\n  var identity;\n  var hashedIdentityAndPassword = options && options.hashedIdentityAndPassword;\n  if (!hashedIdentityAndPassword) {\n    identity = (options && options.identity) || Random.secret();\n    hashedIdentityAndPassword = params.hash(identity + \":\" + password);\n  }\n\n  var x = params.hash(salt + hashedIdentityAndPassword);\n  var xi = new BigInteger(x, 16);\n  var v = params.g.modPow(xi, params.N);\n\n  return {\n    identity: identity,\n    salt: salt,\n    verifier: v.toString(16)\n  };\n};\n\n// For use with check().\nSRP.matchVerifier = {\n  identity: String,\n  salt: String,\n  verifier: String\n};\n\n\n/**\n * Default parameter values for SRP.\n *\n */\nvar _defaults = {\n  hash: function (x) { return SHA256(x).toLowerCase(); },\n  N: new BigInteger(\"EEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE48E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B297BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9AFD5138FE8376435B9FC61D2FC0EB06E3\", 16),\n  g: new BigInteger(\"2\")\n};\n_defaults.k = new BigInteger(\n  _defaults.hash(\n    _defaults.N.toString(16) +\n      _defaults.g.toString(16)),\n  16);\n\n/**\n * Process an options hash to create SRP parameters.\n *\n * Options can include:\n * - hash: Function. Defaults to SHA256.\n * - N: String or BigInteger. Defaults to 1024 bit value from RFC 5054\n * - g: String or BigInteger. Defaults to 2.\n * - k: String or BigInteger. Defaults to hash(N, g)\n */\nvar paramsFromOptions = function (options) {\n  if (!options) // fast path\n    return _defaults;\n\n  var ret = { ..._defaults };\n\n  ['N', 'g', 'k'].forEach(function (p) {\n    if (options[p]) {\n      if (typeof options[p] === \"string\")\n        ret[p] = new BigInteger(options[p], 16);\n      else if (options[p] instanceof BigInteger)\n        ret[p] = options[p];\n      else\n        throw new Error(\"Invalid parameter: \" + p);\n    }\n  });\n\n  if (options.hash)\n    ret.hash = function (x) { return options.hash(x).toLowerCase(); };\n\n  if (!options.k && (options.N || options.g || options.hash)) {\n    ret.k = ret.hash(ret.N.toString(16) + ret.g.toString(16));\n  }\n\n  return ret;\n};\n"]},"sourceType":"script","hash":"4c1d2b20d38aeb499bc2df4058366103f3e27797"}
