{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\class_prototype_methods\\set.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/fields/class_prototype_methods/set.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\class_prototype_methods\\set.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\fields\\class_prototype_methods\\set.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/fields/class_prototype_methods/set.js"}},"code":"let _each;\n\nmodule.watch(require(\"lodash/each\"), {\n  default(v) {\n    _each = v;\n  }\n\n}, 0);\n\nlet _extend;\n\nmodule.watch(require(\"lodash/extend\"), {\n  default(v) {\n    _extend = v;\n  }\n\n}, 1);\n\nlet _isArray;\n\nmodule.watch(require(\"lodash/isArray\"), {\n  default(v) {\n    _isArray = v;\n  }\n\n}, 2);\n\nlet _isPlainObject;\n\nmodule.watch(require(\"lodash/isPlainObject\"), {\n  default(v) {\n    _isPlainObject = v;\n  }\n\n}, 3);\nlet config;\nmodule.watch(require(\"../../../core/config\"), {\n  default(v) {\n    config = v;\n  }\n\n}, 4);\nlet setMany;\nmodule.watch(require(\"../utils/set_many\"), {\n  default(v) {\n    setMany = v;\n  }\n\n}, 5);\nlet setOne;\nmodule.watch(require(\"../utils/set_one\"), {\n  default(v) {\n    setOne = v;\n  }\n\n}, 6);\nlet castNested;\nmodule.watch(require(\"../utils/castNested\"), {\n  default(v) {\n    castNested = v;\n  }\n\n}, 7);\n\nfunction merge(doc) {\n  const result = {};\n\n  _each(doc, (fieldValue, fieldName) => {\n    // If a field value is an object then we prefix each nested field name with\n    // a field name of the parent object. However, we can not do it for arrays\n    // as it's not obvious how we would like to merge arrays - concat/replace?\n    if (_isPlainObject(fieldValue) && !_isArray(fieldValue)) {\n      _each(merge(fieldValue), (nestedFieldValue, nestedFieldName) => {\n        result[\"\".concat(fieldName, \".\").concat(nestedFieldName)] = nestedFieldValue;\n      });\n    } else {\n      result[fieldName] = fieldValue;\n    }\n  });\n\n  return result;\n}\n\nfunction set() {\n  const doc = this; // Default options.\n\n  const options = {\n    defaults: config.defaults,\n    clone: true,\n    cast: false,\n    merge: false\n  }; // Setting single field.\n\n  if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string' && arguments.length >= 2) {\n    // The last argument is an options object.\n    if (_isPlainObject(arguments.length <= 2 ? undefined : arguments[2])) {\n      _extend(options, arguments.length <= 2 ? undefined : arguments[2]);\n    } // Do not override values if the \"merge\" option is set and instead merge\n    // nested objects.\n\n\n    if (options.merge && _isPlainObject(arguments.length <= 1 ? undefined : arguments[1])) {\n      setMany(doc, merge({\n        [arguments.length <= 0 ? undefined : arguments[0]]: arguments.length <= 1 ? undefined : arguments[1]\n      }), options);\n    } else {\n      setOne(doc, arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], options);\n    }\n  } // Setting multiple fields at once.\n  else if (_isPlainObject(arguments.length <= 0 ? undefined : arguments[0]) && arguments.length >= 1) {\n      // The last argument is an options object.\n      if (_isPlainObject(arguments.length <= 1 ? undefined : arguments[1])) {\n        _extend(options, arguments.length <= 1 ? undefined : arguments[1]);\n      } // Do not override values if the \"merge\" option is set and instead merge\n      // nested objects.\n\n\n      if (options.merge) {\n        setMany(doc, merge(arguments.length <= 0 ? undefined : arguments[0]), options);\n      } else {\n        setMany(doc, arguments.length <= 0 ? undefined : arguments[0], options);\n      }\n    }\n}\n\n;\nmodule.exportDefault(set);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/fields/class_prototype_methods/set.js"],"names":["_each","module","watch","require","default","v","_extend","_isArray","_isPlainObject","config","setMany","setOne","castNested","merge","doc","result","fieldValue","fieldName","nestedFieldValue","nestedFieldName","set","options","defaults","clone","cast","length","exportDefault"],"mappings":"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","sourcesContent":["import _each from 'lodash/each';\nimport _extend from 'lodash/extend';\nimport _isArray from 'lodash/isArray';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport config from '../../../core/config';\nimport setMany from '../utils/set_many';\nimport setOne from '../utils/set_one';\nimport castNested from '../utils/castNested';\n\nfunction merge(doc) {\n  const result = {};\n  _each(doc, (fieldValue, fieldName) => {\n    // If a field value is an object then we prefix each nested field name with\n    // a field name of the parent object. However, we can not do it for arrays\n    // as it's not obvious how we would like to merge arrays - concat/replace?\n    if (_isPlainObject(fieldValue) && !_isArray(fieldValue)) {\n      _each(merge(fieldValue), (nestedFieldValue, nestedFieldName) => {\n        result[`${fieldName}.${nestedFieldName}`] = nestedFieldValue;\n      });\n    }\n    else {\n      result[fieldName] = fieldValue;\n    }\n  });\n  return result;\n}\n\nfunction set(...args) {\n  const doc = this;\n\n  // Default options.\n  const options = {\n    defaults: config.defaults,\n    clone: true,\n    cast: false,\n    merge: false\n  };\n\n  // Setting single field.\n  if (typeof args[0] === 'string' && args.length >= 2) {\n    // The last argument is an options object.\n    if (_isPlainObject(args[2])) {\n      _extend(options, args[2]);\n    }\n    // Do not override values if the \"merge\" option is set and instead merge\n    // nested objects.\n    if (options.merge && _isPlainObject(args[1])) {\n      setMany(doc, merge({\n        [args[0]]: args[1]\n      }), options);\n    }\n    else {\n      setOne(doc, args[0], args[1], options);\n    }\n  }\n  // Setting multiple fields at once.\n  else if (_isPlainObject(args[0]) && args.length >= 1) {\n    // The last argument is an options object.\n    if (_isPlainObject(args[1])) {\n      _extend(options, args[1]);\n    }\n    // Do not override values if the \"merge\" option is set and instead merge\n    // nested objects.\n    if (options.merge) {\n      setMany(doc, merge(args[0]), options);\n    }\n    else {\n      setMany(doc, args[0], options);\n    }\n  }\n};\n\nexport default set;"]},"sourceType":"script","hash":"9dd8fa1a2ebfc0f2a529aeb75591862b3e20fa23"}
