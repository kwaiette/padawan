{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\utils\\getModifier.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/storage/utils/getModifier.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\utils\\getModifier.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\utils\\getModifier.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/storage/utils/getModifier.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar module1 = module;\n\nvar _each;\n\nmodule1.watch(require(\"lodash/each\"), {\n  \"default\": function (v) {\n    _each = v;\n  }\n}, 0);\n\nvar _isNumber;\n\nmodule1.watch(require(\"lodash/isNumber\"), {\n  \"default\": function (v) {\n    _isNumber = v;\n  }\n}, 1);\n\nvar _isPlainObject;\n\nmodule1.watch(require(\"lodash/isPlainObject\"), {\n  \"default\": function (v) {\n    _isPlainObject = v;\n  }\n}, 2);\n\nvar _omitBy;\n\nmodule1.watch(require(\"lodash/omitBy\"), {\n  \"default\": function (v) {\n    _omitBy = v;\n  }\n}, 3);\n\nvar _size;\n\nmodule1.watch(require(\"lodash/size\"), {\n  \"default\": function (v) {\n    _size = v;\n  }\n}, 4);\nvar EJSON;\nmodule1.watch(require(\"meteor/ejson\"), {\n  EJSON: function (v) {\n    EJSON = v;\n  }\n}, 5);\nvar throwParseError;\nmodule1.watch(require(\"../../core/utils/throw_parse_error.js\"), {\n  \"default\": function (v) {\n    throwParseError = v;\n  }\n}, 6);\nvar rawMany;\nmodule1.watch(require(\"../../fields/utils/rawMany\"), {\n  \"default\": function (v) {\n    rawMany = v;\n  }\n}, 7);\nvar diff;\nmodule1.watch(require(\"./diff\"), {\n  \"default\": function (v) {\n    diff = v;\n  }\n}, 8);\nvar handlers = {};\n\nhandlers.onObjectDiff = function (_ref) {\n  var oldDoc = _ref.oldDoc,\n      newDoc = _ref.newDoc,\n      prefix = _ref.prefix,\n      result = _ref.result;\n  diff((0, _objectSpread2.default)({\n    oldDoc: oldDoc,\n    newDoc: newDoc,\n    prefix: prefix,\n    result: result\n  }, handlers));\n};\n\nhandlers.onListDiff = function (_ref2) {\n  var oldList = _ref2.oldList,\n      newList = _ref2.newList,\n      prefix = _ref2.prefix,\n      result = _ref2.result;\n\n  // NOTE: We need check a new array size. If its length increased or stayed the\n  // same then all changes can be registered using the $set modifier. If an\n  // array length decreased, then we should slice it. However it may not be\n  // possible if some element has also changed. In such situation we have to\n  // override entire array.\n  // Array length decreased.\n  if (newList.length < oldList.length) {\n    // Due to an error in MiniMongo it's not possible to apply $push modifier\n    // with the $slice operator set to positive number. That's why we have to\n    // override entire array when it was shrinked.\n    result.$set[prefix] = newList;\n  } // Array length increased or stayed the same.\n  else if (newList.length >= oldList.length) {\n      var modified = false; // Compare up to number of elements in the new list.\n\n      _each(newList, function (newElement, index) {\n        var arrayPrefix = prefix + \".\" + index;\n        var oldElement = oldList[index]; // When iterating over elements up to old array length.\n\n        if (index < oldList.length) {\n          if (!EJSON.equals(oldElement, newElement)) {\n            modified = true; // If both array elements are object, then we perform diff.\n\n            if (_isPlainObject(oldElement) && _isPlainObject(newElement)) {\n              // Get a difference between elements.\n              diff((0, _objectSpread2.default)({\n                oldDoc: oldElement,\n                newDoc: newElement,\n                prefix: arrayPrefix,\n                result: result\n              }, handlers));\n            } else {\n              result.$set[arrayPrefix] = newElement;\n            }\n          }\n        } // When iterating over newly added array elements.\n        else {\n            // Elements up to the old array length were modified, so we can not\n            // use the $push operator in conjunction with the $set operator.\n            if (modified) {\n              // If both array elements are object, then we perform diff.\n              if (_isPlainObject(oldElement) && _isPlainObject(newElement)) {\n                // Get a difference between elements.\n                diff((0, _objectSpread2.default)({\n                  oldDoc: oldElement,\n                  newDoc: newElement,\n                  prefix: arrayPrefix,\n                  result: result\n                }, handlers));\n              } else {\n                result.$set[arrayPrefix] = newElement;\n              }\n            } // Elements up to the old array length were not modified, so if there\n            // is any new array element added, we can insert it with the $push\n            // operator.\n            else {\n                // We have to check if there is only one element being pushed or\n                // more. If there is only one element then we use\n                // $push[prefix]: element\n                if (newList.length - oldList.length === 1) {\n                  result.$push[prefix] = newElement;\n                } // If there are more elements we have to use\n                // $push: { [prefix]: { $each: elements } }\n                else {\n                    result.$push[prefix] = {\n                      $each: newList.slice(index)\n                    }; // We have to break each loop here. We don't need to check any\n                    // more elements.\n\n                    return false;\n                  }\n              }\n          }\n      });\n    }\n};\n\nhandlers.onScalarDiff = function (_ref3) {\n  var oldValue = _ref3.oldValue,\n      newValue = _ref3.newValue,\n      prefix = _ref3.prefix,\n      result = _ref3.result;\n\n  if (newValue !== undefined) {\n    if (_isNumber(oldValue) && _isNumber(newValue)) {\n      result.$inc[prefix] = newValue - oldValue;\n    } else {\n      result.$set[prefix] = newValue;\n    }\n  } else {\n    result.$unset[prefix] = '';\n  }\n};\n\nvar getModifier = function () {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var newDoc = options.doc,\n      _options$transient = options.transient,\n      transient = _options$transient === void 0 ? false : _options$transient,\n      _options$immutable = options.immutable,\n      immutable = _options$immutable === void 0 ? false : _options$immutable,\n      fields = options.fields,\n      oldDoc = options.oldDoc;\n  var Class = newDoc.constructor;\n  var opts = {\n    defaults: false\n  };\n\n  if (!oldDoc) {\n    oldDoc = Class.findOne(newDoc._id, opts);\n  }\n\n  if (!oldDoc) {\n    oldDoc = new Class({}, opts);\n  } // If there is no document before modifications that may mean that we are not\n  // subscribed to the publication publishing given document or we modified the\n  // _id of a document.\n\n\n  if (!oldDoc) {\n    throwParseError([{\n      'module': 'storage'\n    }, {\n      'utility': 'getModified'\n    }, \"Can not get a document before modifications. You are not subscribed \" + (\"to the publication publishing a \\\"\" + Class.getName() + \"\\\" document with \") + (\"the id \\\"\" + newDoc._id + \"\\\" or you have modified the \\\"_id\\\" field\")]);\n  } // If there are not fields specified, then get all of them.\n\n\n  if (!fields) {\n    fields = Class.getFieldsNames();\n  }\n\n  var result = {\n    $set: {},\n    $inc: {},\n    $unset: {},\n    $push: {}\n  };\n  diff((0, _objectSpread2.default)({\n    // Get raw data from the docs.\n    oldDoc: rawMany(oldDoc, fields, {\n      \"transient\": transient,\n      immutable: immutable,\n      undefined: false\n    }),\n    newDoc: rawMany(newDoc, fields, {\n      \"transient\": transient,\n      immutable: immutable,\n      undefined: false\n    }),\n    result: result\n  }, handlers)); // Return only non empty modifiers.\n\n  return _omitBy(result, function (modifier) {\n    return _size(modifier) === 0;\n  });\n};\n\nmodule1.exportDefault(getModifier);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/storage/utils/getModifier.js"],"names":["module1","module","_each","watch","require","v","_isNumber","_isPlainObject","_omitBy","_size","EJSON","throwParseError","rawMany","diff","handlers","onObjectDiff","oldDoc","newDoc","prefix","result","onListDiff","oldList","newList","length","$set","modified","newElement","index","arrayPrefix","oldElement","equals","$push","$each","slice","onScalarDiff","oldValue","newValue","undefined","$inc","$unset","getModifier","options","doc","transient","immutable","fields","Class","constructor","opts","defaults","findOne","_id","getName","getFieldsNames","modifier","exportDefault"],"mappings":"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","sourcesContent":["import _each from 'lodash/each';\nimport _isNumber from 'lodash/isNumber';\nimport _isPlainObject from 'lodash/isPlainObject';\nimport _omitBy from 'lodash/omitBy';\nimport _size from 'lodash/size';\nimport { EJSON } from 'meteor/ejson';\nimport throwParseError from '../../core/utils/throw_parse_error.js';\nimport rawMany from '../../fields/utils/rawMany';\nimport diff from './diff';\n\nconst handlers = {};\n\nhandlers.onObjectDiff = function({oldDoc, newDoc, prefix, result}) {\n  diff({\n    oldDoc,\n    newDoc,\n    prefix,\n    result,\n    ...handlers\n  });\n};\n\nhandlers.onListDiff = function({oldList, newList, prefix, result}) {\n  // NOTE: We need check a new array size. If its length increased or stayed the\n  // same then all changes can be registered using the $set modifier. If an\n  // array length decreased, then we should slice it. However it may not be\n  // possible if some element has also changed. In such situation we have to\n  // override entire array.\n\n  // Array length decreased.\n  if (newList.length < oldList.length) {\n    // Due to an error in MiniMongo it's not possible to apply $push modifier\n    // with the $slice operator set to positive number. That's why we have to\n    // override entire array when it was shrinked.\n    result.$set[prefix] = newList;\n  }\n  // Array length increased or stayed the same.\n  else if (newList.length >= oldList.length) {\n    let modified = false;\n    // Compare up to number of elements in the new list.\n    _each(newList, (newElement, index) => {\n      const arrayPrefix = `${prefix}.${index}`;\n      const oldElement = oldList[index];\n      // When iterating over elements up to old array length.\n      if (index < oldList.length) {\n        if (!EJSON.equals(oldElement, newElement)) {\n          modified = true;\n          // If both array elements are object, then we perform diff.\n          if (_isPlainObject(oldElement) && _isPlainObject(newElement)) {\n            // Get a difference between elements.\n            diff({\n              oldDoc: oldElement,\n              newDoc: newElement,\n              prefix: arrayPrefix,\n              result,\n              ...handlers\n            });\n          }\n          else {\n            result.$set[arrayPrefix] = newElement;\n          }\n        }\n      }\n      // When iterating over newly added array elements.\n      else {\n        // Elements up to the old array length were modified, so we can not\n        // use the $push operator in conjunction with the $set operator.\n        if (modified) {\n          // If both array elements are object, then we perform diff.\n          if (_isPlainObject(oldElement) && _isPlainObject(newElement)) {\n            // Get a difference between elements.\n            diff({\n              oldDoc: oldElement,\n              newDoc: newElement,\n              prefix: arrayPrefix,\n              result,\n              ...handlers\n            });\n          }\n          else {\n            result.$set[arrayPrefix] = newElement;\n          }\n        }\n        // Elements up to the old array length were not modified, so if there\n        // is any new array element added, we can insert it with the $push\n        // operator.\n        else {\n          // We have to check if there is only one element being pushed or\n          // more. If there is only one element then we use\n          // $push[prefix]: element\n          if (newList.length - oldList.length === 1) {\n            result.$push[prefix] = newElement;\n          }\n          // If there are more elements we have to use\n          // $push: { [prefix]: { $each: elements } }\n          else {\n            result.$push[prefix] = {\n              $each: newList.slice(index)\n            };\n            // We have to break each loop here. We don't need to check any\n            // more elements.\n            return false;\n          }\n        }\n      }\n    });\n  }\n};\n\nhandlers.onScalarDiff = function({oldValue, newValue, prefix, result}) {\n  if (newValue !== undefined) {\n    if (_isNumber(oldValue) && _isNumber(newValue)) {\n      result.$inc[prefix] = newValue - oldValue;\n    }\n    else {\n      result.$set[prefix] = newValue;\n    }\n  }\n  else {\n    result.$unset[prefix] = '';\n  }\n};\n\nconst getModifier = function(options = {}) {\n  let {\n    doc: newDoc,\n    transient = false,\n    immutable = false,\n    fields,\n    oldDoc\n  } = options;\n\n  const Class = newDoc.constructor;\n  const opts = {\n    defaults: false\n  };\n  if (!oldDoc) {\n    oldDoc = Class.findOne(newDoc._id, opts);\n  }\n  if (!oldDoc) {\n    oldDoc = new Class({}, opts);\n  }\n\n  // If there is no document before modifications that may mean that we are not\n  // subscribed to the publication publishing given document or we modified the\n  // _id of a document.\n  if (!oldDoc) {\n    throwParseError([{\n        'module': 'storage'\n      }, {\n        'utility': 'getModified'\n      },\n      `Can not get a document before modifications. You are not subscribed ` +\n      `to the publication publishing a \"${Class.getName()}\" document with ` +\n      `the id \"${newDoc._id}\" or you have modified the \"_id\" field`\n    ]);\n  }\n\n  // If there are not fields specified, then get all of them.\n  if (!fields) {\n    fields = Class.getFieldsNames();\n  }\n\n  const result = {\n    $set: {},\n    $inc: {},\n    $unset: {},\n    $push: {}\n  };\n  diff({\n    // Get raw data from the docs.\n    oldDoc: rawMany(oldDoc, fields, {\n      transient,\n      immutable,\n      undefined: false\n    }),\n    newDoc: rawMany(newDoc, fields, {\n      transient,\n      immutable,\n      undefined: false\n    }),\n    result,\n    ...handlers\n  });\n\n  // Return only non empty modifiers.\n  return _omitBy(result, (modifier) => {\n    return _size(modifier) === 0;\n  });\n};\n\nexport default getModifier;"]},"sourceType":"script","hash":"59f5db935e55bca2ca2bdfc7a4d4e73fa6a03621"}
