{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\imports\\api\\categories\\categories.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"imports/api/categories/categories.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\imports\\api\\categories\\categories.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","presets":[],"generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\imports\\api\\categories\\categories.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/api/categories/categories.js"}},"code":"module.export({\n  Category: () => Category,\n  CategoryManager: () => CategoryManager\n});\nlet Class;\nmodule.watch(require(\"meteor/jagi:astronomy\"), {\n  Class(v) {\n    Class = v;\n  }\n\n}, 0);\nlet check;\nmodule.watch(require(\"meteor/check\"), {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nconst DefaultCategoryID = \"xhKdwhacaWTcBTGPn\";\nconst TypeStats = Class.create({\n  name: 'TypeStats',\n  fields: {\n    num: {\n      type: Number,\n      default: 0\n    }\n  }\n});\nconst Category = Class.create({\n  name: 'Category',\n  collection: new Mongo.Collection('categories'),\n  fields: {\n    name: {\n      type: String,\n      default: \"the Unnamed Category\"\n    },\n    description: {\n      type: String,\n      default: \"this is the default stuff for a Category\"\n    },\n    stats: {\n      type: Object,\n      default: function () {\n        return {};\n      }\n    }\n  },\n  helpers: {\n    addByType(type) {\n      if (!this.getStatsByType(type)) {\n        this.stats[type] = new TypeStats();\n      }\n\n      this.getStatsByType(type).num++;\n      this.save();\n    },\n\n    removeByType(type) {\n      if (!this.getStatsByType(type)) {\n        return false;\n      }\n\n      this.getStatsByType(type).num--;\n      this.save();\n    },\n\n    getStatsByType(type) {\n      return this.stats[type];\n    }\n\n  },\n  meteorMethods: {\n    update(name, dscr) {\n      if (Roles.userIsInRole(Meteor.userId(), 'admin', Roles.GLOBAL_GROUP)) {\n        this.name = name;\n        this.description = dscr;\n        console.log(this.save());\n      }\n    }\n\n  }\n});\nCategory.Default = Category.findOne({\n  _id: DefaultCategoryID\n});\n\nif (typeof Category.Default === \"undefined\") {\n  Category.Default = new Category({\n    _id: DefaultCategoryID\n  });\n\n  if (Meteor.isServer) {\n    Category.Default.save();\n  }\n}\n\nconst CategoryManager = Class.create({\n  name: 'CategoryManager',\n  fields: {\n    Categories: {\n      type: [String],\n      default: function () {\n        return [];\n      }\n    },\n    Type: {\n      type: String,\n      default: \"um... what!?\"\n    }\n  },\n  helpers: {\n    length() {\n      return this.Categories.length;\n    },\n\n    areIntersected(categoryManager) {\n      for (let i = 0; i < this.Categories.length; i++) {\n        for (let j = 0; j < categoryManager.Categories.length; i++) {\n          if (this.Categories[i] == categoryManager.Categories[j]) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    },\n\n    addCategory(category, type) {\n      if (!type) {\n        type = this.Type;\n      }\n\n      this.Categories.push(category._id);\n      category.addByType(type);\n    },\n\n    hasCategory(category) {\n      if (this.Categories.length == 0) {\n        this.addCategory(Category.Default, this.Type);\n      }\n\n      return _.find(this.Categories, function (catId) {\n        return category._id == catId;\n      });\n    },\n\n    removeCategory(category, type, skipSlice) {\n      let index = -1;\n\n      _.each(this.Categories, function (catId, i) {\n        if (catId == category._id) {\n          index = i;\n        }\n      });\n\n      if (index < 0) {\n        return false;\n      }\n\n      if (!skipSlice) {\n        if (index == 0) {\n          this.Categories.shift();\n        } else if (index == this.Categories.length - 1) {\n          this.Categories.pop();\n        } else {\n          this.Categories = this.Categories.slice(0, index).concat(this.Categories.slice(index + 1));\n        }\n      }\n\n      category.removeByType(type);\n    }\n\n  }\n});\n\nCategoryManager.OfType = function (type) {\n  let c = new CategoryManager();\n  c.Type = type;\n  return c;\n};","map":{"version":3,"sources":["imports/api/categories/categories.js"],"names":["module","export","Category","CategoryManager","Class","watch","require","v","check","DefaultCategoryID","TypeStats","create","name","fields","num","type","Number","default","collection","Mongo","Collection","String","description","stats","Object","helpers","addByType","getStatsByType","save","removeByType","meteorMethods","update","dscr","Roles","userIsInRole","Meteor","userId","GLOBAL_GROUP","console","log","Default","findOne","_id","isServer","Categories","Type","length","areIntersected","categoryManager","i","j","addCategory","category","push","hasCategory","_","find","catId","removeCategory","skipSlice","index","each","shift","pop","slice","concat","OfType","c"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,YAAS,MAAIA,QAAd;AAAuBC,mBAAgB,MAAIA;AAA3C,CAAd;AAA2E,IAAIC,KAAJ;AAAUJ,OAAOK,KAAP,CAAaC,QAAQ,uBAAR,CAAb,EAA8C;AAACF,QAAMG,CAAN,EAAQ;AAACH,YAAMG,CAAN;AAAQ;;AAAlB,CAA9C,EAAkE,CAAlE;AAAqE,IAAIC,KAAJ;AAAUR,OAAOK,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACE,QAAMD,CAAN,EAAQ;AAACC,YAAMD,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAEpK,MAAME,oBAAoB,mBAA1B;AACA,MAAMC,YAAYN,MAAMO,MAAN,CAAa;AAC3BC,QAAM,WADqB;AAE3BC,UAAQ;AACJC,SAAK;AACDC,YAAMC,MADL;AAEDC,eAAS;AAFR;AADD;AAFmB,CAAb,CAAlB;AASA,MAAMf,WAAWE,MAAMO,MAAN,CAAa;AAC1BC,QAAM,UADoB;AAE1BM,cAAY,IAAIC,MAAMC,UAAV,CAAqB,YAArB,CAFc;AAG1BP,UAAQ;AACJD,UAAM;AACFG,YAAMM,MADJ;AAEFJ,eAAS;AAFP,KADF;AAKJK,iBAAa;AACTP,YAAMM,MADG;AAETJ,eAAS;AAFA,KALT;AASJM,WAAO;AACHR,YAAMS,MADH;AAEHP,eAAS,YAAY;AAAE,eAAO,EAAP;AAAY;AAFhC;AATH,GAHkB;AAiB1BQ,WAAS;AACLC,cAAUX,IAAV,EAAgB;AACZ,UAAG,CAAC,KAAKY,cAAL,CAAoBZ,IAApB,CAAJ,EAA+B;AAAE,aAAKQ,KAAL,CAAWR,IAAX,IAAmB,IAAIL,SAAJ,EAAnB;AAAqC;;AACtE,WAAKiB,cAAL,CAAoBZ,IAApB,EAA0BD,GAA1B;AACA,WAAKc,IAAL;AACH,KALI;;AAMLC,iBAAad,IAAb,EAAmB;AACf,UAAG,CAAC,KAAKY,cAAL,CAAoBZ,IAApB,CAAJ,EAA+B;AAAE,eAAO,KAAP;AAAe;;AAChD,WAAKY,cAAL,CAAoBZ,IAApB,EAA0BD,GAA1B;AACA,WAAKc,IAAL;AACH,KAVI;;AAWLD,mBAAeZ,IAAf,EAAqB;AACjB,aAAO,KAAKQ,KAAL,CAAWR,IAAX,CAAP;AACH;;AAbI,GAjBiB;AAgC1Be,iBAAe;AACXC,WAAOnB,IAAP,EAAaoB,IAAb,EAAmB;AACf,UAAIC,MAAMC,YAAN,CAAmBC,OAAOC,MAAP,EAAnB,EAAoC,OAApC,EAA6CH,MAAMI,YAAnD,CAAJ,EAAsE;AAClE,aAAKzB,IAAL,GAAYA,IAAZ;AACA,aAAKU,WAAL,GAAmBU,IAAnB;AACAM,gBAAQC,GAAR,CAAY,KAAKX,IAAL,EAAZ;AACH;AACJ;;AAPU;AAhCW,CAAb,CAAjB;AA0CA1B,SAASsC,OAAT,GAAmBtC,SAASuC,OAAT,CAAiB;AAACC,OAAIjC;AAAL,CAAjB,CAAnB;;AACA,IAAI,OAAOP,SAASsC,OAAhB,KAA4B,WAAhC,EAA6C;AACzCtC,WAASsC,OAAT,GAAmB,IAAItC,QAAJ,CAAa;AAACwC,SAAIjC;AAAL,GAAb,CAAnB;;AACA,MAAI0B,OAAOQ,QAAX,EAAqB;AACjBzC,aAASsC,OAAT,CAAiBZ,IAAjB;AACH;AACJ;;AAED,MAAMzB,kBAAkBC,MAAMO,MAAN,CAAa;AACjCC,QAAM,iBAD2B;AAEjCC,UAAQ;AACJ+B,gBAAY;AACR7B,YAAM,CAACM,MAAD,CADE;AAERJ,eAAS,YAAY;AACjB,eAAO,EAAP;AACH;AAJO,KADR;AAOJ4B,UAAM;AACF9B,YAAMM,MADJ;AAEFJ,eAAS;AAFP;AAPF,GAFyB;AAcjCQ,WAAS;AACLqB,aAAS;AACL,aAAO,KAAKF,UAAL,CAAgBE,MAAvB;AACH,KAHI;;AAILC,mBAAeC,eAAf,EAAgC;AAC5B,WAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAI,KAAKL,UAAL,CAAgBE,MAAnC,EAA2CG,GAA3C,EAAgD;AAC5C,aAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAIF,gBAAgBJ,UAAhB,CAA2BE,MAA9C,EAAsDG,GAAtD,EAA2D;AACvD,cAAG,KAAKL,UAAL,CAAgBK,CAAhB,KAAsBD,gBAAgBJ,UAAhB,CAA2BM,CAA3B,CAAzB,EAAwD;AAAE,mBAAO,IAAP;AAAc;AAC3E;AACJ;;AACD,aAAO,KAAP;AACH,KAXI;;AAYLC,gBAAYC,QAAZ,EAAsBrC,IAAtB,EAA4B;AACxB,UAAG,CAACA,IAAJ,EAAU;AAAEA,eAAO,KAAK8B,IAAZ;AAAmB;;AAC/B,WAAKD,UAAL,CAAgBS,IAAhB,CAAqBD,SAASV,GAA9B;AACAU,eAAS1B,SAAT,CAAmBX,IAAnB;AACH,KAhBI;;AAiBLuC,gBAAYF,QAAZ,EAAsB;AAClB,UAAG,KAAKR,UAAL,CAAgBE,MAAhB,IAA0B,CAA7B,EAAgC;AAC5B,aAAKK,WAAL,CAAiBjD,SAASsC,OAA1B,EAAmC,KAAKK,IAAxC;AACH;;AACD,aAAOU,EAAEC,IAAF,CAAO,KAAKZ,UAAZ,EAAwB,UAAUa,KAAV,EAAiB;AAC5C,eAAOL,SAASV,GAAT,IAAgBe,KAAvB;AACH,OAFM,CAAP;AAGH,KAxBI;;AAyBLC,mBAAeN,QAAf,EAAyBrC,IAAzB,EAA+B4C,SAA/B,EAA0C;AACtC,UAAIC,QAAQ,CAAC,CAAb;;AACAL,QAAEM,IAAF,CAAO,KAAKjB,UAAZ,EAAwB,UAAUa,KAAV,EAAiBR,CAAjB,EAAoB;AACxC,YAAGQ,SAASL,SAASV,GAArB,EAA0B;AACtBkB,kBAAQX,CAAR;AACH;AACJ,OAJD;;AAKA,UAAGW,QAAQ,CAAX,EAAc;AAAE,eAAO,KAAP;AAAe;;AAC/B,UAAG,CAACD,SAAJ,EAAe;AACX,YAAGC,SAAS,CAAZ,EAAe;AACX,eAAKhB,UAAL,CAAgBkB,KAAhB;AACH,SAFD,MAEO,IAAGF,SAAS,KAAKhB,UAAL,CAAgBE,MAAhB,GAAyB,CAArC,EAAwC;AAC3C,eAAKF,UAAL,CAAgBmB,GAAhB;AACH,SAFM,MAEA;AACH,eAAKnB,UAAL,GAAkB,KAAKA,UAAL,CAAgBoB,KAAhB,CAAsB,CAAtB,EAAwBJ,KAAxB,EAA+BK,MAA/B,CAAsC,KAAKrB,UAAL,CAAgBoB,KAAhB,CAAsBJ,QAAM,CAA5B,CAAtC,CAAlB;AACH;AACJ;;AACDR,eAASvB,YAAT,CAAsBd,IAAtB;AACH;;AA3CI;AAdwB,CAAb,CAAxB;;AA4DAZ,gBAAgB+D,MAAhB,GAAyB,UAAUnD,IAAV,EAAgB;AACrC,MAAIoD,IAAI,IAAIhE,eAAJ,EAAR;AACAgE,IAAEtB,IAAF,GAAS9B,IAAT;AACA,SAAOoD,CAAP;AACH,CAJD","sourcesContent":["import { Class } from 'meteor/jagi:astronomy';\nimport { check } from 'meteor/check';\nconst DefaultCategoryID = \"xhKdwhacaWTcBTGPn\";\nconst TypeStats = Class.create({\n    name: 'TypeStats',\n    fields: {\n        num: {\n            type: Number,\n            default: 0\n        }\n    }\n});\nconst Category = Class.create({\n    name: 'Category',\n    collection: new Mongo.Collection('categories'),\n    fields: {\n        name: {\n            type: String,\n            default: \"the Unnamed Category\"\n        },\n        description: {\n            type: String,\n            default: \"this is the default stuff for a Category\"\n        },\n        stats: {\n            type: Object,\n            default: function () { return {}; }\n        }\n    },\n    helpers: {\n        addByType(type) {\n            if(!this.getStatsByType(type)) { this.stats[type] = new TypeStats(); }\n            this.getStatsByType(type).num++;\n            this.save();\n        },\n        removeByType(type) {\n            if(!this.getStatsByType(type)) { return false; }\n            this.getStatsByType(type).num--;\n            this.save();\n        },\n        getStatsByType(type) {\n            return this.stats[type];\n        }\n    },\n    meteorMethods: {\n        update(name, dscr) {\n            if (Roles.userIsInRole(Meteor.userId(), 'admin', Roles.GLOBAL_GROUP)) {\n                this.name = name;\n                this.description = dscr;\n                console.log(this.save());\n            }\n        }\n    }\n});\nCategory.Default = Category.findOne({_id:DefaultCategoryID});\nif (typeof Category.Default === \"undefined\") {\n    Category.Default = new Category({_id:DefaultCategoryID});\n    if (Meteor.isServer) {\n        Category.Default.save();\n    }\n}\n\nconst CategoryManager = Class.create({\n    name: 'CategoryManager',\n    fields: {\n        Categories: {\n            type: [String],\n            default: function () {\n                return [];\n            }\n        },\n        Type: {\n            type: String,\n            default: \"um... what!?\"\n        }\n    },\n    helpers: {\n        length() {\n            return this.Categories.length;\n        },\n        areIntersected(categoryManager) {\n            for(let i = 0; i < this.Categories.length; i++) {\n                for(let j = 0; j < categoryManager.Categories.length; i++) {\n                    if(this.Categories[i] == categoryManager.Categories[j]) { return true; }\n                }\n            }\n            return false;\n        },\n        addCategory(category, type) {\n            if(!type) { type = this.Type; }\n            this.Categories.push(category._id);\n            category.addByType(type);\n        },\n        hasCategory(category) {\n            if(this.Categories.length == 0) {\n                this.addCategory(Category.Default, this.Type);\n            }\n            return _.find(this.Categories, function (catId) {\n                return category._id == catId;\n            });\n        },\n        removeCategory(category, type, skipSlice) {\n            let index = -1;\n            _.each(this.Categories, function (catId, i) {\n                if(catId == category._id) {\n                    index = i;\n                }\n            });\n            if(index < 0) { return false; }\n            if(!skipSlice) {\n                if(index == 0) {\n                    this.Categories.shift();\n                } else if(index == this.Categories.length - 1) {\n                    this.Categories.pop();\n                } else {\n                    this.Categories = this.Categories.slice(0,index).concat(this.Categories.slice(index+1));\n                }\n            }\n            category.removeByType(type);\n        }\n    }\n});\nCategoryManager.OfType = function (type) {\n    let c = new CategoryManager();\n    c.Type = type;\n    return c;\n}\n\nexport { Category, CategoryManager };\n"]},"sourceType":"script","hash":"13ebec5aed0ec0c4fa977b2e210d3dffe045ca7d"}
