{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\class_static_methods\\find.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/storage/class_static_methods/find.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\class_static_methods\\find.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\class_static_methods\\find.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/storage/class_static_methods/find.js"}},"code":"module.export({\n  find: function () {\n    return find;\n  },\n  findOne: function () {\n    return findOne;\n  }\n});\n\nvar _defaults;\n\nmodule.watch(require(\"lodash/defaults\"), {\n  \"default\": function (v) {\n    _defaults = v;\n  }\n}, 0);\n\nvar _has;\n\nmodule.watch(require(\"lodash/has\"), {\n  \"default\": function (v) {\n    _has = v;\n  }\n}, 1);\n\nvar _isNull;\n\nmodule.watch(require(\"lodash/isNull\"), {\n  \"default\": function (v) {\n    _isNull = v;\n  }\n}, 2);\n\nvar _map;\n\nmodule.watch(require(\"lodash/map\"), {\n  \"default\": function (v) {\n    _map = v;\n  }\n}, 3);\nvar config;\nmodule.watch(require(\"../../../core/config\"), {\n  \"default\": function (v) {\n    config = v;\n  }\n}, 4);\nvar wrapTransform;\nmodule.watch(require(\"../utils/wrapTransform\"), {\n  \"default\": function (v) {\n    wrapTransform = v;\n  }\n}, 5);\nvar transformToClass;\nmodule.watch(require(\"../utils/transformToClass\"), {\n  \"default\": function (v) {\n    transformToClass = v;\n  }\n}, 6);\nvar Event;\nmodule.watch(require(\"../../events/event\"), {\n  \"default\": function (v) {\n    Event = v;\n  }\n}, 7);\nvar Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo: function (v) {\n    Mongo = v;\n  }\n}, 8);\n\nfunction createMethod(methodName) {\n  return function (selector, options) {\n    var Class = this;\n    var Collection = Class.getCollection(); // Get selector from arguments.\n\n    if (arguments.length === 0) {\n      selector = {};\n    } else {\n      selector = arguments[0];\n    } // If selector is null then just proceed to collection's find method.\n\n\n    if (_isNull(selector)) {\n      return Collection[methodName](selector, options);\n    } // Rewrite selector to make it an object.\n\n\n    selector = Mongo.Collection._rewriteSelector(selector); // Set default options.\n\n    options = _defaults({}, options, {\n      defaults: config.defaults,\n      children: true,\n      // We don't want to clone raw object in the \"find\" method.\n      clone: false\n    }); // Modify selector and options using the \"beforeFind\" event handlers.\n\n    if (!options.disableEvents) {\n      Class.dispatchEvent(new Event('beforeFind', {\n        selector: selector,\n        options: options\n      }));\n    }\n\n    var typeField = Class.getTypeField();\n\n    if ( // If it's an inherited class, then get only documents being instances of\n    // the subclass...\n    typeField && // ... however do not override a type property in selector when\n    // developer provided it and wants to deal with it by him/herself.\n    !_has(selector, typeField)) {\n      // If a class has child classes then we have to fetch document being\n      // instances of the parent and child classes depending on a value of\n      // the \"children\" option.\n      var children = Class.getChildren(options.children);\n\n      if (options.children && children.length > 0) {\n        children.push(Class);\n        selector[typeField] = {\n          $in: _map(children, function (Child) {\n            return Child.getName();\n          })\n        };\n      } else {\n        selector[typeField] = Class.getName();\n      }\n    }\n\n    var classTransform = Class.getTransform();\n\n    if (options.transform !== null && classTransform !== null) {\n      // Wrap the transform function with the \"wrapTransform\" function, which\n      // resolves values.\n      options.transform = wrapTransform({\n        Class: Class,\n        // First, try getting the transform function passed to the \"find\"\n        // method. Later, check if the transform function is defined in the\n        // class definition. If none of them contains a transform function, then\n        // get the default one.\n        transform: options.transform || classTransform || transformToClass({\n          Class: Class,\n          options: options\n        })\n      });\n    } // Execute the original method.\n\n\n    var result = Collection[methodName](selector, options); // Modify a query result using the \"afterFind\" event handlers.\n\n    if (!options.disableEvents) {\n      Class.dispatchEvent(new Event('afterFind', {\n        selector: selector,\n        options: options,\n        result: result\n      }));\n    }\n\n    return result;\n  };\n}\n\nvar find = createMethod('find');\nvar findOne = createMethod('findOne');","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/storage/class_static_methods/find.js"],"names":["module","export","find","findOne","_defaults","watch","require","v","_has","_isNull","_map","config","wrapTransform","transformToClass","Event","Mongo","createMethod","methodName","selector","options","Class","Collection","getCollection","arguments","length","_rewriteSelector","defaults","children","clone","disableEvents","dispatchEvent","typeField","getTypeField","getChildren","push","$in","Child","getName","classTransform","getTransform","transform","result"],"mappings":"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","sourcesContent":["import _defaults from 'lodash/defaults';\nimport _has from 'lodash/has';\nimport _isNull from 'lodash/isNull';\nimport _map from 'lodash/map';\nimport config from '../../../core/config';\nimport wrapTransform from '../utils/wrapTransform';\nimport transformToClass from '../utils/transformToClass';\nimport Event from '../../events/event';\nimport { Mongo } from 'meteor/mongo';\n\nfunction createMethod(methodName) {\n  return function(selector, options) {\n    let Class = this;\n    let Collection = Class.getCollection();\n\n    // Get selector from arguments.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n    else {\n      selector = arguments[0];\n    }\n    // If selector is null then just proceed to collection's find method.\n    if (_isNull(selector)) {\n      return Collection[methodName](selector, options);\n    }\n    // Rewrite selector to make it an object.\n    selector = Mongo.Collection._rewriteSelector(selector);\n\n    // Set default options.\n    options = _defaults({}, options, {\n      defaults: config.defaults,\n      children: true,\n      // We don't want to clone raw object in the \"find\" method.\n      clone: false\n    });\n\n    // Modify selector and options using the \"beforeFind\" event handlers.\n    if (!options.disableEvents) {\n      Class.dispatchEvent(new Event('beforeFind', {\n        selector,\n        options\n      }));\n    }\n\n    const typeField = Class.getTypeField();\n    if (\n      // If it's an inherited class, then get only documents being instances of\n      // the subclass...\n      typeField &&\n      // ... however do not override a type property in selector when\n      // developer provided it and wants to deal with it by him/herself.\n      !_has(selector, typeField)\n    ) {\n      // If a class has child classes then we have to fetch document being\n      // instances of the parent and child classes depending on a value of\n      // the \"children\" option.\n      const children = Class.getChildren(options.children);\n      if (options.children && children.length > 0) {\n        children.push(Class);\n        selector[typeField] = {\n          $in: _map(children, (Child) => Child.getName())\n        };\n      }\n      else {\n        selector[typeField] = Class.getName();\n      }\n    }\n\n    const classTransform = Class.getTransform();\n    if (options.transform !== null && classTransform !== null) {\n      // Wrap the transform function with the \"wrapTransform\" function, which\n      // resolves values.\n      options.transform = wrapTransform({\n        Class,\n        // First, try getting the transform function passed to the \"find\"\n        // method. Later, check if the transform function is defined in the\n        // class definition. If none of them contains a transform function, then\n        // get the default one.\n        transform: options.transform || classTransform || transformToClass({\n          Class,\n          options\n        })\n      });\n    }\n\n    // Execute the original method.\n    let result = Collection[methodName](selector, options);\n\n    // Modify a query result using the \"afterFind\" event handlers.\n    if (!options.disableEvents) {\n      Class.dispatchEvent(new Event('afterFind', {\n        selector,\n        options,\n        result\n      }));\n    }\n\n    return result;\n  };\n}\n\nconst find = createMethod('find');\nconst findOne = createMethod('findOne');\n\nexport { find, findOne };"]},"sourceType":"script","hash":"65c0593eedde9bb69d3a08afad88aeed00515a1a"}
