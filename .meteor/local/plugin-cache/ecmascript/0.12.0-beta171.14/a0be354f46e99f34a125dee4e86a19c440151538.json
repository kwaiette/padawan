{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\utils\\class_upsert.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/storage/utils/class_upsert.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\utils\\class_upsert.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\storage\\utils\\class_upsert.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/storage/utils/class_upsert.js"}},"code":"var _extend;\n\nmodule.watch(require(\"lodash/extend\"), {\n  \"default\": function (v) {\n    _extend = v;\n  }\n}, 0);\nvar AstroClass;\nmodule.watch(require(\"../../../core/class.js\"), {\n  \"default\": function (v) {\n    AstroClass = v;\n  }\n}, 1);\nvar alreadyInSimulation;\nmodule.watch(require(\"./already_in_simulation.js\"), {\n  \"default\": function (v) {\n    alreadyInSimulation = v;\n  }\n}, 2);\nvar throwIfSelectorIsNotId;\nmodule.watch(require(\"./throw_if_selector_is_not_id.js\"), {\n  \"default\": function (v) {\n    throwIfSelectorIsNotId = v;\n  }\n}, 3);\nvar documentInsert;\nmodule.watch(require(\"./document_insert.js\"), {\n  \"default\": function (v) {\n    documentInsert = v;\n  }\n}, 4);\nvar documentUpdate;\nmodule.watch(require(\"./document_update.js\"), {\n  \"default\": function (v) {\n    documentUpdate = v;\n  }\n}, 5);\nvar applyModifier;\nmodule.watch(require(\"./apply_modifier.js\"), {\n  \"default\": function (v) {\n    applyModifier = v;\n  }\n}, 6);\nvar Minimongo, LocalCollection;\nmodule.watch(require(\"meteor/minimongo\"), {\n  Minimongo: function (v) {\n    Minimongo = v;\n  },\n  LocalCollection: function (v) {\n    LocalCollection = v;\n  }\n}, 7);\n\nfunction classUpsert() {\n  var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var className = args.className,\n      selector = args.selector,\n      modifier = args.modifier,\n      options = args.options,\n      stopOnFirstError = args.stopOnFirstError,\n      fields = args.fields,\n      _args$simulation = args.simulation,\n      simulation = _args$simulation === void 0 ? true : _args$simulation,\n      _args$trusted = args.trusted,\n      trusted = _args$trusted === void 0 ? false : _args$trusted; // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n\n  if (!simulation && !Meteor.isServer) {\n    return;\n  } // Throw exception if we are trying to perform an operation on more than one\n  // document at once and it's not trusted call.\n\n\n  if (!trusted && !alreadyInSimulation()) {\n    throwIfSelectorIsNotId(selector, 'upsert');\n  }\n\n  var Class = AstroClass.get(className); // Get all documents matching selector.\n\n  var docs;\n\n  if (options.multi) {\n    docs = Class.find(selector, options);\n  } else {\n    docs = Class.find(selector, _extend(options, {\n      limit: 1\n    }));\n  } // Create a minimongo matcher object to find array indexes on the projection\n  // operator use.\n\n\n  var matcher = new Minimongo.Matcher(selector); // Prepare result of the method execution.\n\n  var result = {\n    numberAffected: 0,\n    insertedId: null\n  };\n\n  if (docs.count() > 0) {\n    docs.forEach(function (doc) {\n      // Use matcher to find array indexes in a given document that needs updating\n      // on the projection operator use.\n      var queryResult = matcher.documentMatches(doc); // Apply modifier.\n\n      applyModifier({\n        doc: doc,\n        modifier: modifier,\n        options: queryResult.arrayIndices ? {\n          arrayIndices: queryResult.arrayIndices\n        } : {}\n      }); // Update a document.\n\n      result.numberAffected += documentUpdate({\n        doc: doc,\n        stopOnFirstError: stopOnFirstError,\n        simulation: simulation,\n        fields: fields,\n        trusted: trusted\n      });\n    });\n  } else {\n    var doc; // Create a new document from selector.\n\n    if (LocalCollection._createUpsertDocument) {\n      doc = new Class(LocalCollection._createUpsertDocument(selector, modifier));\n    } else if (LocalCollection._removeDollarOperators) {\n      doc = new Class(LocalCollection._removeDollarOperators(selector)); // Apply modifier for the insert operation.\n\n      applyModifier({\n        doc: doc,\n        modifier: modifier,\n        options: {\n          isInsert: true\n        }\n      });\n    } // Insert a document.\n\n\n    result.insertedId = documentInsert({\n      doc: doc,\n      stopOnFirstError: stopOnFirstError,\n      simulation: simulation,\n      trusted: trusted\n    });\n  }\n\n  return result;\n}\n\n;\nmodule.exportDefault(classUpsert);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/storage/utils/class_upsert.js"],"names":["_extend","module","watch","require","v","AstroClass","alreadyInSimulation","throwIfSelectorIsNotId","documentInsert","documentUpdate","applyModifier","Minimongo","LocalCollection","classUpsert","args","className","selector","modifier","options","stopOnFirstError","fields","simulation","trusted","Meteor","isServer","Class","get","docs","multi","find","limit","matcher","Matcher","result","numberAffected","insertedId","count","forEach","doc","queryResult","documentMatches","arrayIndices","_createUpsertDocument","_removeDollarOperators","isInsert","exportDefault"],"mappings":"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","sourcesContent":["import _extend from 'lodash/extend';\nimport AstroClass from '../../../core/class.js';\nimport alreadyInSimulation from './already_in_simulation.js';\nimport throwIfSelectorIsNotId from './throw_if_selector_is_not_id.js';\nimport documentInsert from './document_insert.js';\nimport documentUpdate from './document_update.js';\nimport applyModifier from './apply_modifier.js';\nimport { Minimongo, LocalCollection } from 'meteor/minimongo';\n\nfunction classUpsert(args = {}) {\n  const {\n    className,\n    selector,\n    modifier,\n    options,\n    stopOnFirstError,\n    fields,\n    simulation = true,\n    trusted = false,\n  } = args;\n\n  // Stop execution, if we are not on the server, when the \"simulation\" flag is\n  // not set.\n  if (!simulation && !Meteor.isServer) {\n    return;\n  }\n\n  // Throw exception if we are trying to perform an operation on more than one\n  // document at once and it's not trusted call.\n  if (!trusted && !alreadyInSimulation()) {\n    throwIfSelectorIsNotId(selector, 'upsert');\n  }\n\n  const Class = AstroClass.get(className);\n  // Get all documents matching selector.\n  let docs;\n  if (options.multi) {\n    docs = Class.find(selector, options);\n  }\n  else {\n    docs = Class.find(selector, _extend(options, {\n      limit: 1\n    }));\n  }\n\n  // Create a minimongo matcher object to find array indexes on the projection\n  // operator use.\n  const matcher = new Minimongo.Matcher(selector);\n\n  // Prepare result of the method execution.\n  const result = {\n    numberAffected: 0,\n    insertedId: null\n  };\n\n  if (docs.count() > 0) {\n    docs.forEach((doc) => {\n      // Use matcher to find array indexes in a given document that needs updating\n      // on the projection operator use.\n      let queryResult = matcher.documentMatches(doc);\n\n      // Apply modifier.\n      applyModifier({\n        doc,\n        modifier,\n        options: queryResult.arrayIndices ? {\n          arrayIndices: queryResult.arrayIndices\n        } : {}\n      });\n\n      // Update a document.\n      result.numberAffected += documentUpdate({\n        doc,\n        stopOnFirstError,\n        simulation,\n        fields,\n        trusted\n      });\n    });\n  }\n  else {\n    let doc;\n    // Create a new document from selector.\n    if (LocalCollection._createUpsertDocument) {\n      doc = new Class(LocalCollection._createUpsertDocument(selector, modifier));\n    }\n    else if (LocalCollection._removeDollarOperators) {\n      doc = new Class(LocalCollection._removeDollarOperators(selector));\n      // Apply modifier for the insert operation.\n      applyModifier({\n        doc,\n        modifier,\n        options: {\n          isInsert: true\n        }\n      });\n    }\n\n    // Insert a document.\n    result.insertedId = documentInsert({\n      doc,\n      stopOnFirstError,\n      simulation,\n      trusted,\n    });\n  }\n\n  return result;\n};\n\nexport default classUpsert;"]},"sourceType":"script","hash":"a0be354f46e99f34a125dee4e86a19c440151538"}
