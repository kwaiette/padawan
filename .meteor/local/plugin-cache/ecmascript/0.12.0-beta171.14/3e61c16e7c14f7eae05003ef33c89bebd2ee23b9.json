{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\core\\class.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/core/class.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\core\\class.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\core\\class.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/core/class.js"}},"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar module1 = module;\n\nvar _concat;\n\nmodule1.watch(require(\"lodash/concat\"), {\n  \"default\": function (v) {\n    _concat = v;\n  }\n}, 0);\n\nvar _defaults;\n\nmodule1.watch(require(\"lodash/defaults\"), {\n  \"default\": function (v) {\n    _defaults = v;\n  }\n}, 1);\n\nvar _each;\n\nmodule1.watch(require(\"lodash/each\"), {\n  \"default\": function (v) {\n    _each = v;\n  }\n}, 2);\n\nvar _has;\n\nmodule1.watch(require(\"lodash/has\"), {\n  \"default\": function (v) {\n    _has = v;\n  }\n}, 3);\n\nvar _includes;\n\nmodule1.watch(require(\"lodash/includes\"), {\n  \"default\": function (v) {\n    _includes = v;\n  }\n}, 4);\n\nvar _intersection;\n\nmodule1.watch(require(\"lodash/intersection\"), {\n  \"default\": function (v) {\n    _intersection = v;\n  }\n}, 5);\n\nvar _isNumber;\n\nmodule1.watch(require(\"lodash/isNumber\"), {\n  \"default\": function (v) {\n    _isNumber = v;\n  }\n}, 6);\nvar EJSON;\nmodule1.watch(require(\"meteor/ejson\"), {\n  EJSON: function (v) {\n    EJSON = v;\n  }\n}, 7);\nvar config;\nmodule1.watch(require(\"./config\"), {\n  \"default\": function (v) {\n    config = v;\n  }\n}, 8);\nvar throwParseError;\nmodule1.watch(require(\"../modules/core/utils/throw_parse_error\"), {\n  \"default\": function (v) {\n    throwParseError = v;\n  }\n}, 9);\nvar cloneDefinition;\nmodule1.watch(require(\"../modules/core/utils/cloneDefinition\"), {\n  \"default\": function (v) {\n    cloneDefinition = v;\n  }\n}, 10);\nvar castNested;\nmodule1.watch(require(\"../modules/fields/utils/castNested\"), {\n  \"default\": function (v) {\n    castNested = v;\n  }\n}, 11);\nvar Module;\nmodule1.watch(require(\"./module\"), {\n  \"default\": function (v) {\n    Module = v;\n  }\n}, 12);\nvar Event;\nmodule1.watch(require(\"../modules/events/event\"), {\n  \"default\": function (v) {\n    Event = v;\n  }\n}, 13);\nvar Type;\nmodule1.watch(require(\"../modules/fields/type\"), {\n  \"default\": function (v) {\n    Type = v;\n  }\n}, 14);\nvar Validators;\nmodule1.watch(require(\"../modules/validators/validators\"), {\n  \"default\": function (v) {\n    Validators = v;\n  }\n}, 15);\nvar warn;\nmodule1.watch(require(\"../modules/core/utils/warn\"), {\n  \"default\": function (v) {\n    warn = v;\n  }\n}, 16);\n\nvar initClass = function (Class) {\n  // Create and store the schema \"definition\" object in the class constructor.\n  // It's a combination of all parent definitions and a definition that\n  // created this class. It's used to create child classes.\n  Class.definition = {}; // Create and store the \"schema\" object in the class constructor. It's an\n  // object that contains all the data related with a given class. The\n  // \"schema\" object contains \"computed\" data of the schema \"definition\".\n  // Thanks to that, Astronomy does not need to compute data on the fly and\n  // everything works faster.\n\n  Class.schema = {}; // Create empty array for storing child classes.\n\n  Class.children = []; // Init the class schema and schema definition.\n\n  Module.forEach(function (module) {\n    module.onInitSchema(Class.schema, Class.getName());\n    module.onInitDefinition(Class.definition, Class.getName());\n  }); // We have to call the \"onInitClass\" hooks in the separate loop after\n  // initiation of the schema and schema definition, because some\n  // \"onInitClass\" hooks can execute the \"Class.extend\" method which requires\n  // schema and schama definition to be initalized.\n\n  Module.forEach(function (module) {\n    module.onInitClass(Class, Class.getName());\n  });\n};\n\nvar Class =\n/*#__PURE__*/\nfunction () {\n  function Class() {\n    var rawDoc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // Set default options.\n    _defaults(options, {\n      // From version 2.3.0, we can turn off setting default values on fetching\n      // so it will not populate fields that were excluded on find.\n      defaults: config.defaults,\n      // We clone values on document construction, but this option is overridden\n      // in the \"find\" method and set to false, so it does not unnecessary clone\n      // clone raw values.\n      clone: true,\n      cast: false\n    });\n\n    var doc = this;\n    var _Class = doc.constructor;\n\n    if (!_Class.getName()) {\n      throw new Error('Can not create instance of the \"Class\" class');\n    } // If there is the \"_isNew\" property passed to the class constructor, the\n    // we use it to determine if a document is stored in collection. Otherwise\n    // document is a new one.\n\n\n    if (_Class.getCollection()) {\n      doc._isNew = _has(rawDoc, \"_isNew\") ? rawDoc._isNew : true;\n    } // Trigger the \"beforeInit\" event handlers.\n\n\n    doc.dispatchEvent(new Event(\"beforeInit\")); // Set values in a document.\n\n    _each(_Class.getFieldsNames(), function (fieldName) {\n      doc.set(fieldName, rawDoc[fieldName], options);\n    }); // Trigger the \"afterInit\" event handlers.\n\n\n    doc.dispatchEvent(new Event(\"afterInit\"));\n  } // Method needed for EJSONification.\n\n\n  var _proto = Class.prototype;\n\n  _proto.typeName = function () {\n    function typeName() {\n      return \"Astronomy\";\n    }\n\n    return typeName;\n  }();\n\n  _proto.toJSONValue = function () {\n    function toJSONValue(args) {\n      var doc = this;\n      var Class = doc.constructor;\n      var json = {\n        \"class\": Class.getName()\n      }; // Trigger the \"toJSONValue\" event handlers.\n\n      doc.dispatchEvent(new Event(\"toJSONValue\", {\n        json: json\n      }));\n      return json;\n    }\n\n    return toJSONValue;\n  }();\n\n  Class.getName = function () {\n    function getName() {\n      return this.className;\n    }\n\n    return getName;\n  }();\n\n  Class.getParent = function () {\n    function getParent() {\n      if (this.parentClassName) {\n        return this.get(this.parentClassName);\n      }\n    }\n\n    return getParent;\n  }();\n  /**\n   * @param {(Number|Boolean)} depth - The depth to which look for children, or \"true\" to get all children.\n   */\n\n\n  Class.getChildren = function () {\n    function getChildren() {\n      var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var classes = [];\n\n      if (!depth) {\n        return classes;\n      }\n\n      classes.push.apply(classes, (0, _toConsumableArray2.default)(this.children));\n\n      if (_isNumber(depth)) {\n        depth--;\n      }\n\n      _each(this.children, function (Child) {\n        classes.push.apply(classes, (0, _toConsumableArray2.default)(Child.getChildren(depth)));\n      });\n\n      return classes;\n    }\n\n    return getChildren;\n  }();\n\n  Class.create = function () {\n    function create(definition) {\n      // Get class name.\n      var className = definition.name; // Warn about class duplicate.\n\n      if (_has(this.classes, className)) {\n        warn(\"Duplicate of the \\\"\" + className + \"\\\" class\");\n      } // Extend the Class class.\n\n\n      var Class = this.classes[className] =\n      /*#__PURE__*/\n      function (_this) {\n        (0, _inheritsLoose2.default)(Class, _this);\n\n        function Class() {\n          return _this.apply(this, arguments) || this;\n        }\n\n        return Class;\n      }(this); // Store the class name in the constructor.\n\n\n      Class.className = className; // Initialize class.\n\n      initClass(Class); // Extend class with a definition.\n\n      Class.extend(definition); // Register a new type.\n\n      Type.create({\n        name: className,\n        \"class\": Class,\n        validate: function (args) {\n          // Add current class as a param of validator.\n          args.param = Class;\n          Validators.class(args);\n        }\n      });\n      return Class;\n    }\n\n    return create;\n  }();\n\n  Class.inherit = function () {\n    function inherit(definition) {\n      var Parent = this;\n      var className = definition.name; // Warn about class duplicate.\n\n      if (_has(this.classes, className)) {\n        warn(\"Duplicate of the \\\"\" + className + \"\\\" class\");\n      } // Extend the parent class.\n\n\n      var Class = this.classes[className] =\n      /*#__PURE__*/\n      function (_Parent) {\n        (0, _inheritsLoose2.default)(Class, _Parent);\n\n        function Class() {\n          return _Parent.apply(this, arguments) || this;\n        }\n\n        return Class;\n      }(Parent); // Store the class name in the constructor.\n\n\n      Class.className = className; // Store the parent class name in the constructor.\n\n      Class.parentClassName = Parent.getName(); // Initialize class.\n\n      initClass(Class); // Store child class in the parent class.\n\n      Parent.children.push(Class); // Extend class with the parent class definition.\n\n      Class.extend(Parent.definition); // Extend class with the definition.\n\n      Class.extend(definition); // Register a new type.\n\n      Type.create({\n        name: className,\n        \"class\": Class,\n        validate: function (args) {\n          // Add current class as a param of validator.\n          args.param = Class;\n          Validators.class(args);\n        }\n      });\n      return Class;\n    }\n\n    return inherit;\n  }();\n\n  Class.extend = function () {\n    function extend(extendDefinition) {\n      var _this2 = this;\n\n      var onlyModules = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      if (typeof onlyModules === \"string\") {\n        onlyModules = [onlyModules];\n      }\n\n      if (!Match.test(onlyModules, [String])) {\n        throwParseError([{\n          \"class\": this.getName()\n        }, {\n          method: \"extend\"\n        }, \"The second argument has to be a string or an array of strings\"]);\n      } // Clone definition to not modify the original one.\n\n\n      extendDefinition = cloneDefinition(extendDefinition);\n      Module.forEach(function (module) {\n        // If the second argument was passed, then we only run module hooks for\n        // modules that were listed in the second argument.\n        if (onlyModules.length > 0 && !_includes(onlyModules, module.name) && _intersection(onlyModules, module.aliases).length === 0) {\n          return;\n        } // Initialize parsed definition.\n\n\n        var parsedDefinition = {};\n        module.onInitDefinition(parsedDefinition, Class.getName()); // Parse the extending definition and put parsed properties in the parsed\n        // definition.\n\n        module.onParseDefinition(parsedDefinition, extendDefinition, _this2.getName()); // Apply parsed definition.\n\n        module.onApplyDefinition(_this2, parsedDefinition, _this2.getName()); // Merge parsed definition with a class definition.\n\n        module.onMergeDefinitions(_this2.definition, parsedDefinition, _this2.getName()); // Finalize class creation.\n\n        module.onFinalizeClass(_this2, _this2.getName());\n      }); // Extend children.\n\n      var children = this.getChildren();\n\n      _each(children, function (ChildClass) {\n        ChildClass.extend(extendDefinition, onlyModules);\n      });\n    }\n\n    return extend;\n  }();\n\n  Class.get = function () {\n    function get(className) {\n      return this.classes[className];\n    }\n\n    return get;\n  }();\n\n  Class.has = function () {\n    function has(className) {\n      return _has(this.classes, className);\n    }\n\n    return has;\n  }();\n\n  Class.includes = function () {\n    function includes(Class) {\n      return _includes(this.classes, Class);\n    }\n\n    return includes;\n  }();\n\n  Class.isParentOf = function () {\n    function isParentOf(Class) {\n      if (!Class || !Class.prototype) {\n        return false;\n      }\n\n      return this.prototype.isPrototypeOf(Class.prototype);\n    }\n\n    return isParentOf;\n  }();\n\n  Class.isChildOf = function () {\n    function isChildOf(Class) {\n      if (!Class || !Class.prototype) {\n        return false;\n      }\n\n      return Class.prototype.isPrototypeOf(this.prototype);\n    }\n\n    return isChildOf;\n  }();\n\n  Class.isNew = function () {\n    function isNew(doc, _isNew) {\n      if (arguments.length === 2) {\n        doc._isNew = _isNew;\n      } else {\n        return doc._isNew;\n      }\n    }\n\n    return isNew;\n  }();\n\n  return Class;\n}();\n\nClass.classes = {};\nmodule1.exportDefault(Class);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/core/class.js"],"names":["module1","module","_concat","watch","require","v","_defaults","_each","_has","_includes","_intersection","_isNumber","EJSON","config","throwParseError","cloneDefinition","castNested","Module","Event","Type","Validators","warn","initClass","Class","definition","schema","children","forEach","onInitSchema","getName","onInitDefinition","onInitClass","rawDoc","options","defaults","clone","cast","doc","constructor","Error","getCollection","_isNew","dispatchEvent","getFieldsNames","set","fieldName","typeName","toJSONValue","args","json","className","getParent","parentClassName","get","getChildren","depth","classes","push","Child","create","name","extend","validate","param","class","inherit","Parent","extendDefinition","onlyModules","Match","test","String","method","length","aliases","parsedDefinition","onParseDefinition","onApplyDefinition","onMergeDefinitions","onFinalizeClass","ChildClass","has","includes","isParentOf","prototype","isPrototypeOf","isChildOf","isNew","arguments","exportDefault"],"mappings":"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","sourcesContent":["import _concat from \"lodash/concat\";\nimport _defaults from \"lodash/defaults\";\nimport _each from \"lodash/each\";\nimport _has from \"lodash/has\";\nimport _includes from \"lodash/includes\";\nimport _intersection from \"lodash/intersection\";\nimport _isNumber from \"lodash/isNumber\";\nimport { EJSON } from \"meteor/ejson\";\nimport config from \"./config\";\nimport throwParseError from \"../modules/core/utils/throw_parse_error\";\nimport cloneDefinition from \"../modules/core/utils/cloneDefinition\";\nimport castNested from \"../modules/fields/utils/castNested\";\nimport Module from \"./module\";\nimport Event from \"../modules/events/event\";\nimport Type from \"../modules/fields/type\";\nimport Validators from \"../modules/validators/validators\";\nimport warn from \"../modules/core/utils/warn\";\n\nlet initClass = function(Class) {\n  // Create and store the schema \"definition\" object in the class constructor.\n  // It's a combination of all parent definitions and a definition that\n  // created this class. It's used to create child classes.\n  Class.definition = {};\n  // Create and store the \"schema\" object in the class constructor. It's an\n  // object that contains all the data related with a given class. The\n  // \"schema\" object contains \"computed\" data of the schema \"definition\".\n  // Thanks to that, Astronomy does not need to compute data on the fly and\n  // everything works faster.\n  Class.schema = {};\n  // Create empty array for storing child classes.\n  Class.children = [];\n  // Init the class schema and schema definition.\n  Module.forEach(module => {\n    module.onInitSchema(Class.schema, Class.getName());\n    module.onInitDefinition(Class.definition, Class.getName());\n  });\n  // We have to call the \"onInitClass\" hooks in the separate loop after\n  // initiation of the schema and schema definition, because some\n  // \"onInitClass\" hooks can execute the \"Class.extend\" method which requires\n  // schema and schama definition to be initalized.\n  Module.forEach(module => {\n    module.onInitClass(Class, Class.getName());\n  });\n};\n\nclass Class {\n  constructor(rawDoc = {}, options = {}) {\n    // Set default options.\n    _defaults(options, {\n      // From version 2.3.0, we can turn off setting default values on fetching\n      // so it will not populate fields that were excluded on find.\n      defaults: config.defaults,\n      // We clone values on document construction, but this option is overridden\n      // in the \"find\" method and set to false, so it does not unnecessary clone\n      // clone raw values.\n      clone: true,\n      cast: false\n    });\n\n    const doc = this;\n    const Class = doc.constructor;\n\n    if (!Class.getName()) {\n      throw new Error('Can not create instance of the \"Class\" class');\n    }\n\n    // If there is the \"_isNew\" property passed to the class constructor, the\n    // we use it to determine if a document is stored in collection. Otherwise\n    // document is a new one.\n    if (Class.getCollection()) {\n      doc._isNew = _has(rawDoc, \"_isNew\") ? rawDoc._isNew : true;\n    }\n\n    // Trigger the \"beforeInit\" event handlers.\n    doc.dispatchEvent(new Event(\"beforeInit\"));\n\n    // Set values in a document.\n    _each(Class.getFieldsNames(), fieldName => {\n      doc.set(fieldName, rawDoc[fieldName], options);\n    });\n\n    // Trigger the \"afterInit\" event handlers.\n    doc.dispatchEvent(new Event(\"afterInit\"));\n  }\n\n  // Method needed for EJSONification.\n  typeName() {\n    return \"Astronomy\";\n  }\n\n  toJSONValue(args) {\n    let doc = this;\n    let Class = doc.constructor;\n\n    let json = {\n      class: Class.getName()\n    };\n\n    // Trigger the \"toJSONValue\" event handlers.\n    doc.dispatchEvent(\n      new Event(\"toJSONValue\", {\n        json: json\n      })\n    );\n\n    return json;\n  }\n\n  static getName() {\n    return this.className;\n  }\n\n  static getParent() {\n    if (this.parentClassName) {\n      return this.get(this.parentClassName);\n    }\n  }\n\n  /**\n   * @param {(Number|Boolean)} depth - The depth to which look for children, or \"true\" to get all children.\n   */\n  static getChildren(depth = 1) {\n    const classes = [];\n    if (!depth) {\n      return classes;\n    }\n    classes.push(...this.children);\n    if (_isNumber(depth)) {\n      depth--;\n    }\n    _each(this.children, Child => {\n      classes.push(...Child.getChildren(depth));\n    });\n    return classes;\n  }\n\n  static create(definition) {\n    // Get class name.\n    let className = definition.name;\n    // Warn about class duplicate.\n    if (_has(this.classes, className)) {\n      warn(`Duplicate of the \"${className}\" class`);\n    }\n    // Extend the Class class.\n    let Class = (this.classes[className] = class Class extends this {});\n    // Store the class name in the constructor.\n    Class.className = className;\n    // Initialize class.\n    initClass(Class);\n    // Extend class with a definition.\n    Class.extend(definition);\n    // Register a new type.\n    Type.create({\n      name: className,\n      class: Class,\n      validate(args) {\n        // Add current class as a param of validator.\n        args.param = Class;\n        Validators.class(args);\n      }\n    });\n\n    return Class;\n  }\n\n  static inherit(definition) {\n    const Parent = this;\n    const className = definition.name;\n    // Warn about class duplicate.\n    if (_has(this.classes, className)) {\n      warn(`Duplicate of the \"${className}\" class`);\n    }\n    // Extend the parent class.\n    const Class = (this.classes[className] = class Class extends Parent {});\n    // Store the class name in the constructor.\n    Class.className = className;\n    // Store the parent class name in the constructor.\n    Class.parentClassName = Parent.getName();\n    // Initialize class.\n    initClass(Class);\n    // Store child class in the parent class.\n    Parent.children.push(Class);\n    // Extend class with the parent class definition.\n    Class.extend(Parent.definition);\n    // Extend class with the definition.\n    Class.extend(definition);\n    // Register a new type.\n    Type.create({\n      name: className,\n      class: Class,\n      validate(args) {\n        // Add current class as a param of validator.\n        args.param = Class;\n        Validators.class(args);\n      }\n    });\n\n    return Class;\n  }\n\n  static extend(extendDefinition, onlyModules = []) {\n    if (typeof onlyModules === \"string\") {\n      onlyModules = [onlyModules];\n    }\n\n    if (!Match.test(onlyModules, [String])) {\n      throwParseError([\n        {\n          class: this.getName()\n        },\n        {\n          method: \"extend\"\n        },\n        \"The second argument has to be a string or an array of strings\"\n      ]);\n    }\n\n    // Clone definition to not modify the original one.\n    extendDefinition = cloneDefinition(extendDefinition);\n\n    Module.forEach(module => {\n      // If the second argument was passed, then we only run module hooks for\n      // modules that were listed in the second argument.\n      if (\n        onlyModules.length > 0 &&\n        !_includes(onlyModules, module.name) &&\n        _intersection(onlyModules, module.aliases).length === 0\n      ) {\n        return;\n      }\n      // Initialize parsed definition.\n      let parsedDefinition = {};\n      module.onInitDefinition(parsedDefinition, Class.getName());\n      // Parse the extending definition and put parsed properties in the parsed\n      // definition.\n      module.onParseDefinition(\n        parsedDefinition,\n        extendDefinition,\n        this.getName()\n      );\n      // Apply parsed definition.\n      module.onApplyDefinition(this, parsedDefinition, this.getName());\n      // Merge parsed definition with a class definition.\n      module.onMergeDefinitions(\n        this.definition,\n        parsedDefinition,\n        this.getName()\n      );\n      // Finalize class creation.\n      module.onFinalizeClass(this, this.getName());\n    });\n\n    // Extend children.\n    const children = this.getChildren();\n    _each(children, ChildClass => {\n      ChildClass.extend(extendDefinition, onlyModules);\n    });\n  }\n\n  static get(className) {\n    return this.classes[className];\n  }\n\n  static has(className) {\n    return _has(this.classes, className);\n  }\n\n  static includes(Class) {\n    return _includes(this.classes, Class);\n  }\n\n  static isParentOf(Class) {\n    if (!Class || !Class.prototype) {\n      return false;\n    }\n    return this.prototype.isPrototypeOf(Class.prototype);\n  }\n\n  static isChildOf(Class) {\n    if (!Class || !Class.prototype) {\n      return false;\n    }\n    return Class.prototype.isPrototypeOf(this.prototype);\n  }\n\n  static isNew(doc, isNew) {\n    if (arguments.length === 2) {\n      doc._isNew = isNew;\n    } else {\n      return doc._isNew;\n    }\n  }\n}\n\nClass.classes = {};\n\nexport default Class;\n"]},"sourceType":"script","hash":"3e61c16e7c14f7eae05003ef33c89bebd2ee23b9"}
