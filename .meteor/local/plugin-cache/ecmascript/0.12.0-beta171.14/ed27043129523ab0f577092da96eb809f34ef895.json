{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\validators\\validator.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/jagi:astronomy/lib/modules/validators/validator.js","filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\validators\\validator.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","root":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan","presets":[],"generatorOpts":{"filename":"C:\\Users\\wayne\\src\\kwaiette\\tmp\\padawan\\packages\\jagi:astronomy\\lib\\modules\\validators\\validator.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/jagi:astronomy/lib/modules/validators/validator.js"}},"code":"let ValidationError;\nmodule.watch(require(\"meteor/mdg:validation-error\"), {\n  ValidationError(v) {\n    ValidationError = v;\n  }\n\n}, 0);\nlet Validators;\nmodule.watch(require(\"./validators.js\"), {\n  default(v) {\n    Validators = v;\n  }\n\n}, 1);\n\nclass Validator {\n  constructor(definition) {\n    this.name = definition.name;\n\n    if (definition.parseParam) {\n      this.parseParam = definition.parseParam;\n    }\n\n    if (definition.isValid) {\n      this.isValid = definition.isValid;\n    }\n\n    if (definition.validate) {\n      this.validate = definition.validate;\n    }\n\n    if (definition.resolveError) {\n      this.resolveError = definition.resolveError;\n    }\n  }\n\n  validate({\n    doc,\n    name,\n    nestedName,\n    value,\n    param,\n    resolveParam,\n    message,\n    resolveError\n  }) {\n    // Get the class name, which will be used later for letting know what class\n    // thrown error.\n    const className = doc.constructor.getName(); // Resolve param is the \"resolveParam\" function is provided.\n\n    if (Match.test(resolveParam, Function)) {\n      param = resolveParam({\n        doc,\n        name,\n        nestedName,\n        value\n      });\n    } // Parse param type if validator has parsing function.\n\n\n    if (Match.test(this.parseParam, Function)) {\n      this.parseParam(param);\n    } // Prepare data for validation.\n\n\n    const args = {\n      className,\n      doc,\n      name,\n      nestedName,\n      value,\n      param,\n      validator: this.name\n    }; // Perform validation.\n\n    if (!this.isValid(args)) {\n      // Prepare function for throwing validation error.\n      const throwError = message => {\n        // Throw error only if the error message has been successfully\n        // generated.\n        if (!message) {\n          return;\n        } // Throw error.\n\n\n        throw new ValidationError([{\n          className,\n          type: this.name,\n          name,\n          nestedName,\n          value,\n          param,\n          message\n        }], message);\n      }; // Generate error message using the \"resolveError\" function if provided.\n\n\n      if (Match.test(resolveError, Function)) {\n        throwError(resolveError(args));\n      } // Get error message from the string if provided.\n\n\n      if (Match.test(message, String)) {\n        throwError(message);\n      } // Get error by executing a class level \"resolveError\" function.\n\n\n      let Class = doc.constructor;\n      let classResolveError = Class.getResolveError();\n\n      if (classResolveError instanceof Function) {\n        throwError(classResolveError(args));\n      } // Get default error message.\n\n\n      if (this.resolveError instanceof Function) {\n        throwError(this.resolveError(args));\n      }\n\n      throwError(ValidationError.DEFAULT_REASON);\n    }\n  }\n\n  static create(definition) {\n    let validator = new Validator(definition);\n    Validator.validators[validator.name] = validator; // Create a validation function.\n\n    return Validators[validator.name] = function (options) {\n      validator.validate(options);\n    };\n  }\n\n}\n\n;\nValidator.validators = {};\nmodule.exportDefault(Validator);","map":{"version":3,"sources":["packages/jagi:astronomy/lib/modules/validators/validator.js"],"names":["ValidationError","module","watch","require","v","Validators","default","Validator","constructor","definition","name","parseParam","isValid","validate","resolveError","doc","nestedName","value","param","resolveParam","message","className","getName","Match","test","Function","args","validator","throwError","type","String","Class","classResolveError","getResolveError","DEFAULT_REASON","create","validators","options","exportDefault"],"mappings":"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","sourcesContent":["import { ValidationError } from 'meteor/mdg:validation-error';\nimport Validators from './validators.js';\n\nclass Validator {\n  constructor(definition) {\n    this.name = definition.name;\n    if (definition.parseParam) {\n      this.parseParam = definition.parseParam;\n    }\n    if (definition.isValid) {\n      this.isValid = definition.isValid;\n    }\n    if (definition.validate) {\n      this.validate = definition.validate;\n    }\n    if (definition.resolveError) {\n      this.resolveError = definition.resolveError;\n    }\n  }\n\n  validate({\n    doc,\n    name,\n    nestedName,\n    value,\n    param,\n    resolveParam,\n    message,\n    resolveError\n  }) {\n    // Get the class name, which will be used later for letting know what class\n    // thrown error.\n    const className = doc.constructor.getName();\n\n    // Resolve param is the \"resolveParam\" function is provided.\n    if (Match.test(resolveParam, Function)) {\n      param = resolveParam({\n        doc,\n        name,\n        nestedName,\n        value\n      });\n    }\n    // Parse param type if validator has parsing function.\n    if (Match.test(this.parseParam, Function)) {\n      this.parseParam(param);\n    }\n    // Prepare data for validation.\n    const args = {\n      className,\n      doc,\n      name,\n      nestedName,\n      value,\n      param,\n      validator: this.name\n    };\n    // Perform validation.\n    if (!this.isValid(args)) {\n      // Prepare function for throwing validation error.\n      const throwError = (message) => {\n        // Throw error only if the error message has been successfully\n        // generated.\n        if (!message) {\n          return;\n        }\n        // Throw error.\n        throw new ValidationError([{\n          className,\n          type: this.name,\n          name,\n          nestedName,\n          value,\n          param,\n          message\n        }], message);\n      };\n\n      // Generate error message using the \"resolveError\" function if provided.\n      if (Match.test(resolveError, Function)) {\n        throwError(resolveError(args));\n      }\n      // Get error message from the string if provided.\n      if (Match.test(message, String)) {\n        throwError(message);\n      }\n      // Get error by executing a class level \"resolveError\" function.\n      let Class = doc.constructor;\n      let classResolveError = Class.getResolveError();\n      if (classResolveError instanceof Function) {\n        throwError(classResolveError(args));\n      }\n      // Get default error message.\n      if (this.resolveError instanceof Function) {\n        throwError(this.resolveError(args));\n      }\n      throwError(ValidationError.DEFAULT_REASON);\n    }\n  }\n\n  static create(definition) {\n    let validator = new Validator(definition);\n    Validator.validators[validator.name] = validator;\n\n    // Create a validation function.\n    return Validators[validator.name] = function(options) {\n      validator.validate(options);\n    }\n  }\n};\n\nValidator.validators = {};\n\nexport default Validator;"]},"sourceType":"script","hash":"ed27043129523ab0f577092da96eb809f34ef895"}
